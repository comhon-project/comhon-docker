{"version":3,"sources":["serviceWorker.js","Cookie/Cookie.js","Logic/Config/ComhonConfig.js","Logic/Exception/ComhonException.js","Logic/Exception/HTTP/UnknownServerException.js","Logic/Requester/Requester.js","Account/Account.js","Home/Home.js","Login/Login.js","NavBar/NavBar.js","Logic/Model/AbstractModel.js","Logic/Object/Collection/ObjectCollection.js","Logic/Object/Collection/ObjectCollectionBuilder.js","Logic/Object/Collection/ObjectCollectionInterfacer.js","Logic/Exception/Interfacer/InterfaceException.js","Logic/Exception/ConstantException.js","Logic/Exception/Interfacer/NotReferencedValueException.js","Logic/Exception/Interfacer/ExportException.js","Logic/Exception/ArgumentException.js","Logic/Exception/Value/UnexpectedValueTypeException.js","Logic/Exception/Value/EnumerationException.js","Logic/Exception/Interfacer/ImportException.js","Logic/Interfacer/Interfacer.js","Logic/Interfacer/XMLInterfacer.js","Logic/ModuleBridge/ModuleBridge.js","Logic/Model/ModelComplex.js","Logic/Exception/Model/CastStringException.js","Logic/Model/SimpleModel.js","Logic/Model/ModelContainer.js","Logic/Model/ModelForeign.js","Logic/Object/Collection/MainObjectCollection.js","Logic/Interfacer/ObjectInterfacer.js","Logic/Exception/Object/AbstractObjectException.js","Logic/Object/AbstractComhonObject.js","Logic/Object/ComhonDateTime.js","Logic/Model/ModelDateTime.js","Logic/Model/Restriction/Restriction.js","Logic/Exception/Value/NotSatisfiedRestrictionException.js","Logic/Exception/Value/UnexpectedArrayException.js","Logic/Object/ComhonArray.js","Logic/Exception/HTTP/HTTPException.js","Logic/Model/Manager/ApiModelNameManager.js","Logic/Exception/Object/MissingRequiredValueException.js","Logic/Exception/Object/ConflictValuesException.js","Logic/Exception/Object/DependsValuesException.js","Logic/Exception/Model/CastComhonObjectException.js","Logic/Object/ComhonObject.js","Logic/Model/ModelInteger.js","Logic/Model/ModelFloat.js","Logic/Model/ModelBoolean.js","Logic/Model/ModelString.js","Logic/Model/ModelPercentage.js","Logic/Model/ModelIndex.js","Logic/Model/Manager/SimpleModels.js","Logic/Model/Restriction/NotNull.js","Logic/Model/Property/Property.js","Logic/Model/Property/ForeignProperty.js","Logic/Model/Property/AggregationProperty.js","Logic/Model/Property/AutoProperty.js","Logic/Exception/Manifest/ManifestException.js","Logic/ManifestParser/ManifestParser.js","Logic/Model/Restriction/Enum.js","Logic/Exception/Restriction/MalformedIntervalException.js","Logic/Exception/Restriction/NotSupportedModelIntervalException.js","Logic/Model/Restriction/Interval.js","Logic/Model/Restriction/Regex.js","Logic/Model/Restriction/Size.js","Logic/Model/Restriction/Length.js","Logic/Model/Restriction/NotEmptyString.js","Logic/Model/Restriction/NotEmptyArray.js","Logic/Model/Restriction/RegexCollection.js","Logic/ManifestParser/V_2_0/ManifestParser_V_2_0.js","Logic/ManifestParser/V_3_0/ManifestParser_V_3_0.js","Logic/ManifestParser/ManifestParserFactory.js","Logic/Exception/Model/NotDefinedModelException.js","Logic/Exception/Model/AlreadyUsedModelNameException.js","Logic/Model/Manager/ModelManager.js","Logic/Exception/Visitor/ParameterException.js","Logic/Exception/Visitor/VisitException.js","Logic/Visitor/Visitor.js","Logic/Visitor/ObjectFinder.js","Logic/Exception/Model/UnexpectedModelException.js","Logic/Exception/Model/UndefinedPropertyException.js","Logic/Exception/Model/NoIdPropertyException.js","Logic/Exception/Interfacer/AbstractObjectExportException.js","Logic/Exception/Interfacer/DuplicatedIdException.js","Logic/Exception/Interfacer/ContextIdException.js","Logic/Exception/Interfacer/ObjectLoopException.js","Logic/Exception/Value/MissingIdForeignValueException.js","Logic/Exception/Value/InvalidCompositeIdException.js","Logic/Model/Model.js","Logic/Exception/Interfacer/IncompatibleValueException.js","Logic/Model/ModelArray.js","Page/Utils/PageUtils.js","Details/Details.js","List/List.js","ComponentGenerator/ComponentGenerator.js","Loading/Loading.js","Page/Object/PageObject.js","Page/Filter/PageFilter.js","Page/List/PageList.js","Page/Details/PageDetails.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Cookie","cname","cvalue","exdays","d","Date","setTime","getTime","expires","toUTCString","document","cookie","name","ca","split","i","length","c","charAt","substring","indexOf","config","baseURI","this","ComhonException","message","code","UnknownServerException","auth","path","headers","body","queryParams","useAuth","request","method","ComhonConfig","hasBaseURI","getBaseURI","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","error","params","Error","hasOwnProperty","push","query","join","open","encodeURI","setRequestHeader","send","token","register","splited","payload","JSON","parse","atob","username","Requester","registerAuth","setCookie","get","Authorization","Home","props","state","number","handleChange","bind","event","setState","target","value","className","style","textAlign","Account","getUsername","React","Component","Login","password","errorMessage","handleSubmit","preventDefault","data","FormData","set","post","then","status","importToken","responseText","onLogin","alert","catch","onSubmit","type","onChange","id","withRouter","NavBar","getListModels","parent","childrenMap","children","models","currentModel","extends","j","list","modelIndex","modelInfos","comhon_model_name","to","api_model_name","aria-labelledby","dropDownModelsClass","appInitialized","data-toggle","data-target","aria-controls","aria-expanded","aria-label","role","aria-haspopup","logged","AbstractModel","constructor","isCurrentLevelFirstLevel","nodeName","interfacer","isFirstLevel","objectCollectionInterfacer","nullNodes","oids","interfacedValue","model","ObjectCollection","Map","inlcudeInheritance","object","key","getModelKey","getName","has","objectTemp","isA","isInheritedFrom","getModel","getObject","throwException","success","hasCompleteId","hasIdProperties","getId","delete","getSharedIdModel","ObjectCollectionBuilder","isForeign","add","isIsolated","addForeignObjects","visitForeignObjects","objectCollection","stack","pop","hash","getOid","getClassName","getUniqueModel","element","issetValue","isIsolatedElement","addObject","getComplexProperties","complexeProperty","getValue","ObjectCollectionInterfacer","build","newObjectCollection","newForeignObjectCollection","obj","hasObject","notReferencedObjects","getMap","modelNameAndObjects","isMain","InterfaceException","exception","property","originalException","stackProperties","getStackProperties","getOriginalException","stringifiedProperties","reverse","getMessage","getCode","e","ConstantException","NotReferencedValueException","NOT_REFERENCED_VALUE_EXCEPTION","ExportException","ArgumentException","argument","expected","index","enumeration","getComhonClass","Array","isArray","stringify","UnexpectedValueTypeException","expectedType","builtMessage","stringValue","stringProperty","UNEXPECTED_VALUE_TYPE_EXCEPTION","EnumerationException","ENUMERATION_EXCEPTION","ImportException","allowedMergeType","Object","freeze","Interfacer","MERGE","boolean","hasPropertiesFilter","propertiesNames","mergeType","ALLOWED_MERGE_TYPE","node","isAssociative","string","preferences","setPreferences","export","import","PRIVATE_CONTEXT","setPrivateContext","ONLY_UPDATED_VALUES","setExportOnlyUpdatedValues","PROPERTIES_FILTER","setPropertiesFilter","FLATTEN_VALUES","setFlattenValues","STRINGIFIED_VALUES","FLAG_VALUES_AS_UPDATED","setFlagValuesAsUpdated","FLAG_OBJECT_AS_LOADED","setFlagObjectAsLoaded","VERIFY_REFERENCES","setVerifyReferences","VALIDATE","setValidate","MERGE_TYPE","setMergeType","NIL_URI","XMLInterfacer","implementation","createDocument","preserveWhiteSpace","childNodes","child","hasAttribute","setAttributeNode","ownerDocument","createAttributeNS","setAttributeNS","prettyPrint","XMLSerializer","serializeToString","asNode","childNode","_getChildNode","isNodeNull","getAttribute","hasAttributeNS","Element","array","domNode","ASSOCIATIVE_KEY","COMPLEX_ID_KEY","isComplexInterfacedId","Node","importNode","appendChild","createElement","setNodeAsNull","createTextNode","setAttribute","domElement","removeChild","removeAttribute","setValue","lastChild","createNode","_saveXML","domDoc","DOMParser","parseFromString","item","console","log","toRemove","extractNodeText","tempDoc","nodeType","nodeValue","modelRootInstance","objectFinder","ModelComplex","objects","getNotReferencedObjects","ObjectFinder","ModuleBridge","getObjectFinder","statck","execute","ID","MODEL","SEARCH_FOREIGN","getInstanceWithProperties","forceIsolateElements","verifValue","isolate","_export","hasToVerifyReferences","_verifyReferences","_processNullNodes","rootNode","addNullNamespaceURI","nullNode","interfacedId","interfacedObject","rootObject","getMergeType","_getRootObject","_initObjectCollectionInterfacer","OVERWRITE","isLoaded","reset","setIsLoaded","_fillObject","CastStringException","propertyMessage","CAST_EXCEPTION","SimpleModel","modelName","exportSimple","importValue","isNullValue","_importScalarValue","ModelContainer","load","depth","isUniqueModelSimple","isEqual","ModelForeign","isloaded","getLoadedModel","getObjectInstance","_exportId","_import","_importId","ALLOWED_FORMATS","json","ALLOWED_MEDIA_TYPES","ObjectInterfacer","format","substr","AbstractObjectException","comhonObject","isAbstract","ABSTRACT_OBJECT_EXCEPTION","Symbol","iterator","AbstractComhonObject","flagAsUpdated","_hasToUpdateMainObjectCollection","MainObjectCollection","removeObject","size","unshift","shift","hasValue","names","values","Model","next","done","propertyName","fillObject","ComhonDateTime","dayValue","yearValue","monthValue","dateValue","hoursValue","minutesValue","secondsValue","msValue","millisecondsValue","timeValue","ModelDateTime","toString","fromString","time","dateTime","toISOString","Restriction","restriction","firstRestrictions","secondRestrictions","firstRestrictionsMap","restrictions","satisfy","NotSatisfiedRestrictionException","increment","toMessage","NOT_SATISFIED_RESTRICTION_EXCEPTION","UnexpectedArrayException","objectArray","modelArray","part","objectModel","getElementName","isNotNullElement","_isInerited","expectedRestriction","getArrayRestrictions","getElementRestrictions","actualRestriction","trustModelName","getModelName","objectModelName","ComhonArray","elementName","ModelArray","getShortName","getLoadedUniqueModel","_reset","propertiesFilter","forceLoad","verifElementValue","getRestriction","getIncrement","getModelArray","getDepth","getExpectedType","_pushValue","_popValue","_unshiftValue","_shiftValue","getInstanceValue","containedModel","count","recursive","_resetUpdatedStatusRecursive","_resetUpdatedStatus","propAndValue","resetUpdatedStatus","isComplex","isFlaggedAsUpdated","isUpdated","isIdUpdated","getFirstNotSatisifed","getUniqueModelName","HTTPException","apiModelName","allowUnauthorized","apiModel","MissingRequiredValueException","unset","MISSING_REQUIRED_VALUE_EXCEPTION","ConflictValuesException","CONFLICT_VALUES_EXCEPTION","DependsValuesException","propertyOne","propertyTwo","DEPENDS_VALUES_EXCEPTION","CastComhonObjectException","sourceModel","destModel","ComhonObject","getPropertiesWithDefaultValues","getDefaultValue","resetId","getIdProperties","hasUniqueIdProperty","getUniqueIdProperty","idValues","decodeId","getProperty","validate","isAggregation","propertyModel","_encodeId","isUpdatedValue","getDateTimeProperties","hasProperty","getUpdatedValues","properties","getRequiredProperties","getConflicts","getDependsProperties","getDependencies","originalModel","_updateModel","hasIdProperty","ApiModelNameManager","getApiModelName","fill","operation","loadValue","ModelInteger","castValue","Number","isInteger","isNaN","castedValue","parseFloat","ModelFloat","ModelBoolean","ModelString","ModelPercentage","ModelIndex","simpleModels","NotNull","Property","isId","isPrivate","isRequired","isNotNull","defaultValue","isInterfacedAsNodeXml","dependencies","isAllowedModel","uniqueModel","every","compare","getRestrictions","ForeignProperty","_getModel","foreignModel","AggregationProperty","aggregationProperties","getAggregationProperties","AutoProperty","auto","INCREMENTAL","ManifestException","MANIFEST_EXCEPTION","ManifestParser","manifest","isLocal","namespace","getInterfacerInstance","getManifest","getInterfacer","propertyModelUnique","patternPromises","currentNode","_getCurrentProperties","_initProperties","it","castValueToBoolean","_getArrayStringValue","nodeToArray","interfaceAsNodeXml","_getBaseInfosProperty","_getDependencyProperties","_isCurrentPropertyForeign","modelForeign","aggregations","getDimensionsCount","_getAggregationInfos","_getDefaultValue","_getRestrictions","_getCurrentPropertyNode","Enum","arr1","concat","sort","arr2","MalformedIntervalException","interval","MALFORMED_INTERVAL_EXCEPTION","NotSupportedModelIntervalException","NOT_SUPPORTED_MODEL_INTERVAL_EXCEPTION","float","integer","Interval","matches","FLOAT_INTERVAL","exec","INTEGER_INTERVAL","parseInt","DATETIME_INTERVAL","trim","Regex","regex","flags","regexValue","extractPatternAndFlag","RegExp","test","lastBackSlachIndex","lastIndexOf","Size","_isLeftClosed","_getLeftEndPoint","_getRightEndPoint","_isRightClosed","Length","NotEmptyString","NotEmptyArray","promise","ManifestParser_V_2_0","extendsValue","_EXTENDS","_getPropertyArrayStringValue","INHERITANCE_REQUESTABLES","_getBooleanValue","IS_MAIN","manifestParsers","types","NAME","manifestParser","getNamespace","_getPropertyModelUniqueName","IS_FOREIGN","currentProperty","IS_ID","IS_PRIVATE","NOT_NULL","IS_REQUIRED","IS_ISOLATED","AUTO","_completePropertyModel","XML_ELEM_TYPE","XML_ATTRIBUTE","XML_NODE","NOT_EMPTY","LENGTH","ENUM","enumValues","INTERVAL","PATTERN","REGEX","pattern","RegexCollection","hasRegisteredRegex","getRegex","getRegisteredRegex","DEPENDS","conflicts","CONFLICTS","propertyNode","_isArrayNode","_isAggregationNode","valuesNode","subModel","elementRestrictions","valuesName","IS_ASSOCIATIVE","arrayRestrictions","SIZE","propertyToSimpleModel","valueToSimpleModel","ManifestParser_V_3_0","IS_ABSTRACT","SHARE_PARENT_ID","SHARED_ID","inheritance","INHERITANCE_KEY","PROPERTY_TO_SIMPLE_MODEL","_getValueModelUniqueName","VALUE_TO_SIMPLE_MODEL","AGGREGATIONS","ManifestParserFactory","version","NotDefinedModelException","NOT_DEFINED_MODEL_EXCEPTION","AlreadyUsedModelNameException","ALREADY_USED_MODEL_NAME_EXCEPTION","ModelManager","simpleModelName","getModelRoot","_getInstanceModel","fullyQualifiedName","mainModel","getInstance","localTypeManifestParsers","getLocalModelManifestParsers","setManifestParser","_instanciateLocalModels","hasInstanceModelLoaded","isOriginalModel","_getParentModels","parentModels","PROPERTIES","_buildProperties","_getSharedIdModel","SHARED_ID_MODEL","IS_MAIN_MODEL","PARENT_MODELS","localManifestParser","hasManifestParser","modelNames","getExtends","hasInstanceModel","isLoading","getInstanceModel","parentModel","propertiesWithDefault","getProperties","getCurrentPropertiesCount","getCurrentPropertyModelUniqueName","getCurrentProperty","hasDefaultValue","nextProperty","all","sharedIdType","sharedId","shareParentId","isSharedParentId","sharedIdModel","ParameterException","parameterName","VisitException","Visitor","_verifParameters","mainObject","result","_init","_acceptChildren","_finalize","parentObject","_visit","_postVisit","keyAndValue","_accept","parameters","_getMandatoryParameters","propertyNameStack","UnexpectedModelException","expectedModel","actualModel","UNEXPECTED_MODEL_EXCEPTION","UndefinedPropertyException","UNDEFINED_PROPERTY_EXCEPTION","NoIdPropertyException","NO_ID_PROPERTY_EXCEPTION","AbstractObjectExportException","ABSTRACT_OBJECT_EXPORT_EXCEPTION","DuplicatedIdException","DUPLICATED_ID_EXCEPTION","ContextIdException","CONTEXT_ID_EXCEPTION","ObjectLoopException","OBJECT_LOOP_EXCEPTION","MissingIdForeignValueException","MISSING_ID_FOREIGN_VALUE_EXCEPTION","InvalidCompositeIdException","INVALID_COMPOSITE_ID_EXCEPTION","addInstanceModel","localModels","a","addManifestParser","_setProperties","propertyNameAndConflicts","localModel","publicIdProperties","hasModelDateTime","hasDependencies","getSharedIdParentMatch","first","parentMatch","shareIdModel","getParent","isInherited","getParents","pos","getIdProperty","options","objectInterfacer","optionsModel","unique","_initOptionsMethods","getResponseHeader","collectionAllowHeader","uniqueAllowHeader","collectionAllow","replace","uniqueAllow","initValue","collection","collectionAllowed","allow","pushValue","uniqueAllowed","_loadOptions","decodedId","_buildObjectFromId","newObject","mustValidate","originalCollection","exportedValue","isPrivateContext","onlyUpdatedValues","hasToExportOnlyUpdatedValues","getPropertiesFilter","hasNewObject","isInterfaceable","exportedId","hasPrivateIdProperty","_toInterfacedId","inheritanceModelName","hasIds","idProperty","idValue","encodeId","_getInheritedModelName","_getInheritedModel","getIdFromInterfacedObject","_getOrCreateObjectInstance","hasToFlagValuesAsUpdated","cast","_importRoot","isNodeValue","getNodeClasses","_getOrCreateObjectInstanceFromInterfacedObject","addStartObject","newModel","_verifIdBeforeFillObject","_fillObjectwithId","messageId","processUnchangedValues","unchangedValues","getObjectValues","_getContextProperties","getNullNodes","_isNextLevelFirstLevel","hasToFlagObjectAsLoaded","_processUnchangeValues","getOneDimensionalValues","getNewObjectCollection","isStringifiedValues","setId","ModelRoot","registerModelRoot","registerObjectFinder","IncompatibleValueException","arrayRestriction","elementRestriction","nodeArray","createArrayNode","addAssociativeValue","addValue","isArrayNodeValue","getArrayNodeClasses","elements","_getInterfacedElements","keys","nodeToObject","_verifModel","objectArrayElmt","skipNullValues","onUnauthorized","manageError","isRequestable","getOptions","valueName","allowedMethods","sentencePrefix","getErrorSentence","responseStatus","sentence","prefix","suffix","Details","isClickable","getComponentList","handleClick","setIsClickable","isRoot","PageUtils","ComponentGenerator","generate","keyAndvalue","getValueComponent","componentModel","stopPropagation","newPath","pathname","history","onClick","List","useKeyId","elementModel","componentKey","fontSize","valueModel","toLocaleDateString","toLocaleTimeString","Loading","PageObject","initComponent","setObject","retrieveComhonObject","retrieveComhonArray","loadObject","PageFilter","PageList","getModelWithApiModelName","pathModel","PageDetails","color","App","handleLogin","showLoginModal","initialize","getCookie","validateToken","initApp","islogged","getApiModelNames","$","getElementById","modal","backdrop","keyboard","exact","component","now","tabIndex","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.255fa69b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","class Cookie {\n\n  static setCookie(cname, cvalue, exdays) {\n    var d = new Date();\n    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\n    var expires = \"expires=\"+d.toUTCString();\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/;SameSite=Strict\";\n  }\n\n  static getCookie(cname) {\n    var name = cname + \"=\";\n    var ca = document.cookie.split(';');\n    for(var i = 0; i < ca.length; i++) {\n      var c = ca[i];\n      while (c.charAt(0) === ' ') {\n        c = c.substring(1);\n      }\n      if (c.indexOf(name) === 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n    return \"\";\n  }\n}\n\nexport default Cookie;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nclass ComhonConfig {\n\n  #baseURI = null;\n\n\n  #tokenType = null;\n\n  /**\n   * @param {Object} config some configurations\n   * @param {string} config.baseURI the base URI used with ComhonRequest\n   */\n  initialize(config) {\n    if (config.baseURI) {\n      this.#baseURI = config.baseURI;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasBaseURI() {\n    return this.#baseURI !== null && this.#baseURI !== '';\n  }\n\n  /**\n   * @return {string|void}\n   */\n  getBaseURI() {\n    return this.#baseURI;\n  }\n\n}\n\nexport default new ComhonConfig();\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nclass ComhonException {\n\n\t/**\n\t * @type {string}\n\t */\n\t#message = '';\n\n\t/**\n\t * @type {integer}\n\t */\n\t#code = 0;\n\n\t/**\n\t *\n\t * @param {string} message\n\t * @param {integer} code\n\t */\n\tconstructor(message = '', code = 0) {\n\t\tthis.#message = message;\n\t\tthis.#code = code;\n\t}\n\n\t/**\n\t * get exception message\n\t *\n\t * @returns {string}\n\t */\n\tgetMessage() {\n\t\treturn this.#message;\n\t}\n\n\t/**\n\t * get exception code\n\t *\n\t * @returns {integer}\n\t */\n\tgetCode() {\n\t\treturn this.#code;\n\t}\n\n}\n\nexport default ComhonException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\n\nclass UnknownServerException extends ComhonException {\n\n  constructor() {\n    super('unknown server error (maybe server is not reachable)');\n  }\n\n}\n\nexport default UnknownServerException;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonConfig from 'Logic/Config/ComhonConfig';\nimport UnknownServerException from 'Logic/Exception/HTTP/UnknownServerException';\n\nclass Requester {\n\n  #auth = null;\n\n  /**\n   * register authorisation header value that will be used\n   * during request if useAuth is set to true.\n   *\n   * @param {string} path a request URI or a suffix path.\n   */\n  registerAuth(auth) {\n    this.#auth = auth;\n  }\n\n  /**\n   * send request to sever with GET method\n   *\n   * @async\n   * @param {string} path a request URI or a suffix path.\n   *                      - if given string begin by protocol http or https,\n   *                        it is considered as complete URI (without query parameters)\n   *                      - otherwise it is considered as suffix path and it\n   *                        will be concatenate to host address or to base URI (defined in ComhonConfig).\n   * @param {Object} headers the request headers. each object property is a header name,\n   *                         each object value is the corresponding header value\n   * @param {*} body the request body.\n   * @param {Object} queryParams the request query parameters. each object property is a parameter name,\n   *                         each object value is the corresponding parameter value\n   * @param {boolean} useAuth if true the authorisation header is automatically added with\n   *                          token value registered in Account and with token type registered in ComhonConfig.\n   * @returns {Promise<XMLHttpRequest>} the response\n   */\n  async get(path, headers = null, body = null, queryParams = null, useAuth = true) {\n    return this.request(path, 'GET', headers, body, queryParams, useAuth);\n  }\n\n\n  /**\n   * send request to sever with POST method\n   *\n   * @async\n   * @param {string} path a request URI or a suffix path.\n   *                      - if given string begin by protocol http or https,\n   *                        it is considered as complete URI (without query parameters)\n   *                      - otherwise it is considered as suffix path and it\n   *                        will be concatenate to host address or to base URI (defined in ComhonConfig).\n   * @param {Object} headers the request headers. each object property is a header name,\n   *                         each object value is the corresponding header value\n   * @param {*} body the request body.\n   * @param {Object} queryParams the request query parameters. each object property is a parameter name,\n   *                         each object value is the corresponding parameter value\n   * @param {boolean} useAuth if true the authorisation header is automatically added with\n   *                          token value registered in Account and with token type registered in ComhonConfig.\n   * @returns {Promise<XMLHttpRequest>} the response\n   */\n  async post(path, headers = null, body = null, queryParams = null, useAuth = true) {\n    return this.request(path, 'POST', headers, body, queryParams, useAuth);\n  }\n\n  /**\n   * send request to sever with GET method\n   *\n   * @async\n   * @param {string} path a request URI or a suffix path.\n   *                      - if given string begin by protocol http or https,\n   *                        it is considered as complete URI (without query parameters)\n   *                      - otherwise it is considered as suffix path and it\n   *                        will be concatenate to host address or to base URI (defined in ComhonConfig).\n   * @param {Object} headers the request headers. each object property is a header name,\n   *                         each object value is the corresponding header value\n   * @param {*} body the request body.\n   * @param {Object} queryParams the request query parameters. each object property is a parameter name,\n   *                         each object value is the corresponding parameter value\n   * @param {boolean} useAuth if true the authorisation header is automatically added with\n   *                          token value registered in Account and with token type registered in ComhonConfig.\n   * @returns {Promise<XMLHttpRequest>} the response\n   */\n  async options(path, headers = null, body = null, queryParams = null, useAuth = true) {\n    return this.request(path, 'OPTIONS', headers, body, queryParams, useAuth);\n  }\n\n  /**\n   * send request to sever\n   *\n   * @async\n   * @param {string} path a request URI or a suffix path.\n   *                      - if given string begin by protocol http or https,\n   *                        it is considered as complete URI (without query parameters)\n   *                      - otherwise it is considered as suffix path and it\n   *                        will be concatenate to host address or to base URI (defined in ComhonConfig).\n   * @param {string} method the request method (GET, POST, ...).\n   * @param {Object} headers the request headers. each object property is a header name,\n   *                         each object value is the corresponding header value\n   * @param {*} body the request body.\n   * @param {Object} queryParams the request query parameters. each object property is a parameter name,\n   *                         each object value is the corresponding parameter value\n   * @param {boolean} useAuth if true the authorisation header is automatically added with\n   *                          token value registered in Account and with token type registered in ComhonConfig.\n   * @returns {Promise<XMLHttpRequest>} the response\n   */\n  async request(path, method, headers, body, queryParams, useAuth = true) {\n    if (path.indexOf('http:') !== 0 && path.indexOf('https:') !== 0) {\n      if (ComhonConfig.hasBaseURI()) {\n        path = ComhonConfig.getBaseURI() + path;\n      }\n    }\n    return await new Promise((resolve, reject) => {\n      var xhr = new XMLHttpRequest();\n      xhr.addEventListener('load', () => {\n          resolve(xhr);\n      });\n      xhr.addEventListener('error', (error) => {\n        reject(new UnknownServerException());\n      });\n      const params = [];\n      if (queryParams !== null) {\n        if (typeof queryParams !== 'object') {\n          throw new Error('invalid parameter 5 (queryParams). it must be an object');\n        }\n        for (const name in queryParams) {\n          if (queryParams.hasOwnProperty(name)) {\n              params.push(`${name}=${queryParams[name]}`);\n          }\n        }\n      }\n      const query = params.length === 0 ? '' : '?' + params.join('&');\n      xhr.open(method, encodeURI(path + query));\n\n      if (headers !== null) {\n        if (typeof headers !== 'object') {\n          throw new Error('invalid parameter 3 (headers). it must be an object');\n        }\n        for (const name in headers) {\n          if (headers.hasOwnProperty(name)) {\n              xhr.setRequestHeader(name, headers[name]);\n          }\n        }\n      }\n      if (useAuth && this.#auth !== null) {\n        xhr.setRequestHeader('Authorization', this.#auth)\n      }\n      xhr.send(body);\n    });\n  }\n\n}\n\nexport default new Requester();\n","import Cookie from '../Cookie/Cookie';\nimport Requester from 'Logic/Requester/Requester';\n\nclass Account {\n\n  #token = null;\n  #username = null;\n\n  getToken() {\n    return this.#token;\n  }\n\n  getUsername() {\n    return this.#username;\n  }\n\n  importToken(token, register) {\n    var splited = token.split(\".\");\n    let payload = JSON.parse(atob(splited[1]));\n    this.#username = payload.username;\n    this.#token = token;\n    Requester.registerAuth('Bearer '+this.#token);\n    if (register) {\n      Cookie.setCookie('token', token, 1);\n    }\n  }\n\n  validateToken(token) {\n    return Requester.get('', {Authorization: 'Bearer '+token});\n  }\n\n}\n\nexport default new Account();\n","import React from 'react';\nimport './Home.css';\nimport Account from '../Account/Account';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      number: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({[event.target.name]: event.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"Home\" style={{textAlign: 'center'}}>\n        <h1>Welcome{Account.getUsername() ? ' '+Account.getUsername() : ''} !</h1>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Account from '../Account/Account.js';\nimport Requester from 'Logic/Requester/Requester';\nimport './Login.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      password: \"\",\n      errorMessage: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({[event.target.name]: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    // create a new XMLHttpRequest\n    var data = new FormData();\n    data.set('username', this.state.username);\n    data.set('password', this.state.password);\n\n    Requester.post('http://localhost:8000/api/login', null, data).then(xhr => {\n      // update the state of the component with the result here\n      if (xhr.status === 200) {\n        Account.importToken( xhr.responseText, true);\n        this.props.onLogin();\n      } else if (xhr.status === 404) {\n        this.setState({errorMessage: xhr.responseText});\n      } else {\n        alert('unknown server error when trying to login');\n      }\n    }).catch(error => {\n      alert('unknown server error when trying to login');\n    });\n  }\n\n  render() {\n    return (\n      <form className=\"login\" onSubmit={this.handleSubmit}>\n        <div className=\"error\">{this.state.errorMessage}</div>\n        <label>User name:\n          <input type=\"text\" value={this.state.username} onChange={this.handleChange} id=\"username\" name=\"username\" />\n        </label>\n        <br />\n        <label>Password:\n          <input type=\"password\" value={this.state.password} onChange={this.handleChange} id=\"password\" name=\"password\" />\n        </label>\n        <br />\n        <input type=\"submit\" value=\"Envoyer\" />\n      </form>\n    );\n  }\n}\n\nexport default withRouter(Login);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './NavBar.css';\nimport Account from '../Account/Account.js';\n\nclass NavBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getListModels = this.getListModels.bind(this);\n  }\n\n  getListModels(parent, childrenMap) {\n    let children = [];\n    var i = 0;\n    if (parent === null) {\n      childrenMap = {};\n      for (i = 0; i < this.props.models.length; i++) {\n        let currentModel = this.props.models[i];\n        if (typeof currentModel.extends !== 'undefined') {\n          for (var j = 0; j < currentModel.extends.length; j++) {\n            if (typeof childrenMap[currentModel.extends[j]] === 'undefined') {\n              childrenMap[currentModel.extends[j]] = [];\n            }\n            childrenMap[currentModel.extends[j]].push(i);\n          }\n        } else {\n          children.push(i);\n        }\n      }\n    } else {\n      children = childrenMap[parent];\n    }\n    let list = [];\n    for (i = 0; i < children.length; i++) {\n      let modelIndex = children[i];\n      let modelInfos = this.props.models[modelIndex];\n      if (typeof childrenMap[modelInfos.comhon_model_name] !== 'undefined') {\n        list.push(\n          <li className=\"dropdown-submenu dropright\" key={modelInfos.comhon_model_name}>\n            <div>\n                <Link className=\"dropdown-item\" to={\"/\"+modelInfos.api_model_name}>{modelInfos.api_model_name}</Link>\n            </div>\n            <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n              {this.getListModels(modelInfos.comhon_model_name, childrenMap)}\n            </ul>\n          </li>\n        );\n      } else {\n          list.push(\n            <li key={modelInfos.comhon_model_name}>\n              <Link className=\"dropdown-item\" to={\"/\"+modelInfos.api_model_name}>{modelInfos.api_model_name}</Link>\n            </li>\n          );\n      }\n    }\n    return list;\n  }\n\n  render() {\n    const dropDownModelsClass = this.props.appInitialized ? \"nav-link dropdown-toggle\" : \"nav-link dropdown-toggle disabled\";\n    return (\n      <div>\n      <nav className=\"navbar fixed-top navbar-expand-lg navbar-light bg-light\">\n        <span className=\"navbar-brand\">Comhon!</span>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/home\">Home</Link>\n            </li>\n            <li className=\"nav-item dropdown\">\n              <div className={dropDownModelsClass} id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                Models\n              </div>\n              <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                {this.getListModels(null, null)}\n              </ul>\n            </li>\n          </ul>\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\">\n              {this.props.logged ? <span className=\"nav-link\">{Account.getUsername()}</span> : <Link className=\"nav-link\" to=\"/login\">Login</Link>}\n            </li>\n          </ul>\n        </div>\n      </nav>\n      </div>\n    );\n  }\n}\n\nexport default NavBar;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * @abstract\n */\nclass AbstractModel {\n\n\tconstructor() {\n\t\tif (this.constructor === AbstractModel) {\n\t\t\tthrow new Error('can\\'t instanciate abstract class AbstractModel');\n\t\t}\n  }\n\n\t/**\n\t * get class name\n\t *\n\t * @abstract\n\t */\n\tgetClassName() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if model is loaded or not\n\t *\n\t * @returns {boolean}\n\t */\n\tisLoaded() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * verify if model is abstract.\n\t * object with abstract model may be instanciated but cannot be set as loaded and cannot be interfaced\n\t *\n\t * @returns {boolean}\n\t */\n\tisAbstract() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * load model\n\t *\n\t * @async\n\t * @returns {Promise<void>}\n\t */\n\tasync load() {\n\t\t// do nothing\n\t}\n\n\t/**\n\t * get model name\n\t *\n\t * @returns {void}\n\t */\n\tgetName() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * verify if model is complex or not\n\t *\n\t * model is complex if model is not instance of SimpleModel\n\t *\n\t * @returns {boolean}\n\t */\n\tisComplex() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if during import we stay in first level object or not\n\t *\n\t * @abstract\n\t * @param {boolean} isCurrentLevelFirstLevel\n\t * @returns {boolean}\n\t */\n\t_isNextLevelFirstLevel(isCurrentLevelFirstLevel) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * export value in specified format according interfacer\n\t *\n\t * @abstract\n\t * @param {*} value\n\t * @param {string} nodeName\n\t * @param {Interfacer} interfacer\n\t * @param {boolean} isFirstLevel\n\t * @param {ObjectCollectionInterfacer} objectCollectionInterfacer\n\t * @param {Element[]} nullNodes nodes that need to be processed at the end of export (only used for xml export).\n\t * @param {Object} oids oid (object id) map of all exported objects (to avoid infinit loop)\n\t * @param {boolean} isolate\n\t * @throws {ComhonException}\n\t * @returns {*}\n\t */\n\t_export(value, nodeName, interfacer, isFirstLevel, objectCollectionInterfacer, nullNodes, oids, isolate = false) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * import interfaced object\n\t *\n\t * @async\n\t * @abstract\n\t * @param {*} interfacedValue\n\t * @param {Interfacer} interfacer\n\t * @param {boolean} isFirstLevel\n\t * @param {ObjectCollectionInterfacer} objectCollectionInterfacer\n\t * @param {boolean} isolate\n\t * @returns {Promise<*>}\n\t */\n\tasync _import(interfacedValue, interfacer, isFirstLevel, objectCollectionInterfacer, isolate = false) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if value is correct according current model\n\t *\n\t * @abstract\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tverifValue(value) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if specified model is equal (same instance) to this model\n\t *\n\t * @param AbstractModel model\n\t * @returns {boolean}\n\t */\n\tisEqual(model) {\n\t\treturn this === model;\n\t}\n\n}\n\nexport default AbstractModel;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\n\nclass ObjectCollection {\n\n\t/**\n\t *\n\t * @type {ComhonObject[][]}\n\t */\n\t#map = new Map();\n\n\t/**\n\t * get model that will be used to store object with specified model.\n\t * returned model may be different than specified model due to shared id\n\t *\n\t * @param {Model} model\n\t * @returns {Model}\n\t */\n\tstatic getModelKey(model) {\n\t\treturn model.getSharedIdModel() === null ? model : model.getSharedIdModel();\n\t}\n\n\t/**\n\t * get array map that store all objects by model name and by id\n\t *\n\t * @returns {ComhonObject[][]}\n\t */\n\tgetMap() {\n\t\treturn this.#map;\n\t}\n\n\t/**\n\t * get comhon object with specified model name (if exists in ObjectCollection)\n\t *\n\t * @param {string|integer} id\n\t * @param {Model} model\n\t * @param {boolean} inlcudeInheritance if true, search in extended model that share same id\n\t * @returns {ComhonObject|void} null if not found\n\t */\n\tgetObject(id, model, inlcudeInheritance = true) {\n\t\tif (id === null) {\n\t\t\treturn null;\n\t\t}\n\t\tlet object = null;\n\t\tconst key = ObjectCollection.getModelKey(model).getName();\n\n\t\tif (this.#map.has(key) && this.#map.get(key).has(id)) {\n\t\t\tconst objectTemp = this.#map.get(key).get(id);\n\t\t\tif (objectTemp.isA(model) || (inlcudeInheritance && model.isInheritedFrom(objectTemp.getModel()))) {\n\t\t\t\tobject = objectTemp;\n\t\t\t}\n\t\t}\n\n\t\treturn object;\n\t}\n\n\t/**\n\t * verify if comhon object with specified model name and id exists in ObjectCollection\n\t *\n\t * @param {string|integer} id\n\t * @param {Model} model\n\t * @param {boolean} inlcudeInheritance if true, search in extended model that share same id\n\t * @returns {boolean} true if exists\n\t */\n\thasObject(id, model, inlcudeInheritance = true) {\n\t\treturn this.getObject(id, model, inlcudeInheritance) !== null;\n\t}\n\n\t/**\n\t * add comhon object (if not already added)\n\t *\n\t * @param {ComhonObject} object\n\t * @param {boolean} throwException it true, throw exception if another instance object already added\n\t * @throws {ComhonException}\n\t * @returns {boolean} true if object is added\n\t */\n\taddObject(object, throwException = true) {\n\t\tlet success = false;\n\n\t\tif (!object.hasCompleteId() || !object.getModel().hasIdProperties()) {\n\t\t\treturn success;\n\t\t}\n\t\tconst id = object.getId();\n\t\tconst key = ObjectCollection.getModelKey(object.getModel()).getName();\n\n\t\tif (this.#map.has(key) && this.#map.get(key).has(id)) {\n\t\t\tif (throwException && this.#map.get(key).get(id) !== object) {\n\t\t\t\tthrow new ComhonException(`different objects with same id. shared id model: '${key}', id: '${id}'`);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!this.#map.has(key)) {\n\t\t\t\tthis.#map.set(key, new Map());\n\t\t\t}\n\t\t\tthis.#map.get(key).set(id, object);\n\t\t\tsuccess = true;\n\t\t}\n\n\t\treturn success;\n\t}\n\n\t/**\n\t * remove comhon object from collection if exists\n\t *\n\t * @param {ComhonObject} object\n\t * @param {boolean} throwException it true, throw exception if another instance object exists\n\t * @throws {ComhonException}\n\t * @returns {boolean} true if object is removed\n\t */\n\tremoveObject(object, throwException = true) {\n\t\tlet success = false;\n\n\t\tif (!object.hasCompleteId() || !object.getModel().hasIdProperties()) {\n\t\t\treturn success;\n\t\t}\n\t\tconst id = object.getId();\n\t\tconst key = ObjectCollection.getModelKey(object.getModel()).getName();\n\n\t\tif (this.#map.has(key) && this.#map.get(key).has(id)) {\n\t\t\tif (this.#map.get(key).get(id) === object) {\n\t\t\t\tthis.#map.get(key).delete(id);\n\t\t\t\tsuccess = true;\n\t\t\t} else if (throwException) {\n\t\t\t\tthrow new ComhonException(`different objects with same id. shared id model: '${key}', id: '${id}'`);\n\t\t\t}\n\t\t}\n\n\t\treturn success;\n\t}\n\n\t/**\n\t * reset object collection\n\t */\n\treset() {\n\t\tthis.#map = new Map();\n\t}\n\n}\n\nexport default ObjectCollection;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ObjectCollection from 'Logic/Object/Collection/ObjectCollection';\n\nclass ObjectCollectionBuilder {\n\n\t/**\n\t* build object collection that will store given object itslef (if has id)\n\t* and all its contained unique objects (with id)\n\t *\n\t * @param {AbstractComhonObject} object\n\t * @param {boolean} addForeignObjects\n\t * @param {boolean} visitForeignObjects\n\t * @param {ObjectCollection} objectCollection you may populate an existing object collection\n\t * @returns {ObjectCollection}\n\t */\n\tstatic build(object, addForeignObjects = true, visitForeignObjects = false, objectCollection = null) {\n\t\tconst stack = [[object, false, true, false]];\n\t\tconst oids = {};\n\t\tlet isForeign, add, isIsolated;\n\n\t\tif (objectCollection === null) {\n\t\t\tobjectCollection = new ObjectCollection();\n\t\t}\n\n\t\twhile (stack.length > 0) {\n\t\t\t[object, isForeign, add, isIsolated] = stack.pop();\n\t\t\tconst hash = object.getOid();\n\t\t\tif (hash in oids) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\toids[hash] = null;\n\n\t\t\tif (object.getClassName() === 'ComhonArray') {\n\t\t\t\tif (object.getUniqueModel().getClassName() === 'Model') {\n\t\t\t\t\tfor (const [key, element] of object) {\n\t\t\t\t\t\tif (object.issetValue(key)) {\n\t\t\t\t\t\t\tstack.push([element, isForeign, add, object.getModel().isIsolatedElement()]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (add) {\n\t\t\t\t\tobjectCollection.addObject(object);\n\t\t\t\t}\n\t\t\t\tif (!isIsolated && (!isForeign || visitForeignObjects)) {\n\t\t\t\t\tfor (const complexeProperty of object.getModel().getComplexProperties()) {\n\t\t\t\t\t\tconst name = complexeProperty.getName();\n\t\t\t\t\t\tif (!object.issetValue(name)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (complexeProperty.isForeign()) {\n\t\t\t\t\t\t\tif (addForeignObjects || visitForeignObjects) {\n\t\t\t\t\t\t\t\tstack.push([object.getValue(name), complexeProperty.isForeign(), addForeignObjects, complexeProperty.isIsolated()]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstack.push([object.getValue(name), complexeProperty.isForeign(), true, complexeProperty.isIsolated()]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn objectCollection;\n\t}\n}\n\nexport default ObjectCollectionBuilder;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ObjectCollection from 'Logic/Object/Collection/ObjectCollection';\nimport ObjectCollectionBuilder from 'Logic/Object/Collection/ObjectCollectionBuilder';\n\nclass ObjectCollectionInterfacer {\n\n\t/**\n\t *\n\t * @type ObjectCollection\n\t */\n\t#startObjectCollection;\n\n\t/**\n\t *\n\t * @type ObjectCollection\n\t */\n\t#newObjectCollection;\n\n\t/**\n\t *\n\t * @type ObjectCollection\n\t */\n\t#newForeignObjectCollection;\n\n\t/**\n\t *\n\t * @param {AbstractComhonObject} object if specified, populate start object collection\n\t */\n\tconstructor(object = null) {\n\t\tthis.#startObjectCollection = object === null ? new ObjectCollection() : ObjectCollectionBuilder.build(object);\n\t\tthis.#newForeignObjectCollection = new ObjectCollection();\n\t\tthis.#newObjectCollection = new ObjectCollection();\n\t}\n\n\t/**\n\t *\n\t * @returns {ObjectCollection}\n\t */\n\tgetNewObjectCollection() {\n\t\treturn this.newObjectCollection;\n\t}\n\n\t/**\n\t *\n\t * @returns {ObjectCollection}\n\t */\n\tgetNewForeignObjectCollection() {\n\t\treturn this.newForeignObjectCollection;\n\t}\n\n\t/**\n\t * get comhon object with specified model name if exists in :\n\t * - new object collection\n\t * - new foreign object collection\n\t * - start object collection\n\t *\n\t * @param {string|integer} id\n\t * @param {Model} model\n\t * @param {boolean} inlcudeInheritance if true, search in extended model that share same id\n\t * @returns {ComhonObject|void} null if not found\n\t */\n\tgetObject(id, model, inlcudeInheritance = true) {\n\t\tlet obj;\n\t\tobj = this.#newObjectCollection.getObject(id, model, inlcudeInheritance);\n\t\tif (obj !== null) {\n\t\t\treturn obj;\n\t\t}\n\t\tobj = this.#newForeignObjectCollection.getObject(id, model, inlcudeInheritance);\n\t\tif (obj !== null) {\n\t\t\treturn obj;\n\t\t}\n\t\treturn this.#startObjectCollection.getObject(id, model, inlcudeInheritance);\n\t}\n\n\t/**\n\t * verify if comhon object with specified model name and id exists in new object collection\n\t *\n\t * @param {string|integer} id\n\t * @param {Model} model\n\t * @param {boolean} inlcudeInheritance if true, search in extended model that share same id\n\t * @returns {boolean} true if exists\n\t */\n\thasNewObject(id, model, inlcudeInheritance = true) {\n\t\treturn this.#newObjectCollection.hasObject(id, model, inlcudeInheritance);\n\t}\n\n\t/**\n\t * add comhon object (if not already added) in :\n\t * - new object collection if isForeign is false\n\t * - new foreign object collection if isForeign is true\n\t *\n\t * @param {ComhonObject} object\n\t * @param {boolean} isForeign if true, add object in new foreign object collection otherwise in new object collection\n\t * @param {boolean} throwException if true, throw exception if another instance object already added\n\t * @throws {ComhonException}\n\t * @returns {boolean} true if object is added\n\t */\n\taddObject(object, isForeign, throwException = true) {\n\t\tif (isForeign) {\n\t\t\treturn this.#newForeignObjectCollection.addObject(object, throwException);\n\t\t}\n\t\treturn this.#newObjectCollection.addObject(object, throwException);\n\t}\n\n\t/**\n\t * verify if comhon object with specified model name and id exists in start object collection\n\t *\n\t * @param {string|integer} id\n\t * @param {Model} model\n\t * @param {boolean} inlcudeInheritance if true, search in extended model that share same id\n\t * @returns {boolean} true if exists\n\t */\n\thasStartObject(id, model, inlcudeInheritance = true) {\n\t\treturn this.#startObjectCollection.hasObject(id, model, inlcudeInheritance);\n\t}\n\n\t/**\n\t * add comhon object (if not already added) start object collection\n\t *\n\t * @param {ComhonObject} object\n\t * @param {boolean} throwException it true, throw exception if another instance object already added\n\t * @throws {ComhonException}\n\t * @returns {boolean} true if object is added\n\t */\n\taddStartObject(object, throwException = true) {\n\t\treturn this.#startObjectCollection.addObject(object, throwException);\n\t}\n\n\t/**\n\t * get objects in newForeignObjectCollection that are not referenced in newObjectCollection.\n\t * if object has a main model, it is not taken in account.\n\t *\n\t * @returns  {ComhonObject[]}\n\t */\n\tgetNotReferencedObjects() {\n\t\tconst notReferencedObjects = [];\n\n\t\tfor (const modelNameAndObjects of this.#newForeignObjectCollection.getMap()) {\n\t\t\tfor (const [id, object] of modelNameAndObjects[1]) {\n\t\t\t\tif (!object.getModel().isMain() && !this.#newObjectCollection.hasObject(id, object.getModel())) {\n\t\t\t\t\tnotReferencedObjects.push(object);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn notReferencedObjects;\n\t}\n\n}\n\nexport default ObjectCollectionInterfacer;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\n\nclass InterfaceException extends ComhonException {\n\n\t/**\n\t * @type {ComhonException}\n\t */\n\t#originalException;\n\n\t/**\n\t * @type {Array.}\n\t */\n\t#stackProperties = [];\n\n\t/**\n\t *\n\t * @param {ComhonException} exception\n\t * @param {string} property\n\t */\n\tconstructor(exception, property = null) {\n\t\tlet stackProperties = [], originalException;\n\t\tif (exception instanceof InterfaceException) {\n\t\t\tstackProperties = exception.getStackProperties();\n\t\t\toriginalException = exception.getOriginalException();\n\t\t} else {\n\t\t\toriginalException = exception;\n\t\t}\n\t\tif (property !== null) {\n\t\t\tstackProperties.push(property);\n\t\t}\n\t\tconst stringifiedProperties = '.' + stackProperties.reverse().join('.');\n\t\tconst message = `Something goes wrong on '${stringifiedProperties}' value : \\n`\n\t\t\t+ originalException.getMessage();\n\t\tsuper(message, originalException.getCode());\n\n\t\tthis.#stackProperties = stackProperties;\n\t\tthis.#originalException = originalException;\n\t}\n\n\t/**\n\t * get InterfaceException instance with specified properies\n\t * stack must begin (index 0) by the last encountered property,\n\t * stack must end with the first encountered property\n\t *\n\t * @param {ComhonException} exception\n\t * @param {string[]} stackProperties\n\t */\n\tstatic getInstanceWithProperties(exception, stackProperties) {\n\t\tconst e = new InterfaceException(exception);\n\t\te.#stackProperties = stackProperties;\n\t\treturn e;\n\t}\n\n\t/**\n\t * get original thrown exception\n\t *\n\t * @returns {ComhonException}\n\t */\n\tgetOriginalException() {\n\t\treturn this.#originalException;\n\t}\n\n\t/**\n\t * get stack properties encountered during interface (export/import)\n\t *\n\t * stack begin (index 0) by the last encountered property,\n\t * stack end with the first encountered property\n\t *\n\t * @returns {Array.}\n\t */\n\tgetStackProperties() {\n\t\treturn this.#stackProperties;\n\t}\n\n\t/**\n\t * get stringified properties encountered during interface (export/import)\n\t *\n\t * @returns {string}\n\t */\n\tgetStringifiedProperties() {\n\t\treturn '.' + this.#stackProperties.reverse().join('.');\n\t}\n\n}\n\nexport default InterfaceException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * @abstract\n */\nclass ConstantException {\n\n\t// model exception\n\tstatic get ALREADY_USED_MODEL_NAME_EXCEPTION() {return 100;}\n\tstatic get NOT_DEFINED_MODEL_EXCEPTION()       {return 101;}\n\tstatic get UNEXPECTED_MODEL_EXCEPTION()        {return 102;}\n\tstatic get UNDEFINED_PROPERTY_EXCEPTION()      {return 103;}\n\tstatic get CAST_EXCEPTION()                    {return 104;}\n\tstatic get PROPERTY_VISIBILITY_EXCEPTION()     {return 105;}\n\tstatic get NO_ID_PROPERTY_EXCEPTION()          {return 106;}\n\tstatic get REQUESTABLE_PROPERTY_EXCEPTION()    {return 107;}\n\n\t// object/value exception\n\tstatic get NOT_SATISFIED_RESTRICTION_EXCEPTION() {return 200;}\n\tstatic get ENUMERATION_EXCEPTION()               {return 201;}\n\tstatic get UNEXPECTED_VALUE_TYPE_EXCEPTION()     {return 202;}\n\tstatic get ABSTRACT_OBJECT_EXCEPTION()           {return 203;}\n\tstatic get MISSING_REQUIRED_VALUE_EXCEPTION()    {return 204;}\n\tstatic get MISSING_ID_FOREIGN_VALUE_EXCEPTION()  {return 205;}\n\tstatic get INVALID_COMPOSITE_ID_EXCEPTION()      {return 206;}\n\tstatic get CONFLICT_VALUES_EXCEPTION()           {return 207;}\n\tstatic get DEPENDS_VALUES_EXCEPTION()            {return 208;}\n\n\t// interfacing exception\n\tstatic get DUPLICATED_ID_EXCEPTION()          {return 300;}\n\tstatic get NOT_REFERENCED_VALUE_EXCEPTION()   {return 301;}\n\tstatic get CONTEXT_ID_EXCEPTION()             {return 302;}\n\tstatic get OBJECT_LOOP_EXCEPTION()            {return 303;}\n\tstatic get ABSTRACT_OBJECT_EXPORT_EXCEPTION() {return 304;}\n\n\t// restriction exception\n\tstatic get MALFORMED_INTERVAL_EXCEPTION()           {return 400;}\n\tstatic get NOT_SUPPORTED_MODEL_INTERVAL_EXCEPTION() {return 401;}\n\tstatic get NOT_EXISTING_REGEX_EXCEPTION()           {return 402;}\n\n\t// manifest exception\n\tstatic get MANIFEST_EXCEPTION()      {return 500;}\n\tstatic get RESERVED_WORD_EXCEPTION() {return 501;}\n\n\t// request exception\n\tstatic get MALFORMED_REQUEST_EXCEPTION()                  {return 700;}\n\tstatic get LITERAL_NOT_FOUND_EXCEPTION()                  {return 701;}\n\tstatic get INCOMPATIBLE_LITERAL_SERIALIZATION_EXCEPTION() {return 702;}\n\tstatic get LITERAL_PROPERTY_AGGREGATION_EXCEPTION()       {return 703;}\n\tstatic get MALFORMED_LITERAL_EXCEPTION()                  {return 704;}\n\tstatic get UNRESOLVABLE_LITERAL_EXCEPTION()               {return 705;}\n\tstatic get NOT_LINKABLE_LITERAL_EXCEPTION()               {return 706;}\n\tstatic get NOT_ALLOWED_REQUEST_EXCEPTION()                {return 707;}\n\tstatic get MULTIPLE_PROPERTY_LITERAL_EXCEPTION()          {return 708;}\n\tstatic get NOT_ALLOWED_LITERAL_EXCEPTION()                {return 709;}\n\n\t// serialization exception\n\tstatic get SERIALIZATION_EXCEPTION()          {return 800;}\n\tstatic get NOT_NULL_CONSTRAINT_EXCEPTION()    {return 801;}\n\tstatic get FOREIGN_CONSTRAINT_EXCEPTION()     {return 802;}\n\tstatic get UNIQUE_CONSTRAINT_EXCEPTION()      {return 803;}\n\tstatic get MANIFEST_SERIALIZATION_EXCEPTION() {return 804;}\n\tstatic get MISSING_NOT_NULL_EXCEPTION()       {return 805;}\n\n}\n\nexport default ConstantException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass NotReferencedValueException extends ComhonException {\n\n\t/**\n\t *\n\t * @param {ComhonObject} object\n\t */\n\tconstructor(object) {\n\t\tconst message = `foreign value with model '${object.getModel().getName()}' and id '${object.getId()}' not referenced in interfaced object`;\n\t\tsuper(message, ConstantException.NOT_REFERENCED_VALUE_EXCEPTION);\n\t}\n\n}\n\nexport default NotReferencedValueException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport InterfaceException from 'Logic/Exception/Interfacer/InterfaceException';\n\nclass ExportException extends InterfaceException {\n\n}\n\nexport default ExportException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\n\nclass ArgumentException extends ComhonException {\n\n\t/**\n\t *\n\t * @param {*} argument\n\t * @param {string|Array.} expected\n\t * @param {integer} index start from 1\n\t * @param {Array.} enumeration specify it only if argument doesn't belong to an enumeration\n\t */\n\tconstructor(argument, expected, index, enumeration = null) {\n\t\tlet type;\n\t\tif (argument === null) {\n\t\t\ttype = null;\n\t\t} else if (typeof argument === 'object') {\n\t\t\t// cannot use (argument instanceof AbstractComhonObject)\n\t\t\t// because ObjectInterfacer import fails\n\t\t\t// certainly due to a kind of import loop\n\t\t\tif (argument.getClassName() === 'ComhonObject' || argument.getClassName() === 'ComhonArray') {\n\t\t\t\ttype = argument.getComhonClass();\n\t\t\t} else {\n\t\t\t\ttype = argument.constructor.name;\n\t\t\t}\n\t\t} else {\n\t\t\ttype = typeof argument;\n\t\t}\n\n\t\texpected = Array.isArray(expected)\n\t\t\t? 'be one of ' + JSON.stringify(expected)\n\t\t\t: `\"be a ${expected}` + (Array.isArray(enumeration) ? (\" that belong to \" + JSON.stringify(enumeration)) : '');\n\n\t\tconst value = Array.isArray(enumeration) && ((typeof argument === 'string') || (typeof argument === 'number')) ? ` '${argument}' ` : ' ' ;\n\n\t\tconst message = `Argument at index ${index} `\n\t\t\t+ `must ${expected}, ${type}${value}given.`;\n\n\t\tsuper(message);\n\t}\n\n}\n\nexport default ArgumentException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass UnexpectedValueTypeException extends ComhonException {\n\n\t/**\n\t * @type {string}\n\t */\n\t#expectedType;\n\n\t/**\n\t * @param {*} value\n\t * @param {string} expectedType\n\t * @param {string} property\n\t * @param {string} builtMessage override message exception\n\t * @param {integer} code override code exception\n\t */\n\tconstructor(value, expectedType, property = null, builtMessage = null, code = null) {\n\t\tlet type;\n\t\tif (value === null) {\n\t\t\ttype = 'null';\n\t\t} else if (typeof value === 'object') {\n\t\t\t// cannot use (value instanceof AbstractComhonObject)\n\t\t\t// because ObjectInterfacer import fails\n\t\t\t// certainly due to a kind of import loop\n\t\t\tif (value.getClassName() === 'ComhonObject' || value.getClassName() === 'ComhonArray') {\n\t\t\t\ttype = value.getComhonClass();\n\t\t\t} else {\n\t\t\t\ttype = value.constructor.name;\n\t\t\t}\n\t\t} else {\n\t\t\ttype = typeof value;\n\t\t}\n\t\tconst stringValue = (value !== null && typeof value === 'object') || Array.isArray(value)\n\t\t\t? ' '\n\t\t\t: \" '\" + ((typeof value === 'boolean') ? (value ? 'true' : 'false') : value) + \"' \";\n\n\t\tconst stringProperty = (property === null) ? ' ' : ` of property '${property}' `;\n\t\tconst message = `value${stringProperty}must be a ${expectedType}, ${type}${stringValue}given`;\n\n\t\tsuper(builtMessage ?? message, code ?? ConstantException.UNEXPECTED_VALUE_TYPE_EXCEPTION);\n\t\tthis.#expectedType = expectedType;\n\t}\n\n\t/**\n\t * get expected type\n\t *\n\t * @returns {string}\n\t */\n\tgetExpectedType() {\n\t\treturn this.#expectedType;\n\t}\n\n}\n\nexport default UnexpectedValueTypeException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass EnumerationException extends ComhonException {\n\n\t/**\n\t * @param {*} value\n\t * @param {Array.} enumeration\n\t * @param {string} property\n\t */\n\tconstructor(value, enumeration, property) {\n\t\tconst message = `value '${value}' of property '${property}' doesn't belong to enumeration '` + JSON.stringify(enumeration) + \"'\";\n\t\tsuper(message, ConstantException.ENUMERATION_EXCEPTION);\n\t}\n\n}\n\nexport default EnumerationException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport InterfaceException from 'Logic/Exception/Interfacer/InterfaceException';\n\nclass ImportException extends InterfaceException {\n\n}\n\nexport default ImportException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ArgumentException from 'Logic/Exception/ArgumentException';\nimport UnexpectedValueTypeException from 'Logic/Exception/Value/UnexpectedValueTypeException';\nimport EnumerationException from 'Logic/Exception/Value/EnumerationException';\nimport ImportException from 'Logic/Exception/Interfacer/ImportException';\nimport ExportException from 'Logic/Exception/Interfacer/ExportException';\n\nconst merge = 1;\nconst overwrite = 2;\nconst allowedMergeType = [\n\tmerge,\n\toverwrite\n];\nObject.freeze(allowedMergeType);\n\n/**\n * @abstract\n */\nclass Interfacer {\n\n\t/**\n\t * @type {string} preference name that define private context\n\t *     private properties are interfaced only in private context\n\t */\n\tstatic get PRIVATE_CONTEXT() {return 'privateContext';}\n\n\t/**\n\t * @type {string} preference name that define if only updated value will be exported\n\t */\n\tstatic get ONLY_UPDATED_VALUES() {return 'updatedValueOnly';}\n\n\t/**\n\t * @type {string} preference name that define filter for exported properties\n\t */\n\tstatic get PROPERTIES_FILTER() {return 'propertiesFilter';}\n\n\t/**\n\t * @type {string} preference name that define if complexes values have to be flatten\n\t */\n\tstatic get FLATTEN_VALUES() {return 'flattenValues';}\n\n\t/**\n\t * @type {string} preference name that define if simple values are string\n\t *     available only during import for scalar interfacers\n\t */\n\tstatic get STRINGIFIED_VALUES() {return 'stringifiedValues';}\n\n\t/**\n\t * @type {string} preference name that define if imported values have to be flagged has updated\n\t */\n\tstatic get FLAG_VALUES_AS_UPDATED() {return 'flagValuesAsUpdated';}\n\n\t/**\n\t * @type {string} preference name that define if object created during import have to be flagged as loaded\n\t */\n\tstatic get FLAG_OBJECT_AS_LOADED() {return 'flagObjectAsLoaded';}\n\n\t/**\n\t * @type {string} preference name that define if interfacer must verify if foreign values are referenced\n\t * (i.e. if there is an existing value not foreign with same id) in interfaced object.\n\t */\n\tstatic get VERIFY_REFERENCES() {return 'verifyReferences';}\n\n\t/**\n\t * @type {string} preference name that define if interfacer must validate root object to interface\n\t *\n\t * validation concern required properties, conflicts, dependencies and array size.\n\t */\n\tstatic get VALIDATE() {return 'validate';}\n\n\t/**\n\t * @type {string} preference name that define merge type during import\n\t */\n\tstatic get MERGE_TYPE() {return 'mergeType';}\n\n\t/** @type {integer} */\n\tstatic get MERGE() {return merge;}\n\n\t/** @type {integer} */\n\tstatic get OVERWRITE() {return overwrite;}\n\n\t/** @type {string} */\n\tstatic get INHERITANCE_KEY() {return 'inheritance-';}\n\n\t/** @type {string} */\n\tstatic get ASSOCIATIVE_KEY() {return 'key-';}\n\n\t/** @type {string} */\n\tstatic get COMPLEX_ID_KEY() {return 'id';}\n\n\t/** @type {string[]} */\n\tstatic get ALLOWED_MERGE_TYPE() {return allowedMergeType;}\n\n\t/** @type {boolean} */\n\t#privateContext = false;\n\n\t/** @type {boolean} */\n\t#updatedValueOnly = false;\n\n\t/** @type {string[]} */\n\t#propertiesFilter = [];\n\n\t/** @type {boolean} */\n\t#flattenValues = false;\n\n\t/** @type {boolean} */\n\t#stringifiedValues = false;\n\n\t/** @type {integer} */\n\t#mergeType = Interfacer.MERGE;\n\n\t/** @type {boolean} */\n\t#flagValuesAsUpdated = true;\n\n\t/** @type {boolean} */\n\t#flagObjectAsLoaded = true;\n\n\t/** @type {boolean} */\n\t#verifyReferences = true;\n\n\t/** @type {boolean} */\n\t#validate = true;\n\n\tconstructor() {\n\t\tif (this.constructor === Interfacer) {\n\t\t\tthrow new Error('can\\'t instanciate abstract class Interfacer');\n\t\t}\n\t}\n\n\t/**\n\t * verify if private properties have to be interfaced\n\t *\n\t * @returns {boolean}\n\t */\n\tisPrivateContext() {\n\t\treturn this.#privateContext;\n\t}\n\n\t/**\n\t * define if private properties have to be interfaced\n\t *\n\t * @param {boolean} boolean\n\t */\n\tsetPrivateContext(boolean) {\n\t\tthis.#privateContext = boolean;\n\t}\n\n\t/**\n\t * verify if has to export only updated values\n\t *\n\t * @returns {boolean}\n\t */\n\thasToExportOnlyUpdatedValues() {\n\t\treturn this.#updatedValueOnly;\n\t}\n\n\t/**\n\t * define if has to export only updated values\n\t *\n\t * @param {boolean} boolean\n\t */\n\tsetExportOnlyUpdatedValues(boolean) {\n\t\tthis.#updatedValueOnly = boolean;\n\t}\n\n\t/**\n\t * verify if has properties filter\n\t *\n\t * @returns {boolean} boolean\n\t */\n\thasPropertiesFilter() {\n\t\treturn this.#propertiesFilter.length > 0;\n\t}\n\n\t/**\n\t * get properties filter\n\t *\n\t * @returns {array|void} return null if there is no filter\n\t */\n\tgetPropertiesFilter() {\n\t\treturn this.hasPropertiesFilter()\n\t\t\t? this.#propertiesFilter\n\t\t\t: null;\n\t}\n\n\t/**\n\t * reset properties filter\n\t */\n\tresetPropertiesFilter() {\n\t\tthis.#propertiesFilter = [];\n\t}\n\n\t/**\n\t * set properties filter for specified model\n\t *\n\t * @param {string[]} propertiesNames\n\t */\n\tsetPropertiesFilter(propertiesNames) {\n\t\tthis.#propertiesFilter = propertiesNames;\n\t}\n\n\t/**\n\t * define if complex values have to be flatten\n\t *\n\t * @param {boolean} boolean\n\t */\n\tsetFlattenValues(boolean) {\n\t\tthis.#flattenValues = boolean;\n\t}\n\n\t/**\n\t * verify if complex values have to be flatten\n\t *\n\t * @returns {boolean}\n\t */\n\thasToFlattenValues() {\n\t\treturn this.#flattenValues;\n\t}\n\n\t/**\n\t * define if interfaced simple values are stringified and must be casted during import\n\t *\n\t * @param {boolean} boolean\n\t */\n\tsetStringifiedValues(boolean) {\n\t\tthis.#stringifiedValues = boolean;\n\t}\n\n\t/**\n\t * verify if interfaced simple values are stringified and must be casted during import\n\t */\n\tisStringifiedValues() {\n\t\treturn this.#stringifiedValues;\n\t}\n\n\t/**\n\t * define if imported values have to be flagged has updated\n\t *\n\t * @param {boolean} boolean\n\t */\n\tsetFlagValuesAsUpdated(boolean) {\n\t\tthis.#flagValuesAsUpdated = boolean;\n\t}\n\n\t/**\n\t * verify if imported values have to be flagged has updated\n\t *\n\t * @returns {boolean}\n\t */\n\thasToFlagValuesAsUpdated() {\n\t\treturn this.#flagValuesAsUpdated;\n\t}\n\n\t/**\n\t * define if object created during import have to be flagged as loaded\n\t *\n\t * @param {boolean} boolean\n\t */\n\tsetFlagObjectAsLoaded(boolean) {\n\t\tthis.#flagObjectAsLoaded = boolean;\n\t}\n\n\t/**\n\t * verify if object created during import have to be flagged as loaded\n\t *\n\t * @returns {boolean}\n\t */\n\thasToFlagObjectAsLoaded() {\n\t\treturn this.#flagObjectAsLoaded;\n\t}\n\n\t/**\n\t * define if interfacing must verify if foreign values are referenced\n\t * (i.e. if there is an existing value not foreign with same id) in interfaced object.\n\t * if true given, when interfacing foreign value without reference, an exception is thrown.\n\t * values with main model are not concerned.\n\t *\n\t * @param {boolean} boolean\n\t */\n\tsetVerifyReferences(boolean) {\n\t\tthis.#verifyReferences = boolean;\n\t}\n\n\t/**\n\t * verify if interfacing must verify if foreign values are referenced\n\t * (i.e. if there is an existing value not foreign with same id) in interfaced object.\n\t *\n\t * @returns {boolean}\n\t */\n\thasToVerifyReferences() {\n\t\treturn this.#verifyReferences;\n\t}\n\n\t/**\n\t * define if interfacing must validate root object to interface.\n\t * if true given, when interfacing object not valid, an exception is thrown.\n\t *\n\t * validation concern required properties, conflicts, dependencies and array size.\n\t *\n\t * @param {boolean} boolean\n\t */\n\tsetValidate(boolean) {\n\t\tthis.#validate = boolean;\n\t}\n\n\t/**\n\t * verify if interfacing must validate root object to interface.\n\t *\n\t * validation concern required properties, conflicts, dependencies and array size.\n\t *\n\t * @returns {boolean}\n\t */\n\tmustValidate() {\n\t\treturn this.#validate;\n\t}\n\n\t/**\n\t * define merge type to apply during import\n\t *\n\t * @param {integer} mergeType possible values are [Interfacer.MERGE, Interfacer.OVERWRITE]\n\t */\n\tsetMergeType(mergeType) {\n\t\tif (!Interfacer.ALLOWED_MERGE_TYPE.indexOf(mergeType) === -1) {\n\t\t\tthrow new ArgumentException(mergeType, Interfacer.ALLOWED_MERGE_TYPE, 1);\n\t\t}\n\t\tthis.#mergeType = mergeType;\n\t}\n\n\t/**\n\t * get merge type to apply during import\n\t *\n\t * @returns {integer}\n\t */\n\tgetMergeType() {\n\t\treturn this.#mergeType;\n\t}\n\n\t/**\n\t * get media type associated to exported format\n\t *\n\t * @abstract\n\t * @returns {string}\n\t */\n\tgetMediaType() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get value in node with property name\n\t *\n\t * @abstract\n\t * @param {*} node\n\t * @param {string} name\n\t * @param {boolean} asNode\n\t * @returns {*} null if doesn't exist\n\t */\n\tgetValue(node, name, asNode = false) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if node contain value with property name\n\t *\n\t * @abstract\n\t * @param {*} node\n\t * @param {string} name\n\t * @param {boolean} asNode\n\t * @returns {boolean}\n\t */\n\thasValue(node, name, asNode = false) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if value is null\n\t *\n\t * @abstract\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tisNullValue(value) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if value is expected node type\n\t *\n\t * @abstract\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tisNodeValue(value) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if value is an array node\n\t *\n\t * @abstract\n\t * @param {*} value\n\t * @param {boolean} isAssociative\n\t * @returns {boolean}\n\t */\n\tisArrayNodeValue(value, isAssociative) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if value is a complex id (with inheritance key) or a simple value\n\t *\n\t * @abstract\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tisComplexInterfacedId(value) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if value is a flatten complex id (with inheritance key)\n\t *\n\t * @abstract\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tisFlattenComplexInterfacedId(value) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * set value in node with property name\n\t *\n\t * @abstract\n\t * @param {*} node\n\t * @param {*} value\n\t * @param {string} name\n\t * @param {boolean} asNode\n\t */\n\tsetValue(node, value, name = null, asNode = false) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * unset value in node with property name\n\t *\n\t * @abstract\n\t * @param {*} node\n\t * @param {string} name\n\t * @param {boolean} asNode\n\t */\n\tunsetValue(node, name, asNode = false) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * add value to node\n\t *\n\t * @abstract\n\t * @param {*} node\n\t * @param {*} value\n\t * @param {string} name\n\t */\n\taddValue(node, value, name = null) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * add value to node\n\t *\n\t * @abstract\n\t * @param {*} node\n\t * @param {*} value\n\t * @param {string} key\n\t * @param {string} name\n\t */\n\taddAssociativeValue(node, value, key, name = null) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * create node\n\t *\n\t * @abstract\n\t * @param {string} name\n\t * @returns {*}\n\t */\n\tcreateNode(name = null) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get node classes\n\t *\n\t * @abstract\n\t * @returns {string[]}\n\t */\n\tgetNodeClasses() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * create array node\n\t *\n\t * @abstract\n\t * @param {string} name\n\t * @returns {*}\n\t */\n\tcreateArrayNode(name = null) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get array node classes\n\t *\n\t * @abstract\n\t * @returns {string[]}\n\t */\n\tgetArrayNodeClasses() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * transform given node to string\n\t *\n\t * @abstract\n\t * @param {*} node\n\t * @param {boolean} prettyPrint\n\t * @returns {string}\n\t */\n\ttoString(node, prettyPrint = false) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * transform given string to node\n\t *\n\t * @abstract\n\t * @param {*} string\n\t * @returns {*}\n\t */\n\tfromString(string) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * flatten value (transform object/array to string)\n\t *\n\t * @abstract\n\t * @param {*} node\n\t * @param {string} name\n\t */\n\tflattenNode(node, name) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * unflatten value (transform string to object/array)\n\t *\n\t * @abstract\n\t * @param {array} node\n\t * @param {string} name\n\t */\n\tunFlattenNode(node, name) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * replace value in property name by value (fail if property name doesn't exist)\n\t *\n\t * @abstract\n\t * @param {*} node\n\t * @param {string} name\n\t * @param {*} value value to place in key name\n\t */\n\treplaceValue(node, name, value) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if interfaced object has typed scalar values (int, float, string...).\n\t *\n\t * @returns {boolean}\n\t */\n\thasScalarTypedValues() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * export given comhon object to interfaced object\n\t *\n\t * @param {AbstractComhonObject} object\n\t * @param {array} preferences\n\t * @returns {*}\n\t */\n\texport(object, preferences = {}) {\n\t\tthis.setPreferences(preferences);\n\t\ttry {\n\t\t\treturn object.export(this);\n\t\t} catch (e) {\n\t\t\tthrow new ExportException(e);\n\t\t}\n\t}\n\n\t/**\n\t * import given node and construct comhon object\n\t *\n\t * @async\n\t * @param {*} node\n\t * @param {Model|ModelArray} model\n\t * @param {array} preferences\n\t * @returns {Promise<ComhonObject|ComhonArray>}\n\t */\n\tasync import(node, model, preferences = {}) {\n\t\tthis.setPreferences(preferences);\n\t\ttry {\n\t\t\treturn model.import(node, this);\n\t\t} catch (e) {\n\t\t\tthrow new ImportException(e);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {*} node\n\t */\n\tsetPreferences(preferences) {\n\t\tif (typeof preferences !== 'object') {\n\t\t\tthrow new Error('preferences must be null or an object');\n\t\t}\n\t\t// private\n\t\tif (Interfacer.PRIVATE_CONTEXT in preferences) {\n\t\t\tif (typeof preferences[Interfacer.PRIVATE_CONTEXT] !== 'boolean') {\n\t\t\t\tthrow new UnexpectedValueTypeException(preferences[Interfacer.PRIVATE_CONTEXT], 'boolean', Interfacer.PRIVATE_CONTEXT);\n\t\t\t}\n\t\t\tthis.setPrivateContext(preferences[Interfacer.PRIVATE_CONTEXT]);\n\t\t}\n\n\t\t// only updated values\n\t\tif (Interfacer.ONLY_UPDATED_VALUES in preferences) {\n\t\t\tif (typeof preferences[Interfacer.ONLY_UPDATED_VALUES] !== 'boolean') {\n\t\t\t\tthrow new UnexpectedValueTypeException(preferences[Interfacer.ONLY_UPDATED_VALUES], 'boolean', Interfacer.ONLY_UPDATED_VALUES);\n\t\t\t}\n\t\t\tthis.setExportOnlyUpdatedValues(preferences[Interfacer.ONLY_UPDATED_VALUES]);\n\t\t}\n\n\t\t// preoperties filter\n\t\tif (Interfacer.PROPERTIES_FILTER in preferences) {\n\t\t\tif (!Array.isArray(preferences[Interfacer.PROPERTIES_FILTER])) {\n\t\t\t\tthrow new UnexpectedValueTypeException(preferences[Interfacer.PROPERTIES_FILTER], 'array', Interfacer.PROPERTIES_FILTER);\n\t\t\t}\n\t\t\tthis.setPropertiesFilter(Interfacer.PROPERTIES_FILTER);\n\t\t}\n\n\t\t// flatten values\n\t\tif (Interfacer.FLATTEN_VALUES in preferences) {\n\t\t\tif (typeof preferences[Interfacer.FLATTEN_VALUES] !== 'boolean') {\n\t\t\t\tthrow new UnexpectedValueTypeException(preferences[Interfacer.FLATTEN_VALUES], 'boolean', Interfacer.FLATTEN_VALUES);\n\t\t\t}\n\t\t\tthis.setFlattenValues(preferences[Interfacer.FLATTEN_VALUES]);\n\t\t}\n\n\t\t// stringified values\n\t\tif (Interfacer.STRINGIFIED_VALUES in preferences) {\n\t\t\tif (typeof preferences[Interfacer.STRINGIFIED_VALUES] !== 'boolean') {\n\t\t\t\tthrow new UnexpectedValueTypeException(preferences[Interfacer.STRINGIFIED_VALUES], 'boolean', Interfacer.FLATTEN_VALUES);\n\t\t\t}\n\t\t\tthis.setFlattenValues(preferences[Interfacer.STRINGIFIED_VALUES]);\n\t\t}\n\n\t\t// flag values as updated\n\t\tif (Interfacer.FLAG_VALUES_AS_UPDATED in preferences) {\n\t\t\tif (typeof preferences[Interfacer.FLAG_VALUES_AS_UPDATED] !== 'boolean') {\n\t\t\t\tthrow new UnexpectedValueTypeException(preferences[Interfacer.FLAG_VALUES_AS_UPDATED], 'boolean', Interfacer.FLAG_VALUES_AS_UPDATED);\n\t\t\t}\n\t\t\tthis.setFlagValuesAsUpdated(preferences[Interfacer.FLAG_VALUES_AS_UPDATED]);\n\t\t}\n\n\t\t// flag ComhonObject as updated\n\t\tif (Interfacer.FLAG_OBJECT_AS_LOADED in preferences) {\n\t\t\tif (typeof preferences[Interfacer.FLAG_OBJECT_AS_LOADED] !== 'boolean') {\n\t\t\t\tthrow new UnexpectedValueTypeException(preferences[Interfacer.FLAG_OBJECT_AS_LOADED], 'boolean', Interfacer.FLAG_OBJECT_AS_LOADED);\n\t\t\t}\n\t\t\tthis.setFlagObjectAsLoaded(preferences[Interfacer.FLAG_OBJECT_AS_LOADED]);\n\t\t}\n\n\t\t// verify foreign values references\n\t\tif (Interfacer.VERIFY_REFERENCES in preferences) {\n\t\t\tif (typeof preferences[Interfacer.VERIFY_REFERENCES] !== 'boolean') {\n\t\t\t\tthrow new UnexpectedValueTypeException(preferences[Interfacer.VERIFY_REFERENCES], 'boolean', Interfacer.VERIFY_REFERENCES);\n\t\t\t}\n\t\t\tthis.setVerifyReferences(preferences[Interfacer.VERIFY_REFERENCES]);\n\t\t}\n\n\t\t// validate root object\n\t\tif (Interfacer.VALIDATE in preferences) {\n\t\t\tif (typeof preferences[Interfacer.VALIDATE] !== 'boolean') {\n\t\t\t\tthrow new UnexpectedValueTypeException(preferences[Interfacer.VALIDATE], 'boolean', Interfacer.VALIDATE);\n\t\t\t}\n\t\t\tthis.setValidate(preferences[Interfacer.VALIDATE]);\n\t\t}\n\n\t\t// merge type\n\t\tif (Interfacer.MERGE_TYPE in preferences) {\n\t\t\tif (Interfacer.ALLOWED_MERGE_TYPE.indexOf(preferences[Interfacer.MERGE_TYPE]) === -1) {\n\t\t\t\tthrow new EnumerationException(preferences[Interfacer.MERGE_TYPE], Interfacer.ALLOWED_MERGE_TYPE, Interfacer.MERGE_TYPE);\n\t\t\t}\n\t\t\tthis.setMergeType(preferences[Interfacer.MERGE_TYPE]);\n\t\t}\n\t}\n\n}\n\nexport default Interfacer;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Interfacer from 'Logic/Interfacer/Interfacer';\nimport ArgumentException from 'Logic/Exception/ArgumentException';\nimport ComhonException from 'Logic/Exception/ComhonException';\n// import xmlFormat from 'xml-formatter'; 1 vulnerabilty when install this pakage\n\nconst NS_XSI = 'xmlns:xsi';\nconst NS_NULL_VALUE = 'xsi:nil';\nconst NULL_VALUE = 'nil';\nconst NIL_URI = 'http://www.w3.org/2001/XMLSchema-instance';\n\nclass XMLInterfacer extends Interfacer {\n\n\t/** @type {DOMDocument} */\n\t#domDocument;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.#domDocument = document.implementation.createDocument(null, null);\n\t\tthis.#domDocument.preserveWhiteSpace = false;\n\t}\n\n\t/**\n\t * get child node with name name (if several children have same name, the first one is returned).\n\t *\n\t * @private\n\t * @param {Element} node\n\t * @param {string} name\n\t * @returns {Element|void} null if doesn't exist\n\t */\n\t_getChildNode(node, name) {\n\t\tfor (const child of node.childNodes) {\n\t\t\tif (child.nodeName === name) {\n\t\t\t\treturn child;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * add attribute namespace URI for null values.\n\t *\n\t * @param {Element} node\n\t */\n\taddNullNamespaceURI(node) {\n\t\tif (node.hasAttribute(NS_XSI)) {\n      return;\n    }\n    node.setAttributeNode(node.ownerDocument.createAttributeNS(NIL_URI, NS_NULL_VALUE));\n\t}\n\n\t/**\n\t * add attribute namespace xsi:nil on given node\n\t *\n\t * @param {Element} node\n\t */\n\tsetNodeAsNull(node) {\n\t\tnode.setAttributeNS(NIL_URI, NULL_VALUE, 'true');\n\t}\n\n\t/**\n\t * Dumps the internal XML tree back into a string\n\t *\n\t * @private\n\t * @param {Element} node\n\t * @param {boolean} prettyPrint\n\t * @returns {false|string}\n\t */\n\t_saveXML(node, prettyPrint) {\n\t\tconst serializer = new XMLSerializer();\n\t\t// return prettyPrint ? xmlFormat(serializer.serializeToString(node)) : serializer.serializeToString(node);\n\t\treturn serializer.serializeToString(node);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Interfacer}::getMediaType()\n\t */\n\tgetMediaType() {\n\t\treturn 'application/xml';\n\t}\n\n\t/**\n\t * get value in node with attribute or node name according asNode\n\t *\n\t * @param {Element} node\n\t * @param {string} name\n\t * @param {boolean} asNode if true search value in nodes otherwise search in attributes\n\t * @returns {Element|string|void} null if doesn't exist\n\t */\n\tgetValue(node, name, asNode = false) {\n\t\tif (asNode) {\n\t\t\tlet childNode = this._getChildNode(node, name);\n\t\t\tif ((childNode !== null) && this.isNodeNull(childNode)) {\n\t\t\t\tchildNode = null;\n\t\t\t}\n\t\t\treturn childNode;\n\t\t} else if (node.hasAttribute(name)) {\n\t\t\treturn node.getAttribute(name);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * verify if node is null (i.e. if has attribute xsi:nil=\"true\")\n\t *\n\t * @param {Element} node\n\t * @returns {boolean}\n\t */\n\tisNodeNull(node) {\n\t\treturn node.hasAttributeNS(NIL_URI, NULL_VALUE);\n\t}\n\n\t/**\n\t * verify if node contain value with attribute or node name according asNode\n\t *\n\t * @param {Element} node\n\t * @param {string} name\n\t * @param {boolean} asNode if true search value in nodes otherwise search in attributes\n\t * @returns {boolean}\n\t */\n\thasValue(node, name, asNode = false) {\n\t\treturn asNode ?\n\t\t\t(this._getChildNode(node, name) !== null)\n\t\t\t: node.hasAttribute(name);\n\t}\n\n\t/**\n\t * verify if value is null\n\t *\n\t * values considered as null are :\n\t *     - null\n\t *     - Element with attribute xsi:nil=\"true\"\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tisNullValue(value) {\n\t\treturn (value instanceof Element) ? this.isNodeNull(value) : (value === null);\n\t}\n\n\t/**\n\t * transform given Element to array, each child Element become an array element\n\t *\n\t * @param {Element} node\n\t * @returns {Element[]}\n\t */\n\tnodeToArray(node) {\n\t\tif (!(node instanceof Element)) {\n\t\t\tthrow new ArgumentException(node, 'Element', 1);\n\t\t}\n\t\tconst array = [];\n\t\tfor (const domNode of node.childNodes) {\n\t\t\tif (domNode instanceof Element) {\n\t\t\t\t\tarray.push(domNode);\n\t\t\t}\n\t\t}\n\t\treturn array;\n\t}\n\n\t/**\n\t * transform given Element to Object, each child Element become an object value.\n\t * each property name of created object is the name of child Element.\n\t *\n\t * @param {Element} node\n\t * @returns {Object}\n\t */\n\tnodeToObject(node) {\n\t\tif (!(node instanceof Element)) {\n\t\t\tthrow new ArgumentException(node, 'Element', 1);\n\t\t}\n\t\tconst object = {};\n\t\tfor (const domNode of node.childNodes) {\n\t\t\tif (domNode instanceof Element) {\n\t\t\t\tif (!domNode.hasAttribute(Interfacer.ASSOCIATIVE_KEY)) {\n\t\t\t\t\t\tthrow new ArgumentException(node, 'Element', 1);\n\t\t\t\t}\n\t\t\t\tif (domNode.getAttribute(Interfacer.ASSOCIATIVE_KEY) in object) {\n\t\t\t\t\tthrow new ComhonException(`duplicated key '${domNode.getAttribute(Interfacer.ASSOCIATIVE_KEY)}'`);\n\t\t\t\t}\n\t\t\t\tobject[domNode.getAttribute(Interfacer.ASSOCIATIVE_KEY)] = domNode;\n\t\t\t}\n\t\t}\n\t\treturn object;\n\t}\n\n\t/**\n\t * get child nodes names that are null\n\t *\n\t * @param {Element} node\n\t * @returns {string[]}\n\t */\n\tgetNullNodes(node) {\n\t\tconst array = [];\n\t\tfor (const domNode of node.childNodes) {\n\t\t\tif (domNode instanceof Element && this.isNodeNull(domNode)) {\n\t\t\t\tarray.push(domNode.nodeName);\n\t\t\t}\n\t\t}\n\t\treturn array;\n\t}\n\n\t/**\n\t * verify if value is a DOM Element\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tisNodeValue(value) {\n\t\treturn (value instanceof Element);\n\t}\n\n\t/**\n\t * verify if value is a DOM Element\n\t *\n\t * @param {*} value\n\t * @param {boolean} isAssociative\n\t * @returns {boolean}\n\t */\n\tisArrayNodeValue(value, isAssociative) {\n\t\treturn (value instanceof Element);\n\t}\n\n\t/**\n\t * verify if value is a complex id (with inheritance key) or a simple value\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tisComplexInterfacedId(value) {\n\t\treturn (value instanceof Element) && value.hasAttribute(Interfacer.COMPLEX_ID_KEY);\n\t}\n\n\t/**\n\t * verify if value is a flatten complex id (with inheritance key)\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tisFlattenComplexInterfacedId(value) {\n\t\treturn this.isComplexInterfacedId(value);\n\t}\n\n\t/**\n\t * Set value in node with attribute or node name according asNode.\n\t *\n\t * Warning! if value is a DomNode and doesn't belong to same DomDocument than node,\n\t * value is copied and the copy is set on node.\n\t * So modify value later will not modify set value.\n\t *\n\t * Warning! if you set a null value as node,\n\t * parent node (direct or not) must be in null namespace (see XMLInterfacer.addNullNamespaceURI).\n\t * otherwise when you will stringify xml, null value will be invalid.\n\t *\n\t * @param {Element} node\n\t * @param {*} value if scalar value, set attribute. else if DOM Element, append child\n\t * @param {string} name used only if value if scalar value\n\t * @param {boolean} asNode if true add node otherwise add attribute\n\t *     used only if value if scalar value\n\t */\n\tsetValue(node, value, name = null, asNode = false) {\n\t\tif (!(node instanceof Element)) {\n\t\t\tthrow new ArgumentException(node, 'Element', 1);\n\t\t}\n\t\tif (value instanceof Node) {\n\t\t\tif (node.ownerDocument !== value.ownerDocument) {\n\t\t\t\tvalue = node.ownerDocument.importNode(value, true);\n\t\t\t}\n\t\t\tnode.appendChild(value);\n\t\t} else {\n\t\t\tif (asNode) {\n\t\t\t\tconst childNode = node.appendChild(node.ownerDocument.createElement(name));\n\t\t\t\tif (value === null) {\n\t\t\t\t\tthis.setNodeAsNull(childNode);\n\t\t\t\t} else {\n\t\t\t\t\tchildNode.appendChild(childNode.ownerDocument.createTextNode(value));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (value === null) {\n\t\t\t\t\tconst childNode = node.appendChild(node.ownerDocument.createElement(name));\n\t\t\t\t\tthis.setNodeAsNull(childNode);\n\t\t\t\t} else {\n\t\t\t\t\tnode.setAttribute(name, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * unset value in node with attribute or node name according asNode\n\t *\n\t * @param {Element} node\n\t * @param {string} name\n\t * @param {boolean} asNode if true search value in nodes otherwise search in attributes\n\t */\n\tunsetValue(node, name, asNode = false) {\n\t\tif (asNode) {\n\t\t\tconst domElement= this._getChildNode(node, name);\n\t\t\tif (domElement !== null) {\n\t\t\t\tnode.removeChild(domElement);\n\t\t\t}\n\t\t} else {\n\t\t\tnode.removeAttribute(name);\n\t\t}\n\t}\n\n\t/**\n\t * add value to node\n\t *\n\t * @param {Element} node\n\t * @param {Node} value\n\t * @param {string} name used only if value if scalar value\n\t */\n\taddValue(node, value, name = null) {\n\t\tthis.setValue(node, value, name, true);\n\t}\n\n\t/**\n\t * add value to node\n\t *\n\t * @param {Element} node\n\t * @param {Node} value\n\t * @param {string} key\n\t * @param {string} name node name to add. must be provided if value if scalar value.\n\t */\n\taddAssociativeValue(node, value, key, name = null) {\n\t\tthis.setValue(node, value, name, true);\n\t\tthis.setValue(node.lastChild, key, Interfacer.ASSOCIATIVE_KEY);\n\t}\n\n\t/**\n\t * create DOM Element node\n\t *\n\t * @param {string} name\n\t * @returns {Element}\n\t */\n\tcreateNode(name = null) {\n\t\tif (name === null) {\n\t\t\tthrow new ArgumentException(name, 'string', 1);\n\t\t}\n\t\treturn this.#domDocument.createElement(name);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see {Interfacer}::getNodeClasses()\n\t */\n\tgetNodeClasses() {\n\t\treturn ['Node'];\n\t}\n\n\t/**\n\t * create DOM Element node\n\t *\n\t * @param {string} name\n\t * @returns {Element}\n\t */\n\tcreateArrayNode(name = null) {\n\t\treturn this.createNode(name);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see {Interfacer}::getArrayNodeClasses()\n\t */\n\tgetArrayNodeClasses() {\n\t\treturn ['Node'];\n\t}\n\n\t/**\n\t * transform given node to string\n\t *\n\t * @param {Element} node\n\t * @param {boolean} prettyPrint\n\t * @returns {string}\n\t */\n\ttoString(node, prettyPrint = false) {\n\t\treturn this._saveXML(node, prettyPrint);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Interfacer}::fromString()\n\t */\n\tfromString(string) {\n\t\ttry {\n\t\t\tconst parser = new DOMParser();\n\t\t\tconst domDoc = parser.parseFromString(string, \"application/xml\");\n\t\t\tif (!domDoc) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (domDoc.childNodes.length !== 1 || !(domDoc.childNodes.item(0) instanceof Element)) {\n\t\t\t\tconsole.log('wrong xml, XMLInterfacer manage only xml with one and only one root node');\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn this.#domDocument.importNode(domDoc.childNodes.item(0), true);\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * flatten value (transform object/array to string)\n\t *\n\t * @param {Element} node\n\t * @param {string} name\n\t */\n\tflattenNode(node, name) {\n\t\tconst  domElement = this._getChildNode(node, name);\n\t\tif (domElement !== null) {\n\t\t\tlet string = '';\n\t\t\tconst toRemove = [];\n\t\t\tfor (const child of domElement.childNodes) {\n\t\t\t\ttoRemove.push(child);\n\t\t\t\tstring += this._saveXML(child, false);\n\t\t\t}\n\t\t\tfor (const child of toRemove) {\n\t\t\t\tdomElement.removeChild(child);\n\t\t\t}\n\t\t\tdomElement.appendChild(domElement.ownerDocument.createTextNode(string));\n\t\t}\n\t}\n\n\t/**\n\t * unflatten value (transform string to object)\n\t *\n\t * @param {array} node\n\t * @param {string} name\n\t */\n\tunFlattenNode(node, name) {\n\t\tconst domElement = this._getChildNode(node, name);\n\t\tif ((domElement !== null) && this.extractNodeText(domElement) !== '') {\n\t\t\tconst parser = new DOMParser();\n\t\t\tconst tempDoc = parser.parseFromString('<temp>' + this.extractNodeText(domElement) + '</temp>',\"application/xml\");\n\n\t\t\tif (tempDoc.childNodes.length !== 1 || !(tempDoc.childNodes.item(0) instanceof Element)) {\n\t\t\t\tthrow new ComhonException('wrong xml, XMLInterfacer manage xml with one and only one root node');\n\t\t\t}\n\t\t\tconst toRemove = [];\n\t\t\tfor (const child of domElement.childNodes) {\n\t\t\t\ttoRemove.push(child);\n\t\t\t}\n\t\t\tfor (const child of toRemove) {\n\t\t\t\tdomElement.removeChild(child);\n\t\t\t}\n\t\t\tfor (const child of tempDoc.childNodes.item(0).childNodes) {\n\t\t\t\tdomElement.appendChild(this.#domDocument.importNode(child, true));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * replace value in node name by value (fail if node name doesn't exist)\n\t *\n\t * @param {Element} node\n\t * @param {string} name\n\t * @param {*} value\n\t */\n\treplaceValue(node, name, value) {\n\t\tconst domElement = this._getChildNode(node, name);\n\t\tif (domElement !== null) {\n\t\t\tnode.removeChild(domElement);\n\t\t\tthis.setValue(node, value, name, true);\n\t\t}\n\t}\n\n\t/**\n\t * extract text from node\n\t *\n\t * @param {Element} node\n\t * @returns {string|void}\n\t */\n\textractNodeText(node) {\n\t\tif (this.isNodeNull(node)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (node.childNodes.length !== 1) {\n\t\t\tthrow new ComhonException('malformed node, should only contain one text');\n\t\t}\n\t\tif (node.childNodes.item(0).nodeType !== 3) { // 3 correspond to text node\n\t\t\tthrow new ComhonException('malformed node, should only contain one text');\n\t\t}\n\t\treturn node.childNodes.item(0).nodeValue;\n\t}\n\n}\n\nexport default XMLInterfacer;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * model bridge permit to store some modules to avoid import loop\n */\nclass ModuleBridge {\n\n\t#modelRootInstance = null;\n\n\t#objectFinder = null;\n\n\t/**\n\t * register ModelRoot\n\t *\n\t * @param {ModelRoot} modelRootInstance\n\t */\n\tregisterModelRoot(modelRootInstance) {\n\t\tif (modelRootInstance === null || typeof modelRootInstance !== 'object' || modelRootInstance.getClassName() !== 'ModelRoot') {\n\t\t\tthrow new Error('invalid ModelRoot instance');\n\t\t}\n\tthis.#modelRootInstance = modelRootInstance;\n\t}\n\n\t/**\n\t * get ModelRoot\n\t *\n\t * @returns {ModelRoot|void}\n\t */\n\tgetModelRoot() {\n\t\treturn this.#modelRootInstance;\n\t}\n\n\t/**\n\t * register ModelRoot\n\t *\n\t * @param {ModelRoot} modelRootInstance\n\t */\n\tregisterObjectFinder(objectFinder) {\n\t\tthis.#objectFinder = objectFinder;\n\t}\n\n\t/**\n\t * get ModelRoot\n\t *\n\t * @returns {ModelRoot|void}\n\t */\n\tgetObjectFinder() {\n\t\treturn this.#objectFinder;\n\t}\n\n}\n\nexport default new ModuleBridge();\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport AbstractModel from 'Logic/Model/AbstractModel';\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ObjectCollectionInterfacer from 'Logic/Object/Collection/ObjectCollectionInterfacer';\nimport InterfaceException from 'Logic/Exception/Interfacer/InterfaceException';\nimport NotReferencedValueException from 'Logic/Exception/Interfacer/NotReferencedValueException';\nimport ExportException from 'Logic/Exception/Interfacer/ExportException';\nimport XMLInterfacer from 'Logic/Interfacer/XMLInterfacer';\nimport Interfacer from 'Logic/Interfacer/Interfacer';\nimport ModuleBridge from 'Logic/ModuleBridge/ModuleBridge';\n\n/**\n * @abstract\n */\nclass ModelComplex extends AbstractModel {\n\n\tconstructor() {\n\t\tsuper();\n\t\tif (this.constructor === ModelComplex) {\n\t\t\tthrow new Error('can\\'t instanciate abstract class ModelComplex');\n\t\t}\n  }\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractModel}::isComplex()\n\t */\n\tisComplex() {\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * @param {ComhonObject} object\n\t * @param {ObjectCollectionInterfacer} objectCollectionInterfacer\n\t * @throws {ComhonException}\n\t */\n\t_verifyReferences(object, objectCollectionInterfacer) {\n\t\tconst objects = objectCollectionInterfacer.getNotReferencedObjects();\n\t\tif (objects.length > 0) {\n\t\t\tconst ObjectFinder = ModuleBridge.getObjectFinder();\n\t\t\tif (ObjectFinder === null) {\n\t\t\t\tthrow new Error('ObjectFinder has not been registered');\n\t\t\t}\n\t\t\tconst objectFinder = new ObjectFinder();\n\t\t\tfor (const obj of objects) {\n\t\t\t\tconst statck = objectFinder.execute(\n\t\t\t\t\tobject,\n\t\t\t\t\t{\n\t\t\t\t\t\t[ObjectFinder.ID] : obj.getId(),\n\t\t\t\t\t\t[ObjectFinder.MODEL] : obj.getModel(),\n\t\t\t\t\t\t[ObjectFinder.SEARCH_FOREIGN] : true\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tif (statck === null) {\n\t\t\t\t\tthrow new ComhonException('value should not be null');\n\t\t\t\t}\n\t\t\t\t// for the moment InterfaceException manage only one error\n\t\t\t\t// so we throw exception at the first loop\n\t\t\t\tthrow InterfaceException.getInstanceWithProperties(\n\t\t\t\t\tnew NotReferencedValueException(obj),\n\t\t\t\t\tstatck.reverse()\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * export comhon object in specified format\n\t *\n\t * @param {AbstractComhonObject} object\n\t * @param {Interfacer} interfacer\n\t * @param {boolean} forceIsolateElements this parameter is only use if exported object is a comhon array.\n\t *                force isolate each elements of comhon array\n\t *                (isolated element doesn't share objects instances with others elements).\n\t * @returns {*}\n\t */\n\texport(object, interfacer, forceIsolateElements = true) {\n\t\ttry {\n\t\t\tthis.verifValue(object);\n\t\t\tconst objectCollectionInterfacer = new ObjectCollectionInterfacer();\n\t\t\tconst nullNodes = interfacer instanceof XMLInterfacer ? [] : null;\n\t\t\tconst isolate = forceIsolateElements && (object.getClassName() === 'ComhonArray');\n\t\t\tconst oids = {};\n\t\t\tconst node = this._export(object, 'root', interfacer, true, objectCollectionInterfacer, nullNodes, oids, isolate);\n\t\t\t// cannot use !(this instanceof ModelForeign)\n\t\t\t// because ModelForeign import make this class loading fail\n\t\t\t// certainly due to a kind of import loop\n\t\t\tif (interfacer.hasToVerifyReferences() && (this.getClassName() !== 'ModelForeign')) {\n\t\t\t\tthis._verifyReferences(object, objectCollectionInterfacer);\n\t\t\t}\n\t\t\tif (nullNodes !== null && nullNodes.length > 0) { // if not empty, interfacer must be xml interfacer\n\t\t\t\tthis._processNullNodes(interfacer, node, nullNodes);\n\t\t\t}\n\t\t\treturn node;\n\t\t} catch (e) {\n\t\t\tthrow new ExportException(e);\n\t\t}\n\t}\n\n\t/**\n\t * add null namespace on given root element and flag given nodes as null\n\t *\n\t * @private\n\t * @param XMLInterfacer interfacer\n\t * @param {Element} rootNode\n\t * @param {Element[]} nullNodes\n\t */\n\t_processNullNodes(interfacer, rootNode, nullNodes) {\n\t\tinterfacer.addNullNamespaceURI(rootNode);\n\t\tfor (const nullNode of nullNodes) {\n\t\t\tinterfacer.setNodeAsNull(nullNode);\n\t\t}\n\t}\n\n\t/**\n\t * export comhon object id(s)\n\t *\n\t * @abstract\n\t * @param {AbstractComhonObject} object\n\t * @param {string} nodeName\n\t * @param {Interfacer} interfacer\n\t * @param {ObjectCollectionInterfacer} objectCollectionInterfacer\n\t * @param {Element[]} nullNodes nodes that need to be processed at the end of export (only used for xml export).\n\t * @throws {ComhonException}\n\t * @returns {*|void}\n\t */\n\t_exportId(object, nodeName, interfacer, objectCollectionInterfacer, nullNodes) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * import interfaced object\n\t *\n\t * @async\n\t * @abstract\n\t * @param {*} interfacedValue\n\t * @param {Interfacer} interfacer\n\t * @throws {ComhonException}\n\t * @returns {Promise<ComhonObject|ComhonArray>}\n\t */\n\tasync import(interfacedValue, interfacer) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * create or get comhon object according interfaced id\n\t *\n\t * @async\n\t * @abstract\n\t * @param {*} interfacedId\n\t * @param {Interfacer} interfacer\n\t * @param {boolean} isFirstLevel\n\t * @param {ObjectCollectionInterfacer} objectCollectionInterfacer\n\t * @returns {Promise<ComhonObject|ComhonArray>}\n\t */\n\tasync _importId(interfacedId, interfacer, isFirstLevel, objectCollectionInterfacer) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * import interfaced object\n\t *\n\t * @async\n\t * @param {*} interfacedObject\n\t * @param {Interfacer} interfacer\n\t * @param {AbstractComhonObject} rootObject\n\t * @param {boolean} isolate determine if root comhon array elements must be isolated.\n\t *                         this parameter may by true only if the imported root object is a comhon array\n\t *                         and if the parameter forceIsolateElements is set to true.\n\t * @throws {ComhonException}\n\t * @returns {AbstractComhonObject}\n\t */\n\tasync _importRoot(interfacedObject, interfacer, rootObject = null, isolate = false) {\n \t\tconst mergeType = interfacer.getMergeType();\n\n \t\tif (rootObject === null) {\n \t\t\trootObject = await this._getRootObject(interfacedObject, interfacer);\n \t\t}\n\n\t\t// TODO (perhaps) to increase performances, visit interfacedObject to retrieve all models\n\t\t//        that will be used during import and that are not loaded\n\t\t//        to load them in same time with \"await Promise.all()\".\n\t\t//      should increase perfs first time but for several imports, if all models are already loaded\n\t\t//        does it have a significant cost to visit interfacedObject for nothing?\n\n \t\tconst objectCollectionInterfacer = this._initObjectCollectionInterfacer(rootObject, mergeType);\n\n \t\tif (interfacer.getMergeType() === Interfacer.OVERWRITE || this.getClassName() === 'ModelArray') {\n \t\t\tconst isLoaded = rootObject.isLoaded();\n \t\t\trootObject.reset(false);\n \t\t\trootObject.setIsLoaded(isLoaded);\n \t\t}\n \t\tawait this._fillObject(\n \t\t\trootObject,\n \t\t\tinterfacedObject,\n \t\t\tinterfacer,\n \t\t\ttrue,\n \t\t\tobjectCollectionInterfacer,\n \t\t\tisolate\n \t\t);\n\n \t\tif (interfacer.hasToVerifyReferences()) {\n \t\t\tthis._verifyReferences(rootObject, objectCollectionInterfacer);\n \t\t}\n\n \t\treturn rootObject;\n \t}\n\n\t/**\n\t * get root object instance\n\t *\n\t * @async\n\t * @param {*} interfacedObject\n\t * @param {Interfacer} interfacer\n\t * @returns {Promise<ComhonObject|ComhonArray>}\n\t */\n\tasync _getRootObject(interfacedObject, interfacer) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t *\n\t * @param {ComhonObject|ComhonArray} objectArray\n\t * @param {string} mergeType\n\t * @returns {ObjectCollectionInterfacer}\n\t */\n\t_initObjectCollectionInterfacer(object, mergeType) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * fill comhon object (or comhon array) with values from interfaced object\n\t *\n\t * @async\n\t * @param {AbstractComhonObject} object\n\t * @param {*} interfacedObject\n\t * @param {Interfacer} interfacer\n\t * @param {boolean} isFirstLevel\n\t * @param {ObjectCollectionInterfacer} objectCollectionInterfacer\n\t * @param {boolean} isolate determine if root comhon array elements must be isolated.\n\t *                         this parameter may by true only if the imported root object is a comhon array\n\t *                         and if the parameter forceIsolateElements is set to true.\n\t * @throws {ImportException}\n\t */\n\tasync _fillObject(\n\t\tobject,\n\t\tinterfacedObject,\n\t\tinterfacer,\n\t\tisFirstLevel,\n\t\tobjectCollectionInterfacer,\n\t\tisolate = false\n\t) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * fill comhon object with values from interfaced object\n\t *\n\t * @async\n\t * @abstract\n\t * @param {AbstractComhonObject} object\n\t * @param {*} interfacedObject\n\t * @param {Interfacer} interfacer\n\t * @throws {ComhonException}\n\t * @returns {Promise<void>}\n\t */\n\tasync fillObject(object, interfacedObject, interfacer) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get instance of object associated to model\n\t *\n\t * @abstract\n\t * @param {boolean} isloaded define if instanciated object will be flagged as loaded or not\n\t * @returns {ComhonObject|ComhonArray}\n\t */\n\tgetObjectInstance(isloaded = true) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n}\n\nexport default ModelComplex;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass CastStringException extends ComhonException {\n\n\t/**\n\t *\n\t * @param {string} value\n\t * @param {string} expected\n\t * @param {string} property\n\t */\n\tconstructor(value, expected, property = null) {\n\t\texpected = Array.isArray(expected)\n\t\t\t? 'belong to enumeration ' + JSON.stringify(expected)\n\t\t\t: `be ${expected}`;\n\t\tconst propertyMessage = (property === null) ? '' : ` for property '${property}'`;\n\t\tconst message = `Cannot cast value '${value}'${propertyMessage}, value should ${expected}`;\n\t\tsuper(message, ConstantException.CAST_EXCEPTION);\n\t}\n\n}\n\nexport default CastStringException;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport AbstractModel from 'Logic/Model/AbstractModel';\nimport XMLInterfacer from 'Logic/Interfacer/XMLInterfacer';\nimport CastStringException from 'Logic/Exception/Model/CastStringException';\n\n/**\n * @abstract\n */\nclass SimpleModel extends AbstractModel {\n\n\t/** @type {string} */\n\t#modelName;\n\n\t/**\n\t * don't instanciate a model by yourself because it take time\n\t * to get a model instance use singleton ModelManager\n\t */\n\tconstructor(modelName) {\n\t\tsuper();\n\t\tif (this.constructor === SimpleModel) {\n\t\t\tthrow new Error('can\\'t instanciate abstract class SimpleModel');\n\t\t}\n\t\tthis.#modelName = modelName;\n\t}\n\n\t/**\n\t * get class name\n\t *\n\t * @returns {string}\n\t */\n\tgetClassName() {\n\t\treturn this.#modelName;\n\t}\n\n\t/**\n\t * get model name\n\t *\n\t * @returns {string}\n\t */\n\tgetName() {\n\t\treturn this.#modelName;\n\t}\n\n\t/**\n\t * get short name of model (name without namespace)\n\t *\n\t * @returns {string}\n\t */\n\tgetShortName() {\n\t\treturn this.#modelName;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractModel}::isComplex()\n\t */\n\tisComplex() {\n\t\treturn false;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractModel}::_isNextLevelFirstLevel()\n\t */\n\t_isNextLevelFirstLevel(isCurrentLevelFirstLevel) {\n\t\treturn isCurrentLevelFirstLevel;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractModel}::_export()\n\t */\n\t_export(value, nodeName, interfacer, isFirstLevel, objectCollectionInterfacer, nullNodes, oids, isolate = false) {\n\t\treturn this.exportSimple(value, interfacer);\n\t}\n\n\t/**\n\t * export value in specified format\n\t *\n\t * @param {*} value\n\t * @param {Interfacer} interfacer\n\t * @returns {*}\n\t */\n\texportSimple(value, interfacer) {\n\t\treturn value;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractModel}::_import()\n\t */\n\tasync _import(value, interfacer, isFirstLevel, objectCollectionInterfacer, isolate = false) {\n\t\treturn this.importValue(value, interfacer);\n\t}\n\n\t/**\n\t * import interfaced value\n\t *\n\t * @param {*} value\n\t * @param {Interfacer} interfacer\n\t * @param {boolean} applyCast if true and if interfacer setting Interfacer.STRINGIFIED_VALUES is set to true, value will be casted during import\n\t * @returns {*}\n\t */\n\timportValue(value, interfacer) {\n\t\tif (interfacer.isNullValue(value)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (interfacer instanceof XMLInterfacer && value instanceof Element) {\n\t\t\tvalue = interfacer.extractNodeText(value);\n\t\t}\n\t\ttry {\n\t\t\treturn this._importScalarValue(value, interfacer);\n\t\t} catch (e) {\n\t\t\tif (e instanceof CastStringException) {\n\t\t\t\t// we don't want CastStringException but an UnexpectedValueTypeException\n\t\t\t\tthis.verifValue(value);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * import interfaced value\n\t *\n\t * @param {*} value\n\t * @param {Interfacer} interfacer\n\t * @returns {string|void}\n\t */\n\t_importScalarValue(value, interfacer) {\n\t\treturn value;\n\t}\n\n}\n\nexport default SimpleModel;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n import ModelComplex from 'Logic/Model/ModelComplex';\n import SimpleModel from 'Logic/Model/SimpleModel';\n import ComhonException from 'Logic/Exception/ComhonException';\n\n/**\n * @abstract\n */\nclass ModelContainer extends ModelComplex {\n\n\t/**\n\t * @type {AbstractModel} model of object array elements\n\t */\n\t#model;\n\n\t/**\n\t * @param {AbstractModel} model contained model\n\t */\n\tconstructor(model) {\n    super();\n\t\tif (this.constructor === ModelContainer) {\n\t\t\tthrow new Error('can\\'t instanciate abstract class ModelContainer');\n\t\t}\n\t\tthis.#model = model;\n\t}\n\n\t/**\n\t * get contained model.\n   * DON'T use this function because model may be not loaded.\n\t * instead you must call getModel().\n\t *\n\t * @returns {Model|ModelArray|SimpleModel}\n\t */\n\t_getModel() {\n\t\treturn this.#model;\n\t}\n\n\t/**\n\t * get contained model\n\t *\n   * @async\n\t * @returns {Promise<Model|ModelArray|SimpleModel>}\n\t */\n\tasync getModel() {\n\t\tawait this.#model.load();\n\t\treturn this.#model;\n\t}\n\n\t/**\n\t * get contained model name\n\t *\n\t * @returns {string|void} returns null if contained model is a model container.\n\t */\n\tgetModelName() {\n\t\treturn this.#model.getName();\n\t}\n\n\t/**\n\t * get unique contained model\n\t *\n\t * a model container may contain another container so this function permit to\n\t * get the final unique model that is not a container\n\t *\n   * @async\n\t * @returns {Promise<Model|SimpleModel>}\n\t */\n\tasync getUniqueModel() {\n\t\tlet model = this.#model;\n\t\twhile (model instanceof ModelContainer) {\n\t\t\tmodel = model.#model;\n\t\t}\n  \tawait model.load();\n\t\treturn model;\n\t}\n\n\t/**\n\t * get unique contained model name\n\t *\n\t * a model container may contain another container so this function permit to\n\t * get the final unique model name that is not a container\n\t *\n\t * @returns {string}\n\t */\n\tgetUniqueModelName() {\n\t\tlet model = this.#model;\n\t\twhile (model instanceof ModelContainer) {\n\t\t\tmodel = model.#model;\n\t\t}\n\t\treturn model.getName();\n\t}\n\n\t/**\n\t * get unique contained loaded model.\n\t *\n\t * a model container may contain another container so this function permit to\n\t * get the final unique model that is not a container.\n   * if unique model is not loaded an exception is thrown.\n\t *\n\t * @returns {Model|SimpleModel}\n\t */\n\tgetLoadedUniqueModel() {\n\t\tlet model = this.#model;\n\t\twhile (model instanceof ModelContainer) {\n\t\t\tmodel = model.#model;\n\t\t}\n    if (!model.isLoaded()) {\n      throw new ComhonException('unique model not loaded')\n    }\n\t\treturn model;\n\t}\n\n\t/**\n\t * get contained loaded model.\n\t *\n\t * a model container may contain another container so this function permit to get a model at given depth.\n\t * if the model at given depth is a unique model and is not loaded, an exception is thrown.\n\t *\n\t * @param {integer} depth\n\t * @returns {Model|SimpleModel}\n\t */\n\tgetLoadedModel(depth = 0) {\n\t\tlet model = this.#model;\n\t\twhile ((depth > 0) && (model instanceof ModelContainer)) {\n\t\t\tmodel = model.#model;\n      depth--;\n\t\t}\n    if (depth > 0) {\n      throw new ComhonException('invalid depth (out of range)');\n    }\n    if (!model.isLoaded()) {\n      throw new ComhonException('model not loaded')\n    }\n\t\treturn model;\n\t}\n\n\t/**\n\t * verify unique model inside model container is a simple model\n\t *\n\t * @returns {boolean}\n\t */\n\tisUniqueModelSimple() {\n\t\treturn this.#model instanceof ModelContainer\n\t\t\t? this.#model.isUniqueModelSimple()\n\t\t\t: this.#model instanceof SimpleModel;\n\t}\n\n\t/**\n\t * verify if specified model is equal to this model container\n\t *\n\t * verify if model are same instance or if they have same contained model\n\t *\n\t * @param AbstractModel model\n\t * @returns {boolean}\n\t */\n\tisEqual(model) {\n\t\treturn super.isEqual(model) || ((this.constructor.name === model.constructor.name) && this.#model.isEqual(model.#model));\n\t}\n\n}\n\nexport default ModelContainer;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ModelContainer from 'Logic/Model/ModelContainer';\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ObjectCollectionInterfacer from 'Logic/Object/Collection/ObjectCollectionInterfacer';\n\nclass ModelForeign extends ModelContainer {\n\n\t/**\n\t *\n\t * @param AbstractModel model\n\t * @throws {ComhonException}\n\t */\n\tconstructor(model) {\n\t\tsuper(model);\n\t\tif (this.isUniqueModelSimple()) {\n\t\t\tthrow new ComhonException('ModelForeign can\\'t contain SimpleModel');\n\t\t}\n\t}\n\n\t/**\n\t * get class name\n\t *\n\t * @returns {string}\n\t */\n\tgetClassName() {\n\t\treturn 'ModelForeign';\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractModel}::_isNextLevelFirstLevel()\n\t */\n\t_isNextLevelFirstLevel(isCurrentLevelFirstLevel) {\n\t\treturn isCurrentLevelFirstLevel;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelComplex}::getObjectInstance()\n\t * @returns {ComhonObject|ComhonArray}\n\t */\n\tgetObjectInstance(isloaded = true) {\n\t\treturn this.getLoadedModel().getObjectInstance(isloaded);\n\t}\n\n\t/**\n\t * export comhon object to interfaced id in specified format\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelContainer}::_export()\n\t */\n\t_export(object, nodeName, interfacer, isFirstLevel, objectCollectionInterfacer, nullNodes, oids, isolate = false) {\n\t\tif (object === null) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.getLoadedModel()._exportId(object, nodeName, interfacer, objectCollectionInterfacer, nullNodes);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelComplex}::_exportId()\n\t */\n\t_exportId(object, nodeName, interfacer, objectCollectionInterfacer, nullNodes) {\n\t\tthrow new ComhonException('should not call _exportId via ModelForeign');\n\t}\n\n\t/**\n\t * import interfaced array\n\t *\n\t * build comhon object array with values from interfaced object\n\t *\n\t * @async\n\t * @param {*} interfacedObject\n\t * @param {Interfacer} interfacer\n\t * @throws {ComhonException}\n\t * @returns {Promise<ComhonObject|ComhonArray>}\n\t */\n\tasync import(interfacedObject, interfacer) {\n\t\treturn this._import(interfacedObject, interfacer, true, new ObjectCollectionInterfacer());\n\t}\n\n\t/**\n\t * import interfaced id\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelContainer}::_import()\n\t */\n\tasync _import(value, interfacer, isFirstLevel, objectCollectionInterfacer, isolate = false) {\n\t\tconst model = await this.getModel();\n\t\treturn model._importId(value, interfacer, isFirstLevel, objectCollectionInterfacer);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelComplex}::_importId()\n\t */\n\tasync _importId(interfacedId, interfacer, isFirstLevel, objectCollectionInterfacer) {\n\t\tthrow new ComhonException('cannot call _importId via ModelForeign');\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelComplex}::fillObject()\n\t */\n\tasync fillObject(object, interfacedObject, interfacer) {\n\t\tthrow new ComhonException('cannot fill object via ModelForeign');\n\t}\n\n\t/**\n\t * verify if value is correct according contained model\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tverifValue(value) {\n\t\tthis.getLoadedModel().verifValue(value);\n\t\treturn true;\n\t}\n}\n\nexport default ModelForeign;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ObjectCollection from 'Logic/Object/Collection/ObjectCollection';\nimport ComhonException from 'Logic/Exception/ComhonException';\n\nclass MainObjectCollection extends ObjectCollection {\n\n\t/**\n\t * function desactivated for MainObjectCollection\n\t *\n\t * @throws {ComhonException}\n\t */\n\tgetMap() {\n\t\tthrow new Error('function can\\'t be called from MainObjectCollection');\n\t}\n\n\t/**\n\t * add object with mainModel (if not already added)\n\t *\n\t * @param {ComhonObject} object\n\t * @param {boolean} throwException throw exception if object already added\n\t * @throws {ComhonException}\n\t * @returns {boolean} true if object is added\n\t */\n\taddObject(object, throwException = true) {\n\t\tif (!object.getModel().isMain()) {\n\t\t\tthrow new ComhonException('model of given ComhonObject must be a main Model');\n\t\t}\n\t\treturn super.addObject(object, throwException);\n\t}\n\n\n\t/**\n\t * add object with mainModel (if not already added)\n\t *\n\t * @param {ComhonObject} object\n\t * @throws {ComhonException}\n\t * @returns {boolean} true if object is added\n\t */\n\tremoveObject(object, throwException = true) {\n\t\tif (!object.getModel().isMain()) {\n\t\t\tthrow new ComhonException('model of given ComhonObject must be a main Model');\n\t\t}\n\t\treturn super.removeObject(object, throwException);\n\t}\n}\n\nexport default new MainObjectCollection();\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Interfacer from 'Logic/Interfacer/Interfacer';\nimport ArgumentException from 'Logic/Exception/ArgumentException';\nimport ComhonException from 'Logic/Exception/ComhonException';\n\n/**\n * media type indexed by format name\n *\n * @var {Object} ALLOWED_FORMATS\n */\nconst ALLOWED_FORMATS = {\n\t//yaml: 'application/x-yaml', TODO add yaml management\n\tjson: 'application/json'\n};\nObject.freeze(ALLOWED_FORMATS);\n\n/**\n * media type indexed by format name\n *\n * @var {Object} ALLOWED_MEDIA_TYPES\n */\nconst ALLOWED_MEDIA_TYPES = {\n\t//'application/x-yaml': 'yaml', TODO add yaml management\n\t'application/json': 'json'\n};\nObject.freeze(ALLOWED_MEDIA_TYPES);\n\nclass ObjectInterfacer extends Interfacer {\n\n\t/** @type {string} */\n\t#format;\n\n\t/**\n\t *\n\t * @param {string} format format to use when load value from string (or file)\n\t *                       and when transform object to string (or when save it into a file).\n\t *                       format must belong to ALLOWED_FORMATS. it may be either a format or media type.\n\t */\n\tconstructor(format = 'json') {\n\t\tsuper();\n\t\tif (format in ALLOWED_FORMATS) {\n\t\t\tthis.#format = format;\n\t\t} else if (format in ALLOWED_MEDIA_TYPES) {\n\t\t\tthis.#format = ALLOWED_MEDIA_TYPES[format];\n\t\t\tif (!(this.#format in ALLOWED_FORMATS)) {\n\t\t\t\tthrow new Error('ALLOWED_FORMATS and ALLOWED_MEDIA_TYPES are not synchronized');\n\t\t\t}\n\t\t} else {\n\t\t\tconst enumeration = ['json', 'application/json'/*, 'yaml', 'application/x-yaml'*/];\n\t\t\tthrow new ArgumentException(format, 'string', 1, enumeration);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Interfacer}::getMediaType()\n\t */\n\tgetMediaType() {\n\t\treturn ALLOWED_FORMATS[this.#format];\n\t}\n\n\t/**\n\t * get value in node with property name\n\t *\n\t * @param {Object} node\n\t * @param {string} name\n\t * @param {boolean} asNode not used (but needed to stay compatible with interface)\n\t * @returns {*} null if doesn't exist\n\t */\n\tgetValue(node, name, asNode = false) {\n\t\tif (name in node) {\n\t\t\treturn node[name];\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * verify if node contain value with property name\n\t *\n\t * @param {Object} node\n\t * @param {string} name\n\t * @param {boolean} asNode not used (but needed to stay compatible with interface)\n\t * @returns {boolean}\n\t */\n\thasValue(node, name, asNode = false) {\n\t\treturn (name in node);\n\t}\n\n\t/**\n\t * verify if value is null\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tisNullValue(value) {\n\t\treturn value === null;\n\t}\n\n\t/**\n\t * verify if value is an object\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tisNodeValue(value) {\n\t\treturn (value !== null && typeof value === 'object');\n\t}\n\n\t/**\n\t * verify if value is an array\n\t *\n\t * @param {*} value\n\t * @param {boolean} isAssociative\n\t * @returns {boolean}\n\t */\n\tisArrayNodeValue(value, isAssociative) {\n\t\treturn (!isAssociative && Array.isArray(value)) || (isAssociative && value !== null && typeof value === 'object');\n\t}\n\n\t/**\n\t * verify if value is a complex id (with inheritance key) or a simple value\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tisComplexInterfacedId(value) {\n\t\treturn value !== null && typeof value === 'object';\n\t}\n\n\t/**\n\t * verify if value is a flatten complex id (with inheritance key)\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tisFlattenComplexInterfacedId(value) {\n\t\treturn (typeof value === 'string') && value.substr(0, 6) === '{\"id\":';\n\t}\n\n\t/**\n\t * set value in node with property name\n\t *\n\t * @param {Object} node\n\t * @param {*} value\n\t * @param {string} name must be specified and not null (there is a default value to stay compatible with interface)\n\t * @param {boolean} asNode not used (but needed to stay compatible with interface)\n\t */\n\tsetValue(node, value, name = null, asNode = false) {\n\t\tif (node === null || typeof node !== 'object') {\n\t\t\tthrow new ArgumentException(node, 'Object', 1);\n\t\t}\n\t\tif (name === null) {\n\t\t\tthrow new ArgumentException(name, 'string', 3);\n\t\t}\n\t\tnode[name] = value;\n\t}\n\n\t/**\n\t * unset value in node with property name\n\t *\n\t * @param {Object} node\n\t * @param {string} name\n\t * @param {boolean} asNode not used (but needed to stay compatible with interface)\n\t */\n\tunsetValue(node, name, asNode = false) {\n\t\tdelete node[name];\n\t}\n\n\t/**\n\t * add value to node\n\t *\n\t * @param {array} node\n\t * @param {*} value\n\t * @param {string} name not used (but needed to stay compatible with interface)\n\t */\n\taddValue(node, value, name = null) {\n\t\tif (!Array.isArray(node)) {\n\t\t\tthrow new ArgumentException(node, 'array', 1);\n\t\t}\n\t\tnode.push(value);\n\t}\n\n\t/**\n\t * add value to node\n\t *\n\t * @param {array} node\n\t * @param {*} value\n\t * @param {string} key\n\t * @param {string} name not used (there is a default value to stay compatible with interface)\n\t */\n\taddAssociativeValue(node, value, key, name = null) {\n\t\tif (node === null || typeof node !== 'object') {\n\t\t\tthrow new ArgumentException(node, 'object', 1);\n\t\t}\n\t\tif (key === null) {\n\t\t\tthrow new ArgumentException(key, 'string', 3);\n\t\t}\n\t\tnode[key] = value;\n\t}\n\n\t/**\n\t * create object node\n\t *\n\t * @param {string} name not used (but needed to stay compatible with interface)\n\t * @returns {Object}\n\t */\n\tcreateNode(name = null) {\n\t\treturn {};\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see {Interfacer}::getNodeClasses()\n\t */\n\tgetNodeClasses() {\n\t\treturn ['object'];\n\t}\n\n\t/**\n\t * create array node\n\t *\n\t * @param {string} name not used (but needed to stay compatible with interface)\n\t * @returns {array}\n\t */\n\tcreateArrayNode(name = null) {\n\t\treturn [];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see {Interfacer}::getArrayNodeClasses()\n\t */\n\tgetArrayNodeClasses() {\n\t\treturn ['array'];\n\t}\n\n\t/**\n\t * transform given node to string\n\t *\n\t * @param {Object} node\n\t * @param {boolean} prettyPrint\n\t * @returns {string}\n\t */\n\ttoString(node, prettyPrint = false) {\n\t\tswitch (this.#format) {\n\t\t\tcase 'json':\n\t\t\t\treturn prettyPrint ? JSON.stringify(node, null, 2) : JSON.stringify(node);\n\t\t\t// TODO case 'yaml':\n\t\t\t\t// TODO return Yaml::dump(node, 1000, 4, Yaml::DUMP_OBJECT_AS_MAP | Yaml::DUMP_EMPTY_ARRAY_AS_SEQUENCE);\n\t\t\tdefault:\n\t\t\t\tthrow new ComhonException('undefined format ' + this.#format);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Interfacer}::fromString()\n\t */\n\tfromString(string) {\n\t\tswitch (this.#format) {\n\t\t\tcase 'json':\n\t\t\t\treturn JSON.parse(string);\n\t\t\t// TODO case 'yaml':\n\t\t\t\t// TODO return Yaml::parse(string, Yaml::PARSE_OBJECT_FOR_MAP);\n\t\t\tdefault:\n\t\t\t\tthrow new ComhonException('undefined format ' + this.#format);\n\t\t}\n\t}\n\n\t/**\n\t * flatten value (transform object/array to string)\n\t *\n\t * @param {Object} node\n\t * @param {string} name\n\t */\n\tflattenNode(node, name) {\n\t\tif (name in node) {\n\t\t\tnode[name] = JSON.stringify(node[name]);\n\t\t}\n\t}\n\n\t/**\n\t * unflatten value (transform string to object/array)\n\t *\n\t * @param {array} node\n\t * @param {string} name\n\t */\n\tunFlattenNode(node, name) {\n\t\tif (node !== null && (typeof node[name] === 'string')) {\n\t\t\tnode[name] = JSON.parse(node[name]);\n\t\t}\n\t}\n\n\t/**\n\t * replace value in property name by value (fail if property name doesn't exist)\n\t *\n\t * @param {Object} node\n\t * @param {string} name\n\t * @param {*} value\n\t */\n\treplaceValue(node, name, value) {\n\t\tif (name in node) {\n\t\t\tthis.setValue(node, value, name);\n\t\t}\n\t}\n\n}\n\nexport default ObjectInterfacer;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass AbstractObjectException extends ComhonException {\n\n\t/**\n\t *\n\t * @param {ComhonObject} comhonObject\n\t */\n\tconstructor(comhonObject) {\n\t\tconst modelName = comhonObject.getModel().getName();\n\t\tconst message = comhonObject.getModel().isAbstract()\n\t\t\t? `model '${modelName}' is abstract. Objects with abstract model cannot be flagged as loaded`\n\t\t\t: `error AbstractObjectException instanciated but model '${modelName}' is not abstract`;\n\t\tsuper(message, ConstantException.ABSTRACT_OBJECT_EXCEPTION);\n\t}\n\n}\n\nexport default AbstractObjectException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport MainObjectCollection from 'Logic/Object/Collection/MainObjectCollection';\nimport ObjectInterfacer from 'Logic/Interfacer/ObjectInterfacer';\nimport Model from 'Logic/Model/Model';\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ImportException from 'Logic/Exception/Interfacer/ImportException';\nimport ExportException from 'Logic/Exception/Interfacer/ExportException';\nimport AbstractObjectException from 'Logic/Exception/Object/AbstractObjectException';\n\n/**\n * @abstract\n */\nclass AbstractComhonObject {\n\n\t/**\n\t * @type  {Model|ModelArray}\n\t * model associated to comhon object\n\t */\n\tstatic #nextOid = 0;\n\n\t/**\n\t * @type  {Model|ModelArray}\n\t * model associated to comhon object\n\t */\n\t#model;\n\n\t/**\n\t * @type {Object|Array.} all object values\n\t */\n\t#values = new Map();\n\n\t/**\n\t * @type {boolean} determine if comhon object is loaded\n\t */\n\t#isLoaded = false;\n\n\t/**\n\t * @type {boolean[]} references all updated values\n\t *     element value is false if set or replaced value\n\t *     element value is true if deleted value\n\t */\n\t#updatedValues = new Map();\n\n\t/**\n\t * @type {boolean} determine if object is flagged as updated\n\t *     warning! if false, that not necessarily means object is not updated\n\t *     actually a sub-object contained in current object may be updated\n\t */\n\t#isUpdated = false;\n\n\t/**\n\t * @type {integer} unique object id (oid) permit to identify an instance of comhon object or comhon array.\n\t */\n\t#oid;\n\n\t/**\n\t * @param {Model|ModelArray} model\n\t */\n\tconstructor(model) {\n\t\tif (this.constructor === AbstractComhonObject) {\n\t\t\tthrow new Error('can\\'t instanciate abstract class AbstractComhonObject');\n\t\t} else if (this.getClassName() === 'ComhonArray') {\n\t\t\tthis.#values = [];\n\t\t}\n\t\tthis.#model = model;\n\t\tthis.#oid = AbstractComhonObject.#nextOid;\n\t\tAbstractComhonObject.#nextOid++;\n\t}\n\n\t/**\n\t * get class name\n\t *\n\t * @abstract\n\t */\n\tgetClassName() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get object id (oid).\n\t *\n\t * oid permit to identify an instance of comhon object or comhon array.\n\t * oid is not a part of comhon object values, it is not the id describe in model properties.\n\t * (very usefull when visit comhon object to avoid infinite loop (may happened when an object contain itslef)).\n\t *\n\t * @returns {integer}\n\t */\n\tgetOid() {\n\t\treturn this.#oid;\n\t}\n\n\t/***********************************************************************************************\\\n\t|                                                                                               |\n\t|                                        Values Setters                                         |\n\t|                                                                                               |\n\t\\***********************************************************************************************/\n\n\t/**\n\t * set specified value\n\t *\n\t * @param {string} name\n\t * @param {*} value\n\t * @param {boolean} flagAsUpdated if true, flag value as updated\n\t */\n\tsetValue(name, value, flagAsUpdated = true) {\n\t\tif (this._hasToUpdateMainObjectCollection(name)) {\n\t\t\tif (this.hasCompleteId() && MainObjectCollection.getObject(this.getId(), this.#model) === this) {\n\t\t\t\tMainObjectCollection.removeObject(this, false);\n\t\t\t}\n\t\t\tif (Array.isArray(this.#values)) {\n\t\t\t\tthis.#values[name] = value;\n\t\t\t} else {\n\t\t\t\tthis.#values.set(name, value);\n\t\t\t}\n\t\t\tMainObjectCollection.addObject(this, false);\n\t\t} else {\n\t\t\tif (Array.isArray(this.#values)) {\n\t\t\t\tthis.#values[name] = value;\n\t\t\t} else {\n\t\t\t\tthis.#values.set(name, value);\n\t\t\t}\n\t\t}\n\t\tif (flagAsUpdated) {\n\t\t\tthis.#updatedValues.set(name, null);\n\t\t\tthis.#isUpdated = true;\n\t\t} else if (this.#updatedValues.has(name)) {\n\t\t\tthis.#updatedValues.delete(name);\n\t\t\tif (this.#updatedValues.size === 0) {\n\t\t\t\tthis.#isUpdated = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * add value at the end of values\n\t *\n\t * @param {*} value\n\t * @param {boolean} flagAsUpdated\n\t */\n\t_pushValue(value, flagAsUpdated) {\n\t\tif (!Array.isArray(this.#values)) {\n\t\t\tthrow new ComhonException('pushValue is callable only from ComhonArray with a NOT associative model array');\n\t\t}\n\t\tthis.#values.push(value);\n\t\tif (flagAsUpdated) {\n\t\t\tthis.#isUpdated = true;\n\t\t}\n\t}\n\n\t/**\n\t * remove last value from values\n\t *\n\t * @param {boolean} flagAsUpdated\n\t * @returns {*} the last value of array. If array is empty,null will be returned.\n\t */\n\t_popValue(flagAsUpdated) {\n\t\tif (!Array.isArray(this.#values)) {\n\t\t\tthrow new ComhonException('popValue is callable only from ComhonArray with a NOT associative model array');\n\t\t}\n\t\tif (flagAsUpdated) {\n\t\t\tthis.#isUpdated = true;\n\t\t}\n\t\treturn this.#values.pop();\n\t}\n\n\t/**\n\t * add value at the beginning of values\n\t *\n\t * @param {*} value\n\t * @param {boolean} flagAsUpdated\n\t */\n\t_unshiftValue(value, flagAsUpdated) {\n\t\tif (!Array.isArray(this.#values)) {\n\t\t\tthrow new ComhonException('unshiftValue is callable only from ComhonArray with a NOT associative model array');\n\t\t}\n\t\tthis.#values.unshift(value);\n\t\tif (flagAsUpdated) {\n\t\t\tthis.#isUpdated = true;\n\t\t}\n\t}\n\n\t/**\n\t * remove first value from values\n\t *\n\t * @param {boolean} flagAsUpdated\n\t * @returns {*} the first value of array. If array is empty,null will be returned.\n\t */\n\t_shiftValue(flagAsUpdated) {\n\t\tif (!Array.isArray(this.#values)) {\n\t\t\tthrow new ComhonException('shiftValue is callable only from ComhonArray with a NOT associative model array');\n\t\t}\n\t\tif (flagAsUpdated) {\n\t\t\tthis.#isUpdated = true;\n\t\t}\n\t\treturn this.#values.shift();\n\t}\n\n\t/**\n\t * unset specified value\n\t *\n\t * @param {string} name\n\t * @param {boolean} flagAsUpdated\n\t */\n\tunsetValue(name, flagAsUpdated = true) {\n\t\tif (this.hasValue(name)) {\n\t\t\tif (this._hasToUpdateMainObjectCollection(name)) {\n\t\t\t\tMainObjectCollection.removeObject(this);\n\t\t\t}\n\t\t\tif (Array.isArray(this.#values)) {\n\t\t\tdelete this.#values[name];\n\t\t\t} else {\n\t\t\t\tthis.#values.delete(name);\n\t\t\t}\n\t\t\tif (flagAsUpdated) {\n\t\t\t\tthis.#isUpdated = true;\n\t\t\t\tthis.#updatedValues.set(name, null);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * instanciate a AbstractComhonObject and add it to values\n\t *\n\t * @async\n\t * @abstract\n\t * @param {string} name may be a property name (if current object is a ComhonObject) or a key (if current object is a ComhonArray)\n\t * @param {boolean} isLoaded if true, flag value as loaded\n\t * @param {boolean} flagAsUpdated if true, flag value as updated\n\t * @returns {Promise<ComhonObject|ComhonArray>}\n\t */\n\tasync initValue(name, isLoaded = true, flagAsUpdated = true) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * reset values, reset update status and unload object\n\t *\n\t * @abstract\n\t */\n\treset() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * reset values, reset update status and unload object\n\t */\n\t_reset() {\n\t\tif (Array.isArray(this.#values)) {\n\t\t\tthis.#values = [];\n\t\t} else {\n\t\t\tthis.#values = new Map();\n\t\t}\n\t\tthis.#isUpdated = false;\n\t\tthis.#updatedValues = new Map();\n\t\tthis.#isLoaded = false;\n\t}\n\n\t/***********************************************************************************************\\\n\t|                                                                                               |\n\t|                                        Values Getters                                         |\n\t|                                                                                               |\n\t\\***********************************************************************************************/\n\n\t/**\n\t *\n\t * @param {string} name\n\t * @returns {ComhonArray|ComhonObject|*} null if value doesn't exist in values\n\t */\n\tgetValue(name) {\n\t\treturn this.hasValue(name)\n\t\t\t? (Array.isArray(this.#values) ? this.#values[name] : this.#values.get(name))\n\t\t\t: null;\n\t}\n\n\t/**\n\t * get associative array that reference names of updated values\n\t *\n\t * @returns {Map} each key is a property name of an updated value\n\t */\n\tgetUpdatedValues() {\n\t\treturn this.#updatedValues;\n\t}\n\n\t/**\n\t * verify if comhon object has specified value set.\n\t * if value is set and null, return true.\n\t *\n\t * @param {string} name\n\t * @returns {boolean}\n\t */\n\thasValue(name) {\n\t\treturn Array.isArray(this.#values) ? (name in this.#values) : this.#values.has(name);\n\t}\n\n\t/**\n\t * verify if comhon object has specified value set and not null.\n\t * if value is set and null, return false.\n\t *\n\t * @param {string} name\n\t * @returns {boolean}\n\t */\n\tissetValue(name) {\n\t\treturn Array.isArray(this.#values)\n\t\t\t? (name in this.#values && this.#values[name] !== null)\n\t\t\t: (this.#values.has(name)  && this.#values.get(name) !== null);\n\t}\n\n\t/**\n\t * verify if comhon object has all specified values set\n\t *\n\t * @param {string[]} names\n\t * @returns {boolean}\n\t */\n\thasValues(names) {\n\t\tfor (const name of names) {\n\t\t\tif (!this.hasValue(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * get values count\n\t *\n\t * @returns number\n\t */\n\tcount() {\n\t\treturn Array.isArray(this.#values) ? this.#values.length : this.#values.size;\n\t}\n\n\t/**\n\t * get object values and array values that contain objects\n\t *\n\t * @returns {Array.AbstractComhonObject}\n\t */\n\tgetObjectValues() {\n\t\tconst values = new Map();\n\t\tfor (const [key, value] of this) {\n\t\t\tif (value instanceof AbstractComhonObject && value.getUniqueModel() instanceof Model) {\n\t\t\t\tvalues.set(key, value);\n\t\t\t}\n\t\t}\n\t\treturn values;\n\t}\n\n\t\t/***********************************************************************************************\\\n\t\t|                                                                                               |\n\t\t|                                       Iterator functions                                      |\n\t\t|                                                                                               |\n\t\t\\***********************************************************************************************/\n\n\t[Symbol.iterator]() {\n\t\tif (Array.isArray(this.#values)) {\n\t\t\tlet index = -1;\n\t\t\treturn {\n\t\t\t\tnext: () => {\n\t\t\t\t\tindex++;\n\t\t\t\t\treturn {value: [index, this.#values[index]], done: !(index in this.#values)};\n\t\t\t\t}\n\t\t\t};\n\t\t} else {\n\t\t\treturn this.#values[Symbol.iterator]();\n\t\t}\n\t};\n\n\t/***********************************************************************************************\\\n\t|                                                                                               |\n\t|                                      ComhonObject Status                                      |\n\t|                                                                                               |\n\t\\***********************************************************************************************/\n\n\t/**\n\t * verify if comhon object is flagged as updated or if at least one value has been updated\n\t *\n\t * @abstract\n\t * @returns {boolean}\n\t */\n\tisUpdated() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if at least one id value has been updated\n\t *\n\t * @abstract\n\t * @returns {boolean}\n\t */\n\tisIdUpdated() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if a value has been updated\n\t *\n\t * @abstract\n\t * @param {string} name\n\t * @returns {boolean}\n\t */\n\tisUpdatedValue(name) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if object is flagged as updated\n\t *\n\t * do not use this function to known if object is updated (use this.#isUpdated)\n\t *\n\t * @returns {boolean}\n\t */\n\tisFlaggedAsUpdated() {\n\t\treturn this.#isUpdated;\n\t}\n\n\t/**\n\t * verify if a value is flagged as updated\n\t *\n\t * do not use this function to known if a value is updated (use this.#isUpdatedValue)\n\t *\n\t * @param {string} name\n\t * @returns {boolean}\n\t */\n\tisValueFlaggedAsUpdated(name) {\n\t\treturn this.#updatedValues.has(name);\n\t}\n\n\t/**\n\t * reset updated status\n\t *\n\t * @abstract\n\t * @param {boolean} recursive if true visit children comhon objects and reset their updated status\n\t */\n\tresetUpdatedStatus(recursive = true) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * reset updated status of comhon objects recursively\n\t *\n\t * @abstract\n\t * @param {Object} oids\n\t */\n\t_resetUpdatedStatusRecursive(oids) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * reset updated Status (reset only this.#isUpdated and this.#updatedValues)\n\t */\n\t_resetUpdatedStatus() {\n\t\tthis.#isUpdated = false;\n\t\tthis.#updatedValues = new Map();\n\t}\n\n\t/**\n\t * flag value as updated, only if value is set\n\t *\n\t * @param {string} name\n\t * @returns {boolean} true if success\n\t */\n\tflagValueAsUpdated(name) {\n\t\tif (this.hasValue(name)) {\n\t\t\tthis.#isUpdated = true;\n\t\t\tthis.#updatedValues.set(name, null);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * verify if comhon object is loaded\n\t *\n\t * @returns {boolean}\n\t */\n\tisLoaded() {\n\t\treturn this.#isLoaded;\n\t}\n\n\t/**\n\t * set loaded status\n\t *\n\t * @param {boolean} isLoaded\n\t */\n\tsetIsLoaded(isLoaded) {\n\t\tif (isLoaded && !this.#isLoaded) {\n\t\t\tif (this.#model.isAbstract()) {\n\t\t\t\tthrow new AbstractObjectException(this);\n\t\t\t}\n\t\t}\n\t\tthis.#isLoaded = isLoaded;\n\t}\n\n\t/**\n\t * validate object.\n\t * throw exception if object is not valid.\n\t *\n\t * @abstract\n\t */\n\tvalidate() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if object is valid.\n\t *\n\t * @abstract\n\t * @returns {boolean}\n\t */\n\tisValid() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/***********************************************************************************************\\\n\t|                                                                                               |\n\t|                                      Model - Properties                                       |\n\t|                                                                                               |\n\t\\***********************************************************************************************/\n\n\t/**\n\t * do not use this function, it's only used for cast\n\t *\n\t * @param {Model|ModelArray} model\n\t */\n\t_updateModel(model) {\n\t\tthis.#model = model;\n\t}\n\n\t/**\n\t * get model associated to comhon object\n\t *\n\t * @returns {Model|ModelArray}\n\t */\n\tgetModel() {\n\t\treturn this.#model;\n\t}\n\n\t/**\n\t * verify if main object collection has to be updated if value is updated\n\t *\n\t * @abstract\n\t * @param {string} propertyName\n\t * @returns {boolean}\n\t */\n\t_hasToUpdateMainObjectCollection(propertyName) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get unique contained model\n\t *\n\t * @returns {Model|SimpleModel}\n\t */\n\tgetUniqueModel() {\n\t\treturn this.getModel();\n\t}\n\n\t/**\n\t * get current comhon object class and its model name\n\t *\n\t * @abstract\n\t * @returns {string}\n\t */\n\tgetComhonClass() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/***********************************************************************************************\\\n\t|                                                                                               |\n\t|                                Serialization / Deserialization                                |\n\t|                                                                                               |\n\t\\***********************************************************************************************/\n\n\t/**\n\t * load specified value\n\t *\n\t * value must be set and must be a comhon object with serialization\n\t *\n\t * @abstract\n\t * @param {string} name\n\t * @param {string[]} propertiesFilter\n\t * @param {boolean} forceLoad if object is already loaded, force to reload object\n\t * @returns {boolean} true if loading is successfull (loading can fail if object is not serialized)\n\t */\n\tloadValue(name, propertiesFilter = null, forceLoad = false) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/***********************************************************************************************\\\n\t|                                                                                               |\n\t|                                       export / import                                         |\n\t|                                                                                               |\n\t\\***********************************************************************************************/\n\n\t/**\n\t * export comhon object according specified interfacer\n\t *\n\t * @param {Interfacer} interfacer\n\t * @returns {ComhonObject|ComhonArray}\n\t */\n\texport(interfacer) {\n\t\ttry {\n\t\t\treturn this.#model.export(this, interfacer);\n\t\t} catch (e) {\n\t\t\tthrow new ExportException(e);\n\t\t}\n\t}\n\n\t/**\n\t * fill comhon object with values of interfaced object\n\t *\n\t * @async\n\t * @param {*} interfacedObject\n\t * @param {Interfacer} interfacer\n\t * @param {boolean} forceIsolateElements if object to fill is a comhon array,\n\t *     force isolate each elements of imported array\n\t *     (isolated element doesn't share objects instances with others elements)\n\t * @returns {Promise<void>}\n\t */\n\tasync fill(interfacedObject, interfacer, forceIsolateElements = true) {\n\t\ttry {\n\t\t\treturn this.#model.fillObject(this, interfacedObject, interfacer, forceIsolateElements);\n\t\t} catch (e) {\n\t\t\tthrow new ImportException(e);\n\t\t}\n\t}\n\n\t\t/***********************************************************************************************\\\n\t\t|                                                                                               |\n\t\t|                                           toString                                            |\n\t\t|                                                                                               |\n\t\t\\***********************************************************************************************/\n\n\t/**\n\t * stringify object\n\t *\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\ttry {\n\t\t\tconst interfacer = new ObjectInterfacer();\n\t\t\tinterfacer.setPrivateContext(true);\n\t\t\tinterfacer.setVerifyReferences(false);\n\t\t\tinterfacer.setValidate(false);\n\t\t\treturn JSON.stringify(interfacer.export(this), null, 2) + \"\\n\";\n\t\t} catch (e) {\n\t\t\tconsole.log('object can\\'t be stringified because it is invalid : ' + e.getMessage());\n\t\t}\n\t\treturn '';\n\t}\n\n}\n\nexport default AbstractComhonObject;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nclass ComhonDateTime extends Date {\n\n\t/** @type {boolean} */\n\t#isUpdated = false;\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Date}::setDate()\n\t */\n\tsetDate(dayValue) {\n\t\tsuper.setDate(dayValue);\n\t\tthis.#isUpdated = true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Date}::setFullYear()\n\t */\n\tsetFullYear(yearValue, monthValue = null, dateValue = null) {\n\t\tsuper.setFullYear(yearValue, monthValue, dateValue);\n\t\tthis.#isUpdated = true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Date}::setHours()\n\t */\n\tsetHours(hoursValue, minutesValue = null, secondsValue = null, msValue = null) {\n\t\tsuper.setHours(hoursValue, minutesValue, secondsValue, msValue);\n\t\tthis.#isUpdated = true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Date}::setMilliseconds()\n\t */\n\tsetMilliseconds(millisecondsValue) {\n\t\tsuper.setMilliseconds(millisecondsValue);\n\t\tthis.#isUpdated = true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Date}::setMinutes()\n\t */\n\tsetMinutes(minutesValue, secondsValue = null, msValue = null) {\n\t\tsuper.setMinutes(minutesValue, secondsValue, msValue);\n\t\tthis.#isUpdated = true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Date}::setMonth()\n\t */\n\tsetMonth(monthValue, dayValue = null) {\n\t\tsuper.setMonth(monthValue, dayValue);\n\t\tthis.#isUpdated = true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Date}::setSeconds()\n\t */\n\tsetSeconds(secondsValue, msValue = null) {\n\t\tsuper.setSeconds(secondsValue, msValue);\n\t\tthis.#isUpdated = true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Date}::setTime()\n\t */\n\tsetTime(timeValue) {\n\t\tsuper.setTime(timeValue);\n\t\tthis.#isUpdated = true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Date}::setUTCDate()\n\t */\n\tsetUTCDate(dayValue) {\n\t\tsuper.setUTCDate(dayValue);\n\t\tthis.#isUpdated = true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Date}::setUTCFullYear()\n\t */\n\tsetUTCFullYear(yearValue, monthValue = null, dayValue = null) {\n\t\tsuper.setUTCFullYear(yearValue, monthValue, dayValue);\n\t\tthis.#isUpdated = true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Date}::setUTCHours()\n\t */\n\tsetUTCHours(hoursValue, minutesValue = null, secondsValue = null, msValue = null) {\n\t\tsuper.setUTCHours(hoursValue, minutesValue, secondsValue, msValue);\n\t\tthis.#isUpdated = true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Date}::setUTCMilliseconds()\n\t */\n\tsetUTCMilliseconds(millisecondsValue) {\n\t\tsuper.setUTCMilliseconds(millisecondsValue);\n\t\tthis.#isUpdated = true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Date}::setUTCMinutes()\n\t */\n\tsetUTCMinutes(minutesValue, secondsValue = null, msValue = null) {\n\t\tsuper.setUTCMinutes(minutesValue, secondsValue, msValue);\n\t\tthis.#isUpdated = true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Date}::setUTCMonth()\n\t */\n\tsetUTCMonth(monthValue, dayValue = null) {\n\t\tsuper.setUTCMonth(monthValue, dayValue);\n\t\tthis.#isUpdated = true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Date}::setUTCSeconds()\n\t */\n\tsetUTCSeconds(secondsValue, msValue = null) {\n\t\tsuper.setUTCSeconds(secondsValue, msValue);\n\t\tthis.#isUpdated = true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Date}::setYear()\n\t */\n\tsetYear(yearValue) {\n\t\tsuper.setYear(yearValue);\n\t\tthis.#isUpdated = true;\n\t}\n\n\t/**\n\t * verify if datetime has been updated\n\t *\n\t * @returns {boolean}\n\t */\n\tisUpdated() {\n\t\treturn this.#isUpdated;\n\t}\n\n\t/**\n\t * reset updated status\n\t */\n\tresetUpdatedStatus() {\n\t\tthis.#isUpdated = false;\n\t}\n\n}\n\nexport default ComhonDateTime;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport SimpleModel from 'Logic/Model/SimpleModel';\nimport ComhonDateTime from 'Logic/Object/ComhonDateTime';\nimport UnexpectedValueTypeException from 'Logic/Exception/Value/UnexpectedValueTypeException';\n\nclass ModelDateTime extends SimpleModel {\n\n\t/** @type {string} */\n\tstatic get ID() {return 'dateTime';}\n\n\tconstructor() {\n\t\tsuper(ModelDateTime.ID);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {SimpleModel}::exportSimple()\n\t */\n\texportSimple(value, interfacer) {\n\t\tif (value === null) {\n\t\t\treturn value;\n\t\t}\n\t\treturn this.toString(value);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {SimpleModel}::_importScalarValue()\n\t */\n\t_importScalarValue(value, interfacer) {\n\t\tif (typeof value !== 'string') {\n\t\t\tthrow new UnexpectedValueTypeException(value, 'string');\n\t\t}\n\t\treturn this.fromString(value);\n\t}\n\n\t/**\n\t * instanciate ComhonDateTime object\n\t *\n\t * @param {string} time\n\t * @returns {ComhonDateTime}\n\t */\n\tfromString(time) {\n\t\treturn new ComhonDateTime(time);\n\t}\n\n\t/**\n\t *\n\t * @param {ComhonDateTime} dateTime\n\t * @param {string} dateFormat\n\t * @returns {string}\n\t */\n\ttoString(dateTime) {\n\t\treturn dateTime.toISOString();\n\t}\n\n\t/**\n\t * verify if value is a ComhonDateTime object\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tverifValue(value) {\n\t\tif (!(value instanceof ComhonDateTime)) {\n\t\t\tthrow new UnexpectedValueTypeException(value, 'ComhonDateTime');\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport default ModelDateTime;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * @abstract\n */\nclass Restriction {\n\n\tconstructor() {\n\t\tif (this.constructor === Restriction) {\n\t\t\tthrow new Error('can\\'t instanciate abstract class Restriction');\n\t\t}\n  }\n\n\t/**\n\t * verify if specified value satisfy restriction\n\t *\n\t * @abstract\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tsatisfy(value) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if specified restriction is equal to this\n\t *\n\t * @abstract\n\t * @param {Restriction} restriction\n\t * @returns {boolean}\n\t */\n\tisEqual(restriction) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if specified model can use this restriction\n\t *\n\t * @abstract\n\t * @param {AbstractModel} model\n\t * @returns {boolean}\n\t */\n\tisAllowedModel(model) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * stringify restriction and value\n\t *\n\t * @abstract\n\t * @param {*} value\n\t * @returns {string}\n\t */\n\ttoMessage(value) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * stringify restriction\n\t *\n\t * @abstract\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if restrictions given are equals (compare restrictions stored on same keys)\n\t *\n\t * @param {Restriction[]} firstRestrictions\n\t * @param {Restriction[]} secondRestrictions\n\t * @returns {boolean} if true, all restrictions are equals\n\t */\n\tstatic compare(firstRestrictions, secondRestrictions) {\n\t\tif (firstRestrictions.length !== secondRestrictions.length) {\n\t\t\treturn false;\n\t\t}\n\t\tconst firstRestrictionsMap = {};\n\t\tfor (const restriction of firstRestrictions) {\n\t\t\tfirstRestrictionsMap[restriction.constructor.name] = restriction;\n\t\t}\n\t\tfor (const restriction of secondRestrictions) {\n\t\t\tconst key = restriction.constructor.name;\n\t\t\tif (!(key in firstRestrictionsMap) || !restriction.isEqual(firstRestrictionsMap[key])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * find first restriction that satisfy given value\n\t *\n\t * @param {Restriction[]} restrictions\n\t * @param {*} value\n\t * @returns {Restriction|void} null if all restrictions are satisfied\n\t */\n\tstatic getFirstNotSatisifed(restrictions, value) {\n\t\tfor (const restriction of restrictions) {\n\t\t\tif (!restriction.satisfy(value)) {\n\t\t\t\treturn restriction;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n}\n\nexport default Restriction;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport UnexpectedValueTypeException from 'Logic/Exception/Value/UnexpectedValueTypeException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass NotSatisfiedRestrictionException extends UnexpectedValueTypeException {\n\n\t/**\n\t * @type {*}\n\t */\n\t#value;\n\n\t/**\n\t * @type {Restriction}\n\t */\n\t#restriction;\n\n\t/**\n\t * @type {integer}\n\t */\n\t#increment;\n\n\t/**\n\t * @param {*} value\n\t * @param {Restriction} restriction\n\t * @param {integer} increment\n\t */\n\tconstructor(value, restriction, increment = 0) {\n\t\tsuper(null, null, null, restriction.toMessage(value, increment), ConstantException.NOT_SATISFIED_RESTRICTION_EXCEPTION);\n\t\tthis.#value = value;\n\t\tthis.#restriction = restriction;\n\t\tthis.#increment = increment;\n\t}\n\n\t/**\n\t * get value\n\t *\n\t * @returns {*}\n\t */\n\tgetValue() {\n\t\treturn this.#value;\n\t}\n\n\t/**\n\t * get restriction\n\t *\n\t * @returns {Restriction}\n\t */\n\tgetRestriction() {\n\t\treturn this.#restriction;\n\t}\n\n\t/**\n\t * get increment\n\t *\n\t * @returns {integer}\n\t */\n\tgetIncrement() {\n\t\treturn this.#increment;\n\t}\n\n}\n\nexport default NotSatisfiedRestrictionException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport UnexpectedValueTypeException from 'Logic/Exception/Value/UnexpectedValueTypeException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass UnexpectedArrayException extends UnexpectedValueTypeException {\n\n\t/** @type {ModelArray} */\n\t#modelArray;\n\n\t/** @type {integer} */\n\t#depth;\n\n\t/**\n\t *\n\t * @param {ComhonArray} objectArray\n\t * @param {ModelArray} modelArray\n\t * @param {integer} depth\n\t */\n\tconstructor(objectArray, modelArray, depth) {\n\t\tlet message = '';\n\t\tlet part;\n\t\tlet objectModel = objectArray.getModel();\n\t\tif (depth > 0 && objectArray.getClassName() === 'ComhonArray') {\n\t\t\tobjectModel = objectModel.getModel(depth - 1);\n\t\t}\n\n\t\tif (objectModel.getClassName() !== 'ModelArray') {\n\t\t\tmessage = `model must be a ModelArray, model '${objectModel.getName()}' given. `;\n\t\t} else if (modelArray.isAssociative() !== objectModel.isAssociative()) {\n\t\t\tpart = modelArray.isAssociative() ? 'must be' : 'must not be';\n\t\t\tmessage = `ModelArray ${part} associative. `;\n\t\t} else if (modelArray.getElementName() !== objectModel.getElementName()) {\n\t\t\tmessage = `ModelArray element name must be '${modelArray.getElementName()}', '${objectModel.getElementName()}' given. `;\n\t\t} else if (modelArray.isNotNullElement() !== objectModel.isNotNullElement()) {\n\t\t\tpart = modelArray.isNotNullElement() ? 'must have' : 'must not have';\n\t\t\tmessage = `ModelArray ${part} not null element. `;\n\t\t} else if (modelArray.isIsolatedElement() !== objectModel.isIsolatedElement()) {\n\t\t\tpart = modelArray.isNotNullElement() ? 'must be' : 'must not be';\n\t\t\tmessage = `ModelArray ${part} isolated element. `;\n\t\t} else if ((objectModel.getModel().getClassName() !== 'Model') || !UnexpectedArrayException._isInerited(objectModel, modelArray)) {\n\t\t\tconst trustModelName = modelArray.getModelName();\n\t\t\tconst objectModelName = objectModel.getModel().getClassName() === 'ModelArray'\n\t\t\t\t? 'ModelArray' : `'${objectModel.getModel().getName()}'`;\n\t\t\tmessage = `model must be a '${trustModelName}', model '${objectModelName}' given. `;\n\t\t} else {\n\t\t\tlet expectedRestriction = '';\n\t\t\tfor (const restriction of modelArray.getArrayRestrictions()) {\n\t\t\t\texpectedRestriction += ' - ' + restriction.toString() + '(on comhon array)\\n';\n\t\t\t}\n\t\t\tfor (const restriction of modelArray.getElementRestrictions()) {\n\t\t\t\texpectedRestriction += ' - ' + restriction.toString() + '(on elements)\\n';\n\t\t\t}\n\t\t\tlet actualRestriction = '';\n\t\t\tif (objectArray.getModel() instanceof modelArray ) {\n\t\t\t\tfor (const restriction of objectArray.getModel().getArrayRestrictions()) {\n\t\t\t\t\tactualRestriction += ' - ' + restriction.toString() + '(on comhon array)\\n';\n\t\t\t\t}\n\t\t\t\tfor (const restriction of objectArray.getModel().getElementRestrictions()) {\n\t\t\t\t\tactualRestriction += ' - ' + restriction.toString() + '(on elements)\\n';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmessage = `value ${objectArray.getClassName()} must have restrictions :\\n`\n\t\t\t\t+ expectedRestriction\n\t\t\t\t+ \"restrictions given : \\n\"\n\t\t\t\t+ actualRestriction;\n\t\t}\n\t\tif (depth > 0) {\n\t\t\tmessage += 'array depth : ' + depth;\n\t\t}\n\n\t\tsuper(message, ConstantException.UNEXPECTED_VALUE_TYPE_EXCEPTION);\n\t\tthis.#modelArray = modelArray;\n\t\tthis.#depth = depth;\n\t}\n\n\t/**\n\t *\n\t * @param {Model} objectModel\n\t * @param {ModelArray} modelArray\n\t * @returns {boolean}\n\t */\n\tstatic _isInerited(objectModel, modelArray) {\n\t\ttry {\n\t\t\tconst model = modelArray.getLoadedModel();\n\t\t\treturn objectModel.getModel().isInheritedFrom(model);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @returns {ModelArray}\n\t */\n\tgetModelArray() {\n\t\treturn this.#modelArray;\n\t}\n\n\t/**\n\t *\n\t * @returns {integer}\n\t */\n\tgetDepth() {\n\t\treturn this.#depth;\n\t}\n\n}\n\nexport default UnexpectedArrayException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport AbstractComhonObject from 'Logic/Object/AbstractComhonObject';\nimport ComhonDateTime from 'Logic/Object/ComhonDateTime';\nimport SimpleModel from 'Logic/Model/SimpleModel';\nimport ModelComplex from 'Logic/Model/ModelComplex';\nimport ModelArray from 'Logic/Model/ModelArray';\nimport ModelDateTime from 'Logic/Model/ModelDateTime';\nimport Model from 'Logic/Model/Model';\nimport Restriction from 'Logic/Model/Restriction/Restriction';\nimport NotSatisfiedRestrictionException from 'Logic/Exception/Value/NotSatisfiedRestrictionException';\nimport UnexpectedValueTypeException from 'Logic/Exception/Value/UnexpectedValueTypeException';\nimport UnexpectedArrayException from 'Logic/Exception/Value/UnexpectedArrayException';\nimport ComhonException from 'Logic/Exception/ComhonException';\n\nclass ComhonArray extends AbstractComhonObject {\n\n\t/**\n\t *\n\t * @param {Model|ModelArray|SimpleModel} model can be a model name or an instance of model\n\t * @param {boolean} isLoaded\n\t * @param {string} elementName\n\t * @param {boolean} isAssociative not used if first parameter is instance of ModelArray\n\t */\n\tconstructor(model, isLoaded = true, elementName = null, isAssociative = false) {\n\t\tlet objectModel;\n\t\tif (model instanceof ModelArray) {\n\t\t\tobjectModel = model;\n\t\t} else {\n\t\t\tif (!(model instanceof Model) && !(model instanceof SimpleModel)) {\n\t\t\t\tthrow new ComhonException('invalid model, ComhonArray must have ModelUnique or ModelArray');\n\t\t\t}\n\t\t\tobjectModel = new ModelArray(model, isAssociative, elementName === null ? model.getShortName() : elementName);\n\t\t}\n\t\t// ensure that unique model is loaded\n\t\tobjectModel.getLoadedUniqueModel();\n\t\tsuper(objectModel);\n\t\tthis.setIsLoaded(isLoaded);\n\t}\n\n\t/**\n\t * get class name\n\t *\n\t * @returns {string}\n\t */\n\tgetClassName() {\n\t\treturn 'ComhonArray';\n\t}\n\n\t/**\n\t * get unique contained model\n\t *\n\t * @returns {Model|SimpleModel}\n\t */\n\tgetUniqueModel() {\n\t\treturn this.getModel().getLoadedUniqueModel();\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::reset()\n\t */\n\treset() {\n\t\tthis._reset();\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::loadValue()\n\t */\n\tloadValue(key, propertiesFilter = null, forceLoad = false) {\n\t\tif (!(this.getModel() instanceof Model)) {\n\t\t\tthrow new ComhonException(`cannot load value, ComhonArray must contain comhon objects`);\n\t\t}\n\t\tif (!this.issetValue(key)) {\n\t\t\tthrow new ComhonException(`cannot load value '${key}', value not set`);\n\t\t}\n\t\tconst value = this.getValue(key);\n\t\treturn value.load(propertiesFilter, forceLoad);\n\t}\n\n\t/**\n\t * add value at the end of array this.values\n\t *\n\t * @param {*} value\n\t * @param {boolean} flagAsUpdated\n\t */\n\tpushValue(value, flagAsUpdated = true) {\n\t\ttry {\n\t\t\tthis.getModel().verifElementValue(value);\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotSatisfiedRestrictionException) {\n\t\t\t\tthrow new NotSatisfiedRestrictionException(e.getValue(), e.getRestriction(), e.getIncrement());\n\t\t\t} else if (e instanceof UnexpectedArrayException) {\n\t\t\t\tthrow new UnexpectedArrayException(value, e.getModelArray(), e.getDepth());\n\t\t\t} else if (e instanceof UnexpectedValueTypeException) {\n\t\t\t\tthrow new UnexpectedValueTypeException(value, e.getExpectedType());\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t\tthis._pushValue(value, flagAsUpdated);\n\t}\n\n\t/**\n\t * remove last value from array this.values\n\t *\n\t * @param {boolean} flagAsUpdated\n\t * @returns {*} the last value of array. If array is empty,null will be returned.\n\t */\n\tpopValue(flagAsUpdated = true) {\n\t\treturn this._popValue(flagAsUpdated);\n\t}\n\n\t/**\n\t * add value at the beginning of array this.values\n\t *\n\t * @param {*} value\n\t * @param {boolean} flagAsUpdated\n\t */\n\tunshiftValue(value, flagAsUpdated = true) {\n\t\ttry {\n\t\t\tthis.getModel().verifElementValue(value);\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotSatisfiedRestrictionException) {\n\t\t\t\tthrow new NotSatisfiedRestrictionException(e.getValue(), e.getRestriction(), e.getIncrement());\n\t\t\t} else if (e instanceof UnexpectedArrayException) {\n\t\t\t\tthrow new UnexpectedArrayException(value, e.getModelArray(), e.getDepth());\n\t\t\t} else if (e instanceof UnexpectedValueTypeException) {\n\t\t\t\tthrow new UnexpectedValueTypeException(value, e.getExpectedType());\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t\tthis._unshiftValue(value, flagAsUpdated);\n\t}\n\n\t/**\n\t * remove first value from array this.values\n\t *\n\t * @param {boolean} flagAsUpdated\n\t * @returns {*} the first value of array. If array is empty,null will be returned.\n\t */\n\tshiftValue(flagAsUpdated = true) {\n\t\treturn this._shiftValue(flagAsUpdated);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::setValue()\n\t */\n\tsetValue(name, value, flagAsUpdated = true) {\n\t\ttry {\n\t\t\tthis.getModel().verifElementValue(value);\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotSatisfiedRestrictionException) {\n\t\t\t\tthrow new NotSatisfiedRestrictionException(e.getValue(), e.getRestriction(), e.getIncrement());\n\t\t\t} else if (e instanceof UnexpectedArrayException) {\n\t\t\t\tthrow new UnexpectedArrayException(value, e.getModelArray(), e.getDepth());\n\t\t\t} else if (e instanceof UnexpectedValueTypeException) {\n\t\t\t\tthrow new UnexpectedValueTypeException(value, e.getExpectedType());\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t\tsuper.setValue(name, value, flagAsUpdated);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::initValue()\n\t */\n\tasync initValue(key, isLoaded = true, flagAsUpdated = true) {\n\t\tconst value = await this.getInstanceValue(isLoaded);\n\t\tthis.setValue(key, value, flagAsUpdated);\n\t\treturn this.getValue(key);\n\t}\n\n\t\t/***********************************************************************************************\\\n\t\t|                                                                                               |\n\t\t|                                        Values Getters                                         |\n\t\t|                                                                                               |\n\t\t\\***********************************************************************************************/\n\n\t/**\n\t * get instance value\n\t *\n\t * may only be applied on array that contain a complex model (model instance of ModelComplex)\n\t *\n\t * @async\n\t * @param {string} name\n\t * @param {boolean} isLoaded\n\t * @returns {Promise<ComhonObject|ComhonArray>}\n\t */\n\tasync getInstanceValue(isLoaded = true) {\n\t\tconst containedModel = await this.getModel().getModel();\n\t\tif (!(containedModel instanceof ModelComplex)) {\n\t\t\tthrow new ComhonException(\"ComhonArray contain a simple model and can't have instance value\");\n\t\t}\n\t\treturn containedModel.getObjectInstance(isLoaded);\n\t}\n\n\t\t/***********************************************************************************************\\\n\t\t|                                                                                               |\n\t\t|                                      ComhonArray Status                                      |\n\t\t|                                                                                               |\n\t\t\\***********************************************************************************************/\n\n\t/**\n\t * verify if a value may be added to comhon array\n\t *\n\t * @param {ComhonArray} array\n\t * @returns {boolean}\n\t */\n\tcanAddValue() {\n\t\tfor (const restriction of this.getModel().getArrayRestrictions()) {\n\t\t\tif (!restriction.satisfy(this, 1)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * verify if a value may be removed from comhon array\n\t *\n\t * @param {ComhonArray} array\n\t * @returns {boolean}\n\t */\n\tcanRemoveValue() {\n\t\tif (this.count() === 0) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (const restriction of this.getModel().getArrayRestrictions()) {\n\t\t\tif (!restriction.satisfy(this, -1)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::resetUpdatedStatus()\n\t */\n\tresetUpdatedStatus(recursive = true) {\n\t\tif (recursive) {\n\t\t\tconst oids = {};\n\t\t\tthis._resetUpdatedStatusRecursive(oids);\n\t\t} else {\n\t\t\tthis._resetUpdatedStatus();\n\t\t\tif (this.getModel().getModel() instanceof ModelDateTime) {\n\n\t\t\t\tfor (const propAndValue of this) {\n\t\t\t\t\tif (propAndValue[1] instanceof ComhonDateTime) {\n\t\t\t\t\t\tpropAndValue[1].resetUpdatedStatus(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::_resetUpdatedStatusRecursive()\n\t */\n\t_resetUpdatedStatusRecursive(oids) {\n\t\tif ((this.getOid() in oids)) {\n\t\t\tif (oids[this.getOid()] > 0) {\n\t\t\t\tconsole.log('Warning loop detected');\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\toids[this.getOid()] = 0;\n\t\t}\n\t\toids[this.getOid()]++;\n\t\tthis._resetUpdatedStatus();\n\t\tif (this.getModel().getModel() instanceof ModelDateTime) {\n\n\t\t\tfor (const propAndValue of this) {\n\t\t\t\tif (propAndValue[1] instanceof ComhonDateTime) {\n\t\t\t\t\tpropAndValue[1].resetUpdatedStatus(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.getModel().getModel().isComplex()) {\n\n\t\t\tfor (const propAndValue of this) {\n\t\t\t\tif (propAndValue[1] instanceof AbstractComhonObject) {\n\t\t\t\t\tpropAndValue[1]._resetUpdatedStatusRecursive(oids);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\toids[this.getOid()]--;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::isUpdated()\n\t */\n\tisUpdated() {\n\t\tif (!this.isFlaggedAsUpdated()) {\n\t\t\tif (this.getModel().getModel().isComplex()) {\n\n\t\t\t\tfor (const propAndValue of this) {\n\t\t\t\t\tif ((propAndValue[1] instanceof AbstractComhonObject) && propAndValue[1].isUpdated()) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.getModel().getModel() instanceof ModelDateTime) {\n\n\t\t\t\tfor (const propAndValue of this) {\n\t\t\t\t\tif ((propAndValue[1] instanceof ComhonDateTime) && propAndValue[1].isUpdated()) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.isFlaggedAsUpdated();\n\t}\n\n\t/**\n\t * verify if at least one id value has been updated among all values\n\t *\n\t * @returns {boolean}\n\t */\n\tisIdUpdated() {\n\t\tif (!this.isFlaggedAsUpdated() && this.getModel().getModel().isComplex()) {\n\n\t\t\tfor (const propAndValue of this) {\n\t\t\t\tif ((propAndValue[1] instanceof AbstractComhonObject) && propAndValue[1].isIdUpdated()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.isFlaggedAsUpdated();\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::isUpdatedValue()\n\t */\n\tisUpdatedValue(key) {\n\t\tif (!this.isFlaggedAsUpdated()) {\n\t\t\tif (this.getModel().getModel().isComplex()) {\n\t\t\t\tconst value = this.getValue(key);\n\t\t\t\tif ((value instanceof AbstractComhonObject) && value.isUpdated()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.getModel().getModel() instanceof ModelDateTime) {\n\t\t\t\tconst value = this.getValue(key);\n\t\t\t\tif ((value instanceof ComhonDateTime) && value.isUpdated()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.isFlaggedAsUpdated();\n\t}\n\n\t/**\n\t * validate comhon array.\n\t *\n\t * validation concern only comhon array restrictions.\n\t * throw exception if comhon array is not valid.\n\t */\n\tvalidate() {\n\t\tconst restriction = Restriction.getFirstNotSatisifed(this.getModel().getArrayRestrictions(), this);\n\t\tif (restriction !== null) {\n\t\t\tthrow new NotSatisfiedRestrictionException(this, restriction);\n\t\t}\n\t}\n\n\t/**\n\t * verify if comhon array is valid.\n\t *\n\t * validation concern only comhon array restrictions.\n\t *\n\t * @returns {boolean}\n\t */\n\tisValid() {\n\t\treturn Restriction.getFirstNotSatisifed(this.getModel().getArrayRestrictions(), this) === null;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::getComhonClass()\n\t */\n\tgetComhonClass() {\n\t\treturn `ComhonArray(${this.getModel().getUniqueModelName()})`;\n\t}\n\n\t\t/***********************************************************************************************\\\n\t\t|                                                                                               |\n\t\t|                                      Model - Properties                                       |\n\t\t|                                                                                               |\n\t\t\\***********************************************************************************************/\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::_hasToUpdateMainObjectCollection()\n\t */\n\t_hasToUpdateMainObjectCollection(propertyName) {\n\t\treturn false;\n\t}\n\n}\n\nexport default ComhonArray;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\n\nclass HTTPException extends ComhonException {\n\n  /**\n   *\n   * @param {XMLHttpRequest} xhr\n   * @param {string} message\n   */\n  constructor(xhr, message = '') {\n    super(message === '' ? xhr.responseText : message, xhr.status);\n  }\n\n}\n\nexport default HTTPException;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Requester from 'Logic/Requester/Requester';\nimport HTTPException from 'Logic/Exception/HTTP/HTTPException';\n\nclass ApiModelNameManager {\n\n\n\t/**\n\t * @var {Array}\n\t */\n\t#apiModels = [];\n\n\t/**\n\t * @var {Object}\n\t */\n\t#apiToComhon = {};\n\n\t/**\n\t * @var {Object}\n\t */\n\t#comhonToApi = {};\n\n\n\n\t/**\n\t * get fully qualified model name according given API model name\n\t *\n\t * @param {string} apiModelName API model name\n\t * @returns {string} fully qualified model name\n\t */\n  getModelName(apiModelName) {\n      return  this.#apiToComhon[apiModelName] ? this.#apiToComhon[apiModelName] : null;\n  }\n\n\t/**\n\t * get API model name according given fully qualified model name\n\t *\n\t * @param {string} modelName fully qualified model name\n\t * @returns {string} API model name\n\t */\n\tgetApiModelName(modelName) {\n\t\t\treturn  this.#comhonToApi[modelName] ? this.#comhonToApi[modelName] : null;\n\t}\n\n\t/**\n\t * get list, from server, that contain model names and their API model names\n\t *\n\t * @async\n\t * @param {boolean} allowUnauthorized if false and server response status is 401, an exception is thrown\n\t * @returns {Array.Object} retrieved manifest\n\t */\n\tasync getApiModelNames(allowUnauthorized = true) {\n\t\tconst xhr = await Requester.get('models');\n\t\tif (xhr.status === 401) {\n      if (!allowUnauthorized) {\n  \t\t\tthrow new HTTPException(xhr, 'Unauthorized to retrieve models list');\n      }\n\t\t\treturn this.#apiModels;\n\t\t}\n\t\tif (xhr.status !== 200) {\n\t\t\tthrow new HTTPException(xhr, 'unknown server error when trying retrieve models list');\n\t\t}\n\t\tthis.#apiModels = JSON.parse(xhr.responseText);\n\t\tthis.#apiToComhon = {};\n\t\tthis.#comhonToApi = {};\n\t\tfor (const apiModel of this.#apiModels) {\n\t\t\tif (apiModel.api_model_name) {\n\t\t\t\tthis.#apiToComhon[apiModel.api_model_name] = apiModel.comhon_model_name;\n\t\t\t\tthis.#comhonToApi[apiModel.comhon_model_name] = apiModel.api_model_name;\n\t\t\t} else {\n\t\t\t\tthis.#apiToComhon[apiModel.comhon_model_name] = apiModel.comhon_model_name;\n\t\t\t\tthis.#comhonToApi[apiModel.comhon_model_name] = apiModel.comhon_model_name;\n\t\t\t}\n\t\t}\n\t\treturn this.#apiModels;\n  }\n\n}\n\nexport default new ApiModelNameManager();\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass MissingRequiredValueException extends ComhonException {\n\n\t/**\n\t *\n\t * @param {ComhonObject} object\n\t * @param {string} propertyName\n\t * @param {string} unset\n\t */\n\tconstructor(object, propertyName, unset = false) {\n\t\tconst message = unset\n\t\t\t? `impossible to unset required value '${propertyName}' on comhon object with model '${object.getModel().getName()}'`\n\t\t\t: `missing required value '${propertyName}' on comhon object with model '${object.getModel().getName()}'`;\n\t\tsuper(message, ConstantException.MISSING_REQUIRED_VALUE_EXCEPTION);\n\t}\n\n}\n\nexport default MissingRequiredValueException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass ConflictValuesException extends ComhonException {\n\n\t/**\n\t *\n\t * @param {Model} model\n\t * @param {string[]} propertiesNames\n\t */\n\tconstructor(model, propertiesNames) {\n\t\tconst message = 'properties values ' + JSON.stringify(propertiesNames)\n\t\t\t+ ` cannot coexist for model '${model.getName()}'`;\n\t\tsuper(message, ConstantException.CONFLICT_VALUES_EXCEPTION);\n\t}\n\n}\n\nexport default ConflictValuesException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass DependsValuesException extends ComhonException {\n\n\t/**\n\t * propertyOne depends on propertyTwo\n\t *\n\t * @param {string} propertyOne\n\t * @param {string} propertyTwo\n\t * @param {boolean} unset\n\t */\n\tconstructor(propertyOne, propertyTwo, unset = false) {\n\t\tconst message = unset ? `property value '${propertyOne}' can't be unset when property value '${propertyTwo}' is set`\n\t\t\t: `property value '${propertyOne}' can't be set without property value '${propertyTwo}'`;\n\t\tsuper(message, ConstantException.DEPENDS_VALUES_EXCEPTION);\n\t}\n\n}\n\nexport default DependsValuesException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass CastComhonObjectException extends ComhonException {\n\n\t/**\n\t * @param {Model} sourceModel\n\t * @param {Model} destModel\n\t */\n\tconstructor(sourceModel, destModel) {\n\t\tconst message = `Cannot cast object, '${sourceModel.getName()}' is not inherited from '${destModel.getName()}'`;\n\t\tsuper(message, ConstantException.CAST_EXCEPTION);\n\t}\n\n}\n\nexport default CastComhonObjectException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport AbstractComhonObject from 'Logic/Object/AbstractComhonObject';\nimport ComhonDateTime from 'Logic/Object/ComhonDateTime';\nimport ComhonArray from 'Logic/Object/ComhonArray';\nimport MainObjectCollection from 'Logic/Object/Collection/MainObjectCollection';\nimport Model from 'Logic/Model/Model';\nimport ModelComplex from 'Logic/Model/ModelComplex';\nimport ApiModelNameManager from 'Logic/Model/Manager/ApiModelNameManager';\nimport Requester from 'Logic/Requester/Requester';\nimport ObjectInterfacer from 'Logic/Interfacer/ObjectInterfacer';\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport NotSatisfiedRestrictionException from 'Logic/Exception/Value/NotSatisfiedRestrictionException';\nimport UnexpectedArrayException from 'Logic/Exception/Value/UnexpectedArrayException';\nimport UnexpectedValueTypeException from 'Logic/Exception/Value/UnexpectedValueTypeException';\nimport MissingRequiredValueException from 'Logic/Exception/Object/MissingRequiredValueException';\nimport ConflictValuesException from 'Logic/Exception/Object/ConflictValuesException';\nimport DependsValuesException from 'Logic/Exception/Object/DependsValuesException';\nimport CastComhonObjectException from 'Logic/Exception/Model/CastComhonObjectException';\nimport ArgumentException from 'Logic/Exception/ArgumentException';\nimport AbstractObjectException from 'Logic/Exception/Object/AbstractObjectException';\nimport HTTPException from 'Logic/Exception/HTTP/HTTPException';\n\nclass ComhonObject extends AbstractComhonObject {\n\n\t/**\n\t * @type {boolean} determine if current object has been casted\n\t */\n\t#isCasted = false;\n\n\t/**\n\t *\n\t * @param {Model} model can be a model name or an instance of model\n\t * @param {boolean} isLoaded\n\t */\n\tconstructor(model, isLoaded = true) {\n\t\tif (!(model instanceof Model)) {\n\t\t\tthrow new ComhonException('invalid model, ComhonObject must have instance of Model');\n\t\t}\n\t\tif (model.getClassName() === 'ModelRoot') {\n\t\t\tthrow new ComhonException('invalid model, ComhonObject cannot have instance of ModelRoot');\n\t\t}\n\t\tif (!model.isLoaded()) {\n\t\t\t\tthrow new ComhonException(`model '${model.getName()}' not loaded`)\n\t\t}\n\t\tsuper(model);\n\n\t\tfor (const property of model.getPropertiesWithDefaultValues()) {\n\t\t\tthis.setValue(property.getName(), property.getDefaultValue(), false);\n\t\t}\n\t\tthis.setIsLoaded(isLoaded);\n\t}\n\n\t/**\n\t * get class name\n\t *\n\t * @returns {string}\n\t */\n\tgetClassName() {\n\t\treturn 'ComhonObject';\n\t}\n\n\t\t/***********************************************************************************************\\\n\t\t|                                                                                               |\n\t\t|                                        Values Setters                                         |\n\t\t|                                                                                               |\n\t\t\\***********************************************************************************************/\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::reset()\n\t *\n\t * @param {boolean} resetId if false and object has id, object is reset except id\n\t */\n\treset(resetId = true) {\n\t\tconst values = new Map();\n\t\tif (this.getModel().hasIdProperties())  {\n\t\t\tif (resetId) {\n\t\t\t\tif (this.getModel().isMain()) {\n\t\t\t\t\tMainObjectCollection.removeObject(this, false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (const property of this.getModel().getIdProperties()) {\n\t\t\t\t\tif (this.issetValue(property.getName())) {\n\t\t\t\t\t\tvalues.set(property.getName(), this.getValue(property.getName()));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const property of this.getModel().getPropertiesWithDefaultValues()) {\n\t\t\tvalues.set(property.getName(), property.getDefaultValue());\n\t\t}\n\t\tthis._reset();\n\t\tlet key, value;\n\t\tfor ([key, value] of values) {\n\t\t\tthis.setValue(key, value, false);\n\t\t}\n\t}\n\n\t/**\n\t * set id (model associated to comhon object must have at least one id property)\n\t *\n\t * @param {*} id\n\t * @param {boolean} flagAsUpdated\n\t * @throws {ComhonException}\n\t */\n\tsetId(id, flagAsUpdated = true) {\n\t\tif (!this.getModel().hasIdProperties()) {\n\t\t\tthrow new ComhonException(`cannot set id. model ${this.getModel().getName()} doesn't have id property`);\n\t\t}\n\t\tif (this.getModel().hasUniqueIdProperty()) {\n\t\t\tthis.setValue(this.getModel().getUniqueIdProperty().getName(), id, flagAsUpdated);\n\t\t}\n\t\telse {\n\t\t\tconst idValues = this.getModel().decodeId(id);\n\t\t\tlet i = 0;\n\t\t\tfor (const property of this.getModel().getIdProperties()) {\n\t\t\t\tthis.setValue(property.getName(), idValues[i], flagAsUpdated);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::setValue()\n\t */\n\tsetValue(name, value, flagAsUpdated = true) {\n\t\ttry {\n\t\t\tconst property = this.getModel().getProperty(name, true);\n\t\t\tproperty.validate(value);\n\t\t\tif (property.isAggregation()) {\n\t\t\t\tflagAsUpdated = false;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif (e instanceof NotSatisfiedRestrictionException) {\n\t\t\t\tthrow new NotSatisfiedRestrictionException(e.getValue(), e.getRestriction());\n\t\t\t} else if (e instanceof UnexpectedArrayException) {\n\t\t\t\tthrow new UnexpectedArrayException(value, e.getModelArray(), e.getDepth());\n\t\t\t} else if (e instanceof UnexpectedValueTypeException) {\n\t\t\t\tthrow new UnexpectedValueTypeException(value, e.getExpectedType());\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t\t// previous exception catched is thrown again to simplify trace stack\n\n\t\tsuper.setValue(name, value, flagAsUpdated);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::initValue()\n\t */\n\tasync initValue(name, isLoaded = true, flagAsUpdated = true) {\n\t\tconst value = await this.getInstanceValue(name, isLoaded);\n\t\tthis.setValue(name, value, flagAsUpdated);\n\t\treturn this.getValue(name);\n\t}\n\n\t\t/***********************************************************************************************\\\n\t\t|                                                                                               |\n\t\t|                                        Values Getters                                         |\n\t\t|                                                                                               |\n\t\t\\***********************************************************************************************/\n\n\t/**\n\t * get instance value\n\t *\n\t * may only be applied on property with complex model (model instance of ModelComplex)\n\t *\n\t * @async\n\t * @param {string} name\n\t * @param {boolean} isLoaded\n\t * @returns {Promise<ComhonObject|ComhonArray>}\n\t */\n\tasync getInstanceValue(name, isLoaded = true) {\n\t\tconst propertyModel = await this.getModel().getProperty(name, true).getModel();\n\t\tif (!(propertyModel instanceof ModelComplex)) {\n\t\t\tthrow new ComhonException(\"property 'name' has a simple model and can't have instance value\");\n\t\t}\n\t\treturn propertyModel.getObjectInstance(isLoaded);\n\t}\n\n\t/**\n\t * get id of comhon object\n\t *\n\t * @returns {*} return null if model associated to comhon object doesn't have id properties\n\t */\n\tgetId() {\n\t\tif (this.getModel().hasUniqueIdProperty()) {\n\t\t\treturn this.getValue(this.getModel().getUniqueIdProperty().getName());\n\t\t}\n\t\tconst values = [];\n\t\tfor (const property of this.getModel().getIdProperties()) {\n\t\t\tvalues.push(this.getValue(property.getName()));\n\t\t}\n\t\treturn this._encodeId(values);\n\t}\n\n\t/**\n\t * encode multiple ids in json format\n\t * TODO use should use Model.encodeId or create class idEncoder\n\t *\n\t * @param {array} idValues\n\t * @returns {string}\n\t */\n\t_encodeId(idValues) {\n\t\treturn idValues.length > 0 ? null : JSON.stringify(idValues);\n\t}\n\n\t/**\n\t * verify if id value(s) is(are) set\n\t *\n\t * @returns {boolean} true if all id values are set or if associated model doesn't have id properties\n\t */\n\thasCompleteId() {\n\t\tfor (const property of this.getModel().getIdProperties()) {\n\t\t\tif(this.getValue(property.getName()) === null || this.getValue(property.getName()) === '') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * verify if at least one id value is set\n\t *\n\t * @returns {boolean} true if no one id value is set or if model doesn't have id properties\n\t */\n\thasEmptyId() {\n\t\tfor (const property of this.getModel().getIdProperties()) {\n\t\t\tif(this.getValue(property.getName()) !== null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t\t/***********************************************************************************************\\\n\t\t|                                                                                               |\n\t\t|                                      ComhonObject Status                                      |\n\t\t|                                                                                               |\n\t\t\\***********************************************************************************************/\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::isUpdated()\n\t */\n\tisUpdated() {\n\t\tif (!this.isFlaggedAsUpdated()) {\n\t\t\tfor (const property of this.getModel().getComplexProperties()) {\n\t\t\t\tif (this.isUpdatedValue(property.getName())) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const property of this.getModel().getDateTimeProperties()) {\n\t\t\t\tif (this.isUpdatedValue(property.getName())) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.isFlaggedAsUpdated();\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::isIdUpdated()\n\t */\n\tisIdUpdated() {\n\tfor (const property of this.getModel().getIdProperties()) {\n\t\t\tif (this.isUpdatedValue(property.getName())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::isUpdatedValue()\n\t */\n\tisUpdatedValue(name) {\n\t\tif (this.getModel().hasProperty(name)) {\n\t\t\tif (this.getUpdatedValues().has(name)) {\n\t\t\t\treturn true;\n\t\t\t} else if (this.hasValue(name)) {\n\t\t\t\tif (this.getValue(name) instanceof AbstractComhonObject) {\n\t\t\t\t\treturn this.getModel().getProperty(name).isForeign()\n\t\t\t\t\t\t? this.getValue(name).isIdUpdated()\n\t\t\t\t\t\t: this.getValue(name).isUpdated();\n\t\t\t\t}\n\t\t\t\telse if (this.getValue(name) instanceof ComhonDateTime) {\n\t\t\t\t\treturn this.getValue(name).isUpdated();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::resetUpdatedStatus()\n\t */\n\tresetUpdatedStatus(recursive = true) {\n\t\tif (recursive) {\n\t\t\tconst oids = {};\n\t\t\tthis._resetUpdatedStatusRecursive(oids);\n\t\t}else {\n\t\t\tthis._resetUpdatedStatus();\n\t\t\tfor (const property of this.getModel().getDateTimeProperties()) {\n\t\t\t\tconst propertyName = property.getName();\n\t\t\t\tif (this.hasValue(propertyName) && (this.getValue(propertyName) instanceof ComhonDateTime)) {\n\t\t\t\t\tthis.getValue(propertyName).resetUpdatedStatus(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::_resetUpdatedStatusRecursive()\n\t */\n\t_resetUpdatedStatusRecursive(oids) {\n\t\tif ((this.getOid() in oids)) {\n\t\t\tif (oids[this.getOid()] > 0) {\n\t\t\t\tconsole.log('Warning loop detected');\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\toids[this.getOid()] = 0;\n\t\t}\n\t\toids[this.getOid()]++;\n\t\tthis._resetUpdatedStatus();\n\t\tfor (const property of this.getModel().getComplexProperties()) {\n\t\t\tconst propertyName = property.getName();\n\t\t\tif (!property.isForeign()) {\n\t\t\t\tif (this.hasValue(propertyName) && (this.getValue(propertyName) instanceof AbstractComhonObject)) {\n\t\t\t\t\tthis.getValue(propertyName)._resetUpdatedStatusRecursive(oids);\n\t\t\t\t}\n\t\t\t} else if (this.issetValue(propertyName) && (this.getValue(propertyName) instanceof ComhonArray)) {\n\t\t\t\tthis.getValue(propertyName).resetUpdatedStatus(false);\n\t\t\t}\n\t\t}\n\t\tfor (const property of this.getModel().getDateTimeProperties()) {\n\t\t\tconst propertyName = property.getName();\n\t\t\tif (this.hasValue(propertyName) && (this.getValue(propertyName) instanceof ComhonDateTime)) {\n\t\t\t\tthis.getValue(propertyName).resetUpdatedStatus(false);\n\t\t\t}\n\t\t}\n\t\toids[this.getOid()]--;\n\t}\n\n\t/**\n\t * verify if comhon object has been casted\n\t *\n\t * @returns {boolean}\n\t */\n\tisCasted() {\n\t\treturn this.#isCasted;\n\t}\n\n\t/**\n\t * validate comhon object.\n\t *\n\t * validation concern only required properties, conflicts, dependencies.\n\t * throw exception if comhon object is not valid.\n\t */\n\tvalidate() {\n\t\tfor (const property of this.getModel().getRequiredProperties()) {\n\t\t\tif (!this.hasValue(property.getName())) {\n\t\t\t\tthrow new MissingRequiredValueException(this, property.getName());\n\t\t\t}\n\t\t}\n\t\tlet name, properties;\n\t\tfor ([name, properties] of this.getModel().getConflicts()) {\n\t\t\tif (this.hasValue(name)) {\n\t\t\t\tfor (const propertyName of properties) {\n\t\t\t\t\tif (this.hasValue(propertyName)) {\n\t\t\t\t\t\tthrow new ConflictValuesException(this.getModel(), [name, propertyName]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const property of this.getModel().getDependsProperties()) {\n\t\t\tif (this.hasValue(property.getName())) {\n\t\t\t\tfor (const propertyName of property.getDependencies()) {\n\t\t\t\t\tif (!this.hasValue(propertyName)) {\n\t\t\t\t\t\tthrow new DependsValuesException(property.getName(), propertyName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * verify if comhon object is valid.\n\t *\n\t * validation concern only required properties, conflicts, dependencies.\n\t *\n\t * @returns {boolean}\n\t */\n\tisValid() {\n\t\ttry {\n\t\t\tthis.validate();\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t\t/***********************************************************************************************\\\n\t\t|                                                                                               |\n\t\t|                                      Model - Properties                                       |\n\t\t|                                                                                               |\n\t\t\\***********************************************************************************************/\n\n\t/**\n\t * verify if current object model is same as given model or is inherited from given model\n\t *\n\t * @param {Model} model model name or model instance\n\t * @returns {boolean}\n\t */\n\tisA(model) {\n\t\tif (!(model instanceof Model)) {\n\t\t\tthrow new ArgumentException(model, ['string', 'Model'], 1);\n\t\t}\n\t\treturn this.getModel() === model || this.getModel().isInheritedFrom(model);\n\t}\n\n\t/**\n\t * cast comhon object\n\t *\n\t * update current model to specified model.\n\t * new model must inherit from current model otherwise an exception is thrown\n\t *\n\t * @param {Model} model\n\t * @throws {CastComhonObjectException}\n\t */\n\tcast(model) {\n\t\tif (this.getModel() === model) {\n\t\t\treturn;\n\t\t}\n\t\tif (!model.isInheritedFrom(this.getModel())) {\n\t\t\tthrow new CastComhonObjectException(model, this.getModel());\n\t\t}\n\t\tlet addObject = false;\n\t\tif (this.hasCompleteId() && this.getModel().hasIdProperties()) {\n\t\t\tconst object = MainObjectCollection.getObject(this.getId(), model);\n\t\t\tif (object === null || object === this) {\n\t\t\t\taddObject = true;\n\t\t\t\tif (MainObjectCollection.hasObject(this.getId(), model, false)) {\n\t\t\t\t\tthrow new ComhonException(`Cannot cast object to '${model.getName()}'. ComhonObject with id '${this.getId()}' and model '${model.getName()}' already exists in MainObjectCollection`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet originalModel;\n\t\ttry {\n\t\t\tif (this.getModel().isMain() && addObject) {\n\t\t\t\tMainObjectCollection.removeObject(this);\n\t\t\t}\n\t\t\toriginalModel = this.getModel();\n\t\t\tthis._updateModel(model);\n\n\t\t\tif (this.isLoaded() && this.getModel().isAbstract()) {\n\t\t\t\tthrow new AbstractObjectException(this);\n\t\t\t}\n\t\t\tif (this.getModel().isMain() && addObject) {\n\t\t\t\tMainObjectCollection.addObject(this);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis._updateModel(originalModel);\n\t\t\tthrow e;\n\t\t}\n\t\tthis.#isCasted = true;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::getComhonClass()\n\t */\n\tgetComhonClass() {\n\t\treturn `ComhonObject(${this.getModel().getName()})`;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::_hasToUpdateMainObjectCollection()\n\t */\n\t_hasToUpdateMainObjectCollection(propertyName) {\n\t\treturn this.getModel().isMain() && this.getModel().hasIdProperty(propertyName);\n\t}\n\n\t\t/***********************************************************************************************\\\n\t\t|                                                                                               |\n\t\t|                                Serialization / Deserialization                                |\n\t\t|                                                                                               |\n\t\t\\***********************************************************************************************/\n\n\n\n\t/**\n\t * load (deserialize) comhon object using model serialization\n\t *\n\t * @async\n\t * @param {string[]} propertiesFilter\n\t * @param {boolean} forceLoad if object already exists and is already loaded, force to reload object\n\t * @throws {ComhonException}\n\t * @returns {Promise<boolean>} true if success\n\t */\n\tasync load(propertiesFilter = null, forceLoad = false) {\n\t\tlet success = false;\n\t\tif (!this.isLoaded() || forceLoad) {\n\t\t\t// TODO verify if model is requestable\n      let apiModelName = ApiModelNameManager.getApiModelName(this.getModel().getName());\n      apiModelName = apiModelName ?? this.getModel().getName();\n\t\t\tconst xhr = await Requester.get(apiModelName+'/'+this.getId());\n\n\t\t\tif (xhr.status === 200) {\n        await this.fill(JSON.parse(xhr.responseText), new ObjectInterfacer());\n\t\t\t\tsuccess = true;\n      } else if (xhr.status !== 404) {\n        throw new HTTPException(xhr);\n      }\n\t\t}\n\t\treturn success;\n\t}\n\n\t/**\n\t * save (serialize) comhon object using model serialization\n\t *\n\t * create or update serialized object. some serializations may require id property(ies)\n\t *\n\t * @param {string} operation\n\t * @throws {ComhonException}\n\t * @returns {integer} count of affected serialized object\n\t */\n\tsave(operation) {\n\t\t// TODO return a promise\n\t\t// return saveobjectonserver;\n\t}\n\n\t/**\n\t * delete serialized object\n\t *\n\t * model must have id property and id value of comhon object must be set\n\t *\n\t * @throws {ComhonException}\n\t * @returns {integer} count of deleted object\n\t */\n\tdelete() {\n\t\t// TODO return a promise\n\t\t// return deleteobjectonserver;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractComhonObject}::loadValue()\n\t */\n\tloadValue(name, propertiesFilter = null, forceLoad = false) {\n\t\tconst property = this.getModel().getProperty(name, true);\n\t\treturn property.loadValue(this.getValue(name), propertiesFilter, forceLoad);\n\t}\n\n}\n\nexport default ComhonObject;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport SimpleModel from 'Logic/Model/SimpleModel';\nimport UnexpectedValueTypeException from 'Logic/Exception/Value/UnexpectedValueTypeException';\nimport CastStringException from 'Logic/Exception/Model/CastStringException';\n\nclass ModelInteger extends SimpleModel {\n\n\t/** @type {string} */\n\tstatic get ID() {return 'integer';}\n\n\tconstructor() {\n\t\tsuper(ModelInteger.ID);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {SimpleModel}::_importScalarValue()\n\t */\n\t_importScalarValue(value, interfacer) {\n\t\treturn this.castValue(value);\n\t}\n\n\t/**\n\t * cast value to integer\n\t *\n\t * @param {string} value\n\t * @param {string} property if value belong to a property, permit to be more specific if an exception is thrown\n\t * @returns {integer}\n\t */\n\tcastValue(value, property = null) {\n\t\tif (Number.isInteger(value)) {\n\t\t\treturn value;\n\t\t}\n\t\tif (isNaN(value)) {\n\t\t\tthrow new CastStringException(value, 'integer', property);\n\t\t}\n\t\tconst castedValue = parseFloat(value);\n\t\tif (!Number.isInteger(castedValue)) {\n\t\t\tthrow new CastStringException(value, 'integer', property);\n\t\t}\n\t\treturn castedValue;\n\t}\n\n\t/**\n\t * verify if value is an integer\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tverifValue(value) {\n\t\tif (!Number.isInteger(value)) {\n\t\t\tthrow new UnexpectedValueTypeException(value, 'integer');\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport default ModelInteger;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport SimpleModel from 'Logic/Model/SimpleModel';\nimport UnexpectedValueTypeException from 'Logic/Exception/Value/UnexpectedValueTypeException';\nimport CastStringException from 'Logic/Exception/Model/CastStringException';\n\nclass ModelFloat extends SimpleModel {\n\n\t/** @type {string} */\n\tstatic get ID() {return 'float';}\n\n\n\tconstructor() {\n\t\tsuper(ModelFloat.ID);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {SimpleModel}::_importScalarValue()\n\t */\n\t_importScalarValue(value, interfacer) {\n\t\treturn this.castValue(value);\n\t}\n\n\t/**\n\t * cast value to float\n\t *\n\t * @param {string} value\n\t * @param {string} property if value belong to a property, permit to be more specific if an exception is thrown\n\t * @returns {float}\n\t */\n\tcastValue(value, property = null) {\n\t\tif (typeof value === 'number') {\n\t\t\treturn value;\n\t\t}\n\t\tif (isNaN(value)) {\n\t\t\tthrow new CastStringException(value, 'float', property);\n\t\t}\n\t\treturn parseFloat(value);\n\t}\n\n\t/**\n\t * verify if value is a float (or an integer)\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tverifValue(value) {\n\t\tif (typeof value !== 'number') {\n\t\t\tthrow new UnexpectedValueTypeException(value, 'double');\n\t\t}\n\t\treturn true;\n\t}\n\n}\n\nexport default ModelFloat;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport SimpleModel from 'Logic/Model/SimpleModel';\nimport XMLInterfacer from 'Logic/Interfacer/XMLInterfacer';\nimport UnexpectedValueTypeException from 'Logic/Exception/Value/UnexpectedValueTypeException';\nimport CastStringException from 'Logic/Exception/Model/CastStringException';\n\nclass ModelBoolean extends SimpleModel {\n\n\t/** @type {string} */\n\tstatic get ID() {return 'boolean';}\n\n\tconstructor() {\n\t\tsuper(ModelBoolean.ID);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {SimpleModel}::exportSimple()\n\t *\n\t * @returns {boolean|void}\n\t */\n\texportSimple(value, interfacer) {\n\t\tif (value === null) {\n\t\t\treturn value;\n\t\t}\n\t\tif (interfacer instanceof XMLInterfacer) {\n\t\t\treturn value ? '1' : '0';\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {SimpleModel}::_importScalarValue()\n\t *\n\t * @returns {boolean|void}\n\t */\n\t_importScalarValue(value, interfacer) {\n\t\treturn this.castValue(value);\n\t}\n\n\t/**\n\t * cast value to boolean\n\t *\n\t * @param {string} value\n\t * @param {string} property if value belong to a property, permit to be more specific if an exception is thrown\n\t * @returns {boolean}\n\t */\n\tcastValue(value, property = null) {\n\t\tif (typeof value === 'boolean') {\n\t\t\treturn value;\n\t\t}\n\t\tif (value === '1') {\n\t\t\treturn true;\n\t\t}\n\t\tif (value === '0') {\n\t\t\treturn false;\n\t\t}\n\t\tthrow new CastStringException(value, ['0', '1'], property);\n\t}\n\n\t/**\n\t * verify if value is a boolean\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tverifValue(value) {\n\t\tif (typeof value !== 'boolean') {\n\t\t\tthrow new UnexpectedValueTypeException(value, 'boolean');\n\t\t}\n\t\treturn true;\n\t}\n\n}\n\nexport default ModelBoolean;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport SimpleModel from 'Logic/Model/SimpleModel';\nimport UnexpectedValueTypeException from 'Logic/Exception/Value/UnexpectedValueTypeException';\n\nclass ModelString extends SimpleModel {\n\n\t/** @type {string} */\n\tstatic get ID() {return 'string';}\n\n\tconstructor() {\n\t\tsuper(ModelString.ID);\n\t}\n\n\t/**\n\t * verify if value is a string\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tverifValue(value) {\n\t\tif (typeof value !== 'string') {\n\t\t\tthrow new UnexpectedValueTypeException(value, 'string');\n\t\t}\n\t\treturn true;\n\t}\n\n}\n\nexport default ModelString;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ModelFloat from 'Logic/Model/ModelFloat';\n\nclass ModelPercentage extends ModelFloat {\n\n\t/** @type {string} */\n\tstatic get ID() {return 'percentage';}\n\n\tconstructor() {\n\t\tsuper(ModelPercentage.ID);\n\t}\n\n}\n\nexport default ModelPercentage;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ModelInteger from 'Logic/Model/ModelInteger';\nimport UnexpectedValueTypeException from 'Logic/Exception/Value/UnexpectedValueTypeException';\n\nclass ModelIndex extends ModelInteger {\n\n\t/** @type {string} */\n\tstatic get ID() {return 'index';}\n\n\tconstructor() {\n\t\tsuper(ModelIndex.ID);\n\t}\n\n\t/**\n\t * verify if value is a string\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tverifValue(value) {\n\t\tsuper.verifValue(value);\n\t\tif (value < 0) {\n\t\t\tthrow new UnexpectedValueTypeException(value, 'positive integer (including 0)');\n\t\t}\n\t\treturn true;\n\t}\n\n}\n\nexport default ModelIndex;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ModelInteger from 'Logic/Model/ModelInteger';\nimport ModelFloat from 'Logic/Model/ModelFloat';\nimport ModelBoolean from 'Logic/Model/ModelBoolean';\nimport ModelString from 'Logic/Model/ModelString';\nimport ModelPercentage from 'Logic/Model/ModelPercentage';\nimport ModelIndex from 'Logic/Model/ModelIndex';\nimport ModelDateTime from 'Logic/Model/ModelDateTime';\n\nconst simpleModels = {\n  [ModelInteger.ID]    : new ModelInteger(),\n  [ModelFloat.ID]      : new ModelFloat(),\n  [ModelBoolean.ID]    : new ModelBoolean(),\n  [ModelString.ID]     : new ModelString(),\n  [ModelIndex.ID]      : new ModelIndex(),\n  [ModelPercentage.ID] : new ModelPercentage(),\n  [ModelDateTime.ID]   : new ModelDateTime()\n};\nObject.freeze(simpleModels);\n\nexport default simpleModels;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Restriction from 'Logic/Model/Restriction/Restriction';\n\nclass NotNull extends Restriction {\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::satisfy()\n\t */\n\tsatisfy(value) {\n\t\treturn value !== null;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::isEqual()\n\t */\n\tisEqual(restriction) {\n\t\treturn this === restriction || ((restriction instanceof NotNull));\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::isAllowedModel()\n\t */\n\tisAllowedModel(model) {\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::toMessage()\n\t */\n\ttoMessage(value) {\n\t\treturn this.satisfy(value)\n\t\t\t? 'not null value given'\n\t\t\t: 'null value given, value must be not null';\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::toString()\n\t */\n\ttoString() {\n\t\treturn 'Not null';\n\t}\n\n}\n\nexport default NotNull;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport SimpleModel from 'Logic/Model/SimpleModel';\nimport ModelContainer from 'Logic/Model/ModelContainer';\nimport ModelDateTime from 'Logic/Model/ModelDateTime';\nimport ComhonDateTime from 'Logic/Object/ComhonDateTime';\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport Restriction from 'Logic/Model/Restriction/Restriction';\nimport NotSatisfiedRestrictionException from 'Logic/Exception/Value/NotSatisfiedRestrictionException';\nimport NotNull from 'Logic/Model/Restriction/NotNull';\n\nclass Property {\n\n\t/** @type {AbstractModel} */\n\t#model;\n\n\t/** @type {string} */\n\t#name;\n\n\t\t/** @type {boolean} */\n\t#isId;\n\n\t/** @type {boolean} */\n\t#isPrivate;\n\n\t/** @type {boolean} */\n\t#isRequired;\n\n\t/** @type {boolean} */\n\t#isNotNull;\n\n\t/** @type {boolean} */\n\t#isIsolated;\n\n\t/** @type {*}} */\n\t#default;\n\n\t/** @type {boolean} */\n\t#interfaceAsNodeXml;\n\n\t/** @type {Restriction[]} */\n\t#restrictions = [];\n\n\t/** @type {string[]} */\n\t#dependencies;\n\n\t/**\n\t *\n\t * @param {AbstractModel} model\n\t * @param {string} name\n\t * @param {boolean} isId\n\t * @param {boolean} isPrivate\n\t * @param {boolean} isRequired\n\t * @param {boolean} isNotNull\n\t * @param {*} default\n\t * @param {boolean} isInterfacedAsNodeXml\n\t * @param {Restriction[]} restrictions\n\t * @param {string[]} dependencies\n\t * @param {boolean} isIsolated\n\t * @throws {ComhonException}\n\t */\n\tconstructor(model, name, isId = false, isPrivate = false, isRequired = false, isNotNull = false, defaultValue = null, isInterfacedAsNodeXml = null, restrictions = [], dependencies = [], isIsolated = false) {\n\t\tthis.#model = model;\n\t\tthis.#name = name;\n\t\tthis.#isId = isId;\n\t\tthis.#isPrivate = isPrivate;\n\t\tthis.#isRequired = isRequired;\n\t\tthis.#isNotNull = isNotNull;\n\t\tthis.#isIsolated = isIsolated;\n\t\tthis.#default = defaultValue;\n\t\tthis.#dependencies = dependencies;\n\n\t\tif (this.#isIsolated && (model.getClassName() !== 'Model')) {\n\t\t\tthrow new ComhonException('only property with model instance of \"Model\" may be isolated');\n\t\t}\n\t\tfor (const restriction of restrictions) {\n\t\t\tif (!restriction.isAllowedModel(this.#model)) {\n\t\t\t\tthrow new ComhonException('restriction doesn\\'t allow specified model'+this.#model.getClassName());\n\t\t\t}\n\t\t\tthis.#restrictions.push(restriction);\n\t\t}\n\n\t\tif (this.#model instanceof SimpleModel) {\n\t\t\tthis.#interfaceAsNodeXml = isInterfacedAsNodeXml === null ? false : isInterfacedAsNodeXml;\n\t\t} else {\n\t\t\tif ((isInterfacedAsNodeXml !== null) && !isInterfacedAsNodeXml) {\n\t\t\t\tconsole.log('warning! 8th parameter is ignored, property with complex model is inevitably interfaced as node xml');\n\t\t\t}\n\t\t\t// without inheritance, foreign property may be exported as attribute because only id is exported\n\t\t\t// but due to inheritance, model name can be exported with id so we need to export as node\n\t\t\tthis.#interfaceAsNodeXml = true;\n\t\t}\n\n\t\tif (this.#isId && !(this.#model instanceof SimpleModel)) {\n\t\t\tthrow new ComhonException('property is defined as id, so argument 1 must be an instance of SimpleModel');\n\t\t}\n\n\t\tObject.freeze(this.#restrictions);\n\t\tObject.freeze(this.#dependencies);\n\t}\n\n\t/**\n\t * get model\n\t *\n\t * @async\n\t * @returns {Promise<Model|SimpleModel|ModelContainer>}\n\t */\n\tasync getModel() {\n\t\tawait this.#model.load();\n\t\treturn this.#model;\n\t}\n\n\t/**\n\t * get model or model inside model container\n\t *\n\t * @async\n\t * @returns {Promise<Model|SimpleModel>}\n\t */\n\tasync getUniqueModel() {\n\t\tlet uniqueModel = this.#model;\n\t\tif (uniqueModel instanceof ModelContainer) {\n\t\t\tuniqueModel = await uniqueModel.getUniqueModel();\n\t\t}\n\t\treturn uniqueModel;\n\t}\n\n\n\n\t/**\n\t * get loaded model.\n\t *\n\t * if the contained model is a unique model and is not loaded, an exception is thrown.\n\t *\n\t * @returns {Model|SimpleModel|ModelContainer}\n\t */\n\tgetLoadedModel() {\n    if (!this.#model.isLoaded()) {\n      throw new ComhonException('model not loaded')\n    }\n\t\treturn this.#model;\n\t}\n\n\t/**\n\t * verify if model or model inside model container is a simple model\n\t *\n\t * @returns {boolean}\n\t */\n\tisUniqueModelSimple() {\n\t\treturn this.#model instanceof ModelContainer\n\t\t\t? this.#model.isUniqueModelSimple()\n\t\t\t: this.#model instanceof SimpleModel;\n\t}\n\n\t/**\n\t * get name\n\t *\n\t * @returns {string}\n\t */\n\tgetName() {\n\t\treturn this.#name;\n\t}\n\n\t/**\n\t * verify if property is an id\n\t *\n\t * @returns {boolean}\n\t */\n\tisId() {\n\t\treturn this.#isId;\n\t}\n\n\t/**\n\t * verify if property is Private\n\t *\n\t * @returns {boolean}\n\t */\n\tisPrivate() {\n\t\treturn this.#isPrivate;\n\t}\n\n\t/**\n\t * verify if property value is required.\n\t * A loaded comhon object must have all its required values set (and not null).\n\t *\n\t * @returns {boolean}\n\t */\n\tisRequired() {\n\t\treturn this.#isRequired;\n\t}\n\n\t/**\n\t * verify if property value must be not null\n\t *\n\t * @returns {boolean}\n\t */\n\tisNotNull() {\n\t\treturn this.#isNotNull;\n\t}\n\n\t/**\n\t * verify if property value is isolated\n\t *\n\t * @returns {boolean}\n\t */\n\tisIsolated() {\n\t\treturn this.#isIsolated;\n\t}\n\n\t/**\n\t * verify if property has default value\n\t *\n\t * @returns {boolean}\n\t */\n\thasDefaultValue() {\n\t\treturn this.#default !== null;\n\t}\n\n\t/**\n\t * get default value if exists\n\t *\n\t * @returns {*|void} null if property doesn't have default value\n\t */\n\tgetDefaultValue() {\n\t\tif (this.#model instanceof ModelDateTime) {\n\t\t\treturn new ComhonDateTime(this.#default);\n\t\t}\n\t\treturn this.#default;\n\t}\n\n\t/**\n\t * verify if property is aggregation\n\t *\n\t * @returns {boolean}\n\t */\n\tisAggregation() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * verify if property is foreign\n\t *\n\t * @returns {boolean}\n\t */\n\tisForeign() {\n\t\treturn false;\n\t}\n\n\t/**\n\t * verify if model property is complex\n\t *\n\t * @returns {boolean}\n\t */\n\tisComplex() {\n\t\treturn this.#model.isComplex();\n\t}\n\n\t/**\n\t * verify if property has model ModelDateTime\n\t *\n\t * @returns {boolean}\n\t */\n\thasModelDateTime() {\n\t\treturn (this.#model instanceof ModelDateTime);\n\t}\n\n\t/**\n\t * get restrictions\n\t *\n\t * @returns {Restriction[]}\n\t */\n\tgetRestrictions() {\n\t\treturn this.#restrictions;\n\t}\n\n\t/**\n\t * verify if property depends on other properties.\n\t * a property depends on other properties if property value MAY be set only if other properties values are set.\n\t *\n\t * @returns {boolean}\n\t */\n\thasDependencies() {\n\t\treturn this.#dependencies.length > 0;\n\t}\n\n\t/**\n\t * get names of dependency properties.\n\t * dependencies values MUST be set when current property value is set\n\t *\n\t * @returns {Array}\n\t */\n\tgetDependencies() {\n\t\treturn this.#dependencies;\n\t}\n\n\t/**\n\t * verify if property is interfaceable for export/import in Public/Private mode\n\t *\n\t * @param {boolean} isPrivate if true Private mode, otherwise public mode\n\t * @returns {boolean} true if property is interfaceable\n\t */\n\tisInterfaceable(isPrivate) {\n\t\treturn (isPrivate || !this.#isPrivate);\n\t}\n\n\t/**\n\t * validate value regarding restrictions property.\n\t * throw exception if value is not valid.\n\t *\n\t * @param {*} value\n\t */\n\tvalidate(value) {\n\t\tif (value === null) {\n\t\t\tif (this.#isNotNull) {\n\t\t\t\tthrow new NotSatisfiedRestrictionException(value, new NotNull());\n\t\t\t}\n\t\t} else {\n\t\t\tthis.#model.verifValue(value);\n\t\t\tif (this.#restrictions.length > 0) {\n\t\t\t\tconst restriction = Restriction.getFirstNotSatisifed(this.#restrictions, value);\n\t\t\t\tif (restriction !== null) {\n\t\t\t\t\tthrow new NotSatisfiedRestrictionException(value, restriction);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * verify if value is valid regarding restrictions property\n\t *\n\t * @param {*} value\n\t * @returns {boolean} true if property is valid\n\t */\n\tisValid(value) {\n\t\tif (value === null) {\n\t\t\treturn !this.#isNotNull;\n\t\t}\n\t\ttry {\n\t\t\tthis.#model.verifValue(value);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t\treturn Restriction.getFirstNotSatisifed(this.#restrictions, value) === null;\n\t}\n\n\t/**\n\t * verify if property is exported/imported as node for xml export/import\n\t *\n\t * @returns {boolean} true if property is interfaceable\n\t */\n\tisInterfacedAsNodeXml() {\n\t\treturn this.#interfaceAsNodeXml;\n\t}\n\n\t/**\n\t * get aggregation properties names if exist\n\t *\n\t * @returns {string[]|void} null if there are no aggregation properties\n\t */\n\tgetAggregationProperties() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * load specified value\n\t *\n\t * @async\n\t * @param {ComhonObject} object\n\t * @param {string[]} propertiesFilter\n\t * @param {boolean} forceLoad if object is already loaded, force to reload object\n\t * @return {Promise<boolean>} true if object is successfully loaded, false otherwise\n\t */\n\tasync loadValue(object, propertiesFilter = [], forceLoad = false) {\n\t\tthrow new ComhonException('cannot load object, property is not foreign property');\n\t}\n\n\t/**\n\t * get property model that permit to build literal\n\t *\n\t * @async\n\t * @returns {Promise<SimpleModel|void>}\n\t */\n\tasync getLiteralModel() {\n\t\tconst model = await this.getModel();\n\t\treturn (model instanceof SimpleModel) ? model : null;\n\t}\n\n\t/**\n\t * verify if specified property is equal to this property\n\t *\n\t * verify if properties are same instance or if they have same attributes\n\t *\n\t * @param {Property} property\n\t * @returns {boolean}\n\t */\n\tisEqual(property) {\n\t\treturn this === property || (\n\t\t\tthis.constructor.name === property.constructor.name &&\n\t\t\tthis.#name            === property.getName() &&\n\t\t\tthis.#isId            === property.isId() &&\n\t\t\tthis.#isPrivate       === property.isPrivate() &&\n\t\t\tthis.#isRequired      === property.isRequired() &&\n\t\t\tthis.#default         === property.getDefaultValue() &&\n\t\t\tthis.#isNotNull       === property.isNotNull() &&\n\t\t\tthis.#isIsolated      === property.isIsolated() &&\n\t\t\tthis.#dependencies.length === property.getDependencies().length &&\n\t\t\tproperty.getDependencies().every((value) => this.#dependencies.indexOf(value) !== -1) &&\n\t\t\tthis.#model.isEqual(property.#model) &&\n\t\t\tRestriction.compare(this.#restrictions, property.getRestrictions())\n\t\t);\n\t}\n\n}\n\nexport default Property;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Property from 'Logic/Model/Property/Property';\nimport simpleModels from 'Logic/Model/Manager/SimpleModels';\n\nclass ForeignProperty extends Property {\n\n\t/**\n\t *\n\t * @param {ModelForeign} model\n\t * @param {string} name\n\t * @param {boolean} isPrivate\n\t * @param {boolean} isRequired\n\t * @param {boolean} isNotNull\n\t * @param {boolean} dependencies\n\t */\n\tconstructor(model, name, isPrivate = false, isRequired = false, isNotNull = false, dependencies = []) {\n\t\tsuper(model, name, false, isPrivate, isRequired, isNotNull, null, null, [], dependencies);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Property}::loadValue()\n\t */\n\tasync loadValue(object, propertiesFilter = null, forceLoad = false) {\n\t\tconst model = await this.getModel();\n\t\tmodel.verifValue(object);\n\t\tif (object.isLoaded() && !forceLoad) {\n\t\t\treturn false;\n\t\t}\n\t\t// TODO load value from server\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Property}::isForeign()\n\t */\n\tisForeign() {\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Property}::getLiteralModel()\n\t */\n\tasync getLiteralModel() {\n\t\tif (this._getModel()._getModel().getClassName() !== 'Model') {\n\t\t\treturn null;\n\t\t}\n\t\tconst foreignModel = await this._getModel().getModel();\n\t\treturn foreignModel.hasUniqueIdProperty()\n\t\t\t? foreignModel.getUniqueIdProperty().getLoadedModel()\n\t\t\t: simpleModels['string'];\n\t}\n\n}\n\nexport default ForeignProperty;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ForeignProperty from 'Logic/Model/Property/ForeignProperty';\nimport ComhonException from 'Logic/Exception/ComhonException';\n\nclass AggregationProperty extends ForeignProperty {\n\n\t/** @type {string[]} */\n\t#aggregationProperties = null;\n\n\t/**\n\t *\n\t * @param {ModelForeign} model\n\t * @param {string} name\n\t * @param {string[]} aggregationProperties\n\t * @param {boolean} isPrivate\n\t * @param {boolean} dependencies\n\t * @throws {ComhonException}\n\t */\n\tconstructor(model, name, aggregationProperties, isPrivate = false, dependencies = []) {\n\t\tsuper(model, name, isPrivate, false, true, dependencies);\n\t\tif (!Array.isArray(aggregationProperties)) {\n\t\t\tthrow new ComhonException('aggregationProperties must be an array');\n\t\t}\n\t\tif (aggregationProperties.length === 0) {\n\t\t\tthrow new ComhonException('aggregation must have at least one aggregation property');\n\t\t}\n\t\tthis.#aggregationProperties = aggregationProperties;\n\t\tObject.freeze(this.#aggregationProperties);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Property}::isAggregation()\n\t */\n\tisAggregation() {\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Property}::getAggregationProperties()\n\t */\n\tgetAggregationProperties() {\n\t\treturn this.#aggregationProperties;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ForeignProperty}::loadValue()\n\t * @throws {ComhonException} cannot call this function for aggregation\n\t */\n\tasync loadValue(object, propertiesFilter = null, forceLoad = false) {\n\t\tthrow new ComhonException('cannot load aggregation value');\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Property}::isEqual()\n\t */\n\tisEqual(property) {\n\t\tif (this === property) {\n\t\t\treturn true;\n\t\t}\n\t\treturn super.isEqual(property)\n\t\t\t&& this.#aggregationProperties.length === property.getAggregationProperties().length\n\t\t\t&& property.getAggregationProperties().every((value) => this.#aggregationProperties.indexOf(value) !== -1);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Property}::isInterfaceable()\n\t */\n\tisInterfaceable(isPrivate) {\n\t\treturn false;\n\t}\n\n}\n\nexport default AggregationProperty;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Property from 'Logic/Model/Property/Property';\nimport ModelIndex from 'Logic/Model/ModelIndex';\nimport ComhonException from 'Logic/Exception/ComhonException';\n\nclass AutoProperty extends Property {\n\n\t#auto;\n\n\tstatic get INCREMENTAL() {return 'incremental';}\n\n\t/**\n\t *\n\t * @param {SimpleModel} model\n\t * @param {string} name\n\t * @param {boolean} isId\n\t * @param {boolean} isPrivate\n\t * @param {boolean} isRequired\n\t * @param {boolean} isInterfacedAsNodeXml\n\t * @param {string[]} dependencies\n\t * @param {string} auto\n\t * @throws {ComhonException}\n\t */\n\tconstructor(model, name, isId = false, isPrivate = false, isRequired = false, isInterfacedAsNodeXml = null, dependencies = [], auto = null) {\n\t\tsuper(model, name, isId, isPrivate, isRequired, true, null, isInterfacedAsNodeXml, [], dependencies);\n\n\t\tif (!(model instanceof ModelIndex) || auto !== AutoProperty.INCREMENTAL) {\n\t\t\tthrow new ComhonException(`auto value 'auto' not allowed on property model '${model.getName()}'`);\n\t\t}\n\t\tthis.#auto = auto;\n\t}\n\n\t/**\n\t * return the function name that auto generate value\n\t *\n\t * @returns {string}\n\t */\n\tgetAutoFunction() {\n\t\treturn this.#auto;\n\t}\n\n}\n\nexport default AutoProperty;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass ManifestException extends ComhonException {\n\n\t/**\n\t *\n\t * @param {string} message\n\t */\n\tconstructor(message) {\n\t\tsuper(message, ConstantException.MANIFEST_EXCEPTION);\n\t}\n\n}\n\nexport default ManifestException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ModelForeign from 'Logic/Model/ModelForeign';\nimport ModelArray from 'Logic/Model/ModelArray';\nimport ForeignProperty from 'Logic/Model/Property/ForeignProperty';\nimport AggregationProperty from 'Logic/Model/Property/AggregationProperty';\nimport Property from 'Logic/Model/Property/Property';\nimport AutoProperty from 'Logic/Model/Property/AutoProperty';\nimport XMLInterfacer from 'Logic/Interfacer/XMLInterfacer';\nimport ObjectInterfacer from 'Logic/Interfacer/ObjectInterfacer';\nimport ManifestException from 'Logic/Exception/Manifest/ManifestException';\nimport ComhonException from 'Logic/Exception/ComhonException';\n\n/**\n * @abstract\n */\nclass ManifestParser {\n\n\t/** @type {string} */\n\tstatic get _EXTENDS() {return 'extends';}\n\n\t/** @type {string} */\n\tstatic get IS_MAIN() {return 'is_main';}\n\n\t/** @type {string} */\n\tstatic get INHERITANCE_REQUESTABLES() {return 'inheritance_requestables';}\n\n\t/** @type {string} */\n\tstatic get NAME() {return 'name';}\n\n\t/** @type {string} */\n\tstatic get IS_ID() {return 'is_id';}\n\n\t/** @type {string} */\n\tstatic get IS_PRIVATE() {return 'is_private';}\n\n\t/** @type {string} */\n\tstatic get IS_FOREIGN() {return 'is_foreign';}\n\n\t/** @type {string} */\n\tstatic get IS_REQUIRED() {return 'is_required';}\n\n\t/** @type {string} */\n\tstatic get IS_ASSOCIATIVE() {return 'is_associative';}\n\n\t/** @type {string} */\n\tstatic get IS_ABSTRACT() {return 'is_abstract';}\n\n\t/** @type {string} */\n\tstatic get IS_ISOLATED() {return 'is_isolated';}\n\n\t/** @type {string} */\n\tstatic get DEPENDS() {return 'depends';}\n\n\t/** @type {string} */\n\tstatic get CONFLICTS() {return 'conflicts';}\n\n\t/** @type {string} */\n\tstatic get SHARE_PARENT_ID() {return 'share_parent_id';}\n\n\t/** @type {string} */\n\tstatic get SHARED_ID() {return 'shared_id';}\n\n\t/** @type {string} */\n\tstatic get XML_ELEM_TYPE() {return 'xml';}\n\n\t/** @type {string} */\n\tstatic get XML_NODE() {return 'node';}\n\n\t/** @type {string} */\n\tstatic get XML_ATTRIBUTE() {return 'attribute';}\n\n\t/** @type {string} */\n\tstatic get AUTO() {return 'auto';}\n\n\t/** @type {string} */\n\tstatic get AGGREGATIONS() {return 'aggregations';}\n\n\t// list of all restrictions\n\n\t/** @type {string} */\n\tstatic get ENUM() {return 'enum';}\n\n\t/** @type {string} */\n\tstatic get INTERVAL() {return 'interval';}\n\n\t/** @type {string} */\n\tstatic get PATTERN() {return 'pattern';}\n\n\t/** @type {string} */\n\tstatic get REGEX() {return 'regex';}\n\n\t/** @type {string} */\n\tstatic get NOT_NULL() {return 'not_null';}\n\n\t/** @type {string} */\n\tstatic get NOT_EMPTY() {return 'not_empty';}\n\n\t/** @type {string} */\n\tstatic get SIZE() {return 'size';}\n\n\t/** @type {string} */\n\tstatic get LENGTH() {return 'length';}\n\n\t/** @type {*} */\n\t#manifest;\n\n\t/** @type {Interfacer} */\n\t#interfacer;\n\n\t/** @type {boolean} */\n\t#castValues;\n\n\t/** @type {string} */\n\t#namespace;\n\n\t/** @type {boolean} */\n\t#isLocal;\n\n\t/** @type {array} */\n\t#currentProperties = null;\n\n\t/** @type {Iterator} */\n\t#propertiesIterator;\n\n\t/** @type {*} */\n\t#currentProperty;\n\n\t/**\n\t * verify if manifest describe a main model.\n\t * if true that means comhon object with described model might be stored in MainObjectCollection\n\t *\n\t * @abstract\n\t * @returns {boolean}\n\t */\n\tisMain() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get extends model names\n\t *\n\t * @abstract\n\t * @returns {string[]|void} null if no extends model name\n\t */\n\tgetExtends() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get inherited model that are requestable\n\t *\n\t * @abstract\n\t * @returns {string[]|void} null if no requestable inherited model\n\t */\n\tgetInheritanceRequestable() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if manifest describe a model is abstract.\n\t * object with abstract model may be instanciated instanciated but cannot be loaded and cannot be interfaced\n\t *\n\t * @abstract\n\t * @returns {boolean}\n\t */\n\tisAbstract() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if manifest describe a model that share id with its direct parent model.\n\t * if true, that mean it share id with first extends element.\n\t * object with model that share id may be found in object collection with object model name or parent model name\n\t *\n\t * @abstract\n\t * @returns {boolean}\n\t */\n\tisSharedParentId() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if manifest describe a model that share id with any parent model and get its parent model name.\n\t * object with model that share id may be found in object collection with object model name or parent model name\n\t *\n\t * @abstract\n\t * @returns {string|void} if no model to share id with\n\t */\n\tsharedId() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get manifest parsers that will permit to build all local models\n\t *\n\t * @abstract\n\t * @returns ManifestParser[]\n\t */\n\tgetLocalModelManifestParsers() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get name of unique model of current property\n\t *\n\t * @abstract\n\t * @returns {string}\n\t */\n\tgetCurrentPropertyModelUniqueName() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get current properties\n\t *\n\t * @abstract\n\t * @returns {Array.}\n\t */\n\t_getCurrentProperties() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get basic informations of property\n\t *\n\t * @abstract\n\t * @param {Model|SimpleModel} propertyModelUnique unique model associated to property\n\t * @param {Map<Promise>} patternPromises given Map will be populated if patterns found in manifest\n\t * @returns [string, AbstractModel, boolean, boolean, boolean, boolean, boolean, boolean, string]\n\t *     0 : property name\n\t *     1 : final model associated to property\n\t *     2 : true if property is id\n\t *     3 : true if property is private\n\t *     4 : true if property value must be not null\n\t *     5 : true if property value is required\n\t *     6 : true if property value is isolated\n\t *     7 : true if property value is interfaced as node xml\n\t *     8 : the method to auto generate property value\n\t */\n\t_getBaseInfosProperty(propertyModelUnique, patternPromises) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get default value if exists\n\t *\n\t * @abstract\n\t * @param {AbstractModel} propertyModel\n\t * @returns {*} null if no default value\n\t */\n\t_getDefaultValue(propertyModel) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get aggregation infos on current property\n\t *\n\t * @abstract\n\t * @returns {string[]|void}\n\t */\n\t_getAggregationInfos() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get properties values that MUST be set if current property value is set\n\t *\n\t * @abstract\n\t * @returns {string[]} empty if there is no dependencies\n\t */\n\t_getDependencyProperties() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get properties values that MUST NOT be set in same time\n\t *\n\t * @abstract\n\t * @returns {string[]} empty if there is no conflict\n\t */\n\tgetConflicts() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * get Property/ComhonArray restrictions\n\t *\n\t * @abstract\n\t * @param {*} currentNode\n\t * @param {AbstractModel} propertyModel\n\t * @param {Map<Promise>} patternPromises given Map will be populated if patterns found in manifest\n\t * @returns {Restriction[]}\n\t */\n\t_getRestrictions(currentNode, propertyModel, patternPromises) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * verify if current property is foreign\n\t *\n\t * @abstract\n\t */\n\t_isCurrentPropertyForeign() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * @param {*} manifest\n\t * @param {boolean} isLocal\n\t * @param {string} namespace\n\t */\n\tconstructor(manifest, isLocal, namespace) {\n\t\tif (this.constructor === ManifestParser) {\n\t\t\tthrow new Error('can\\'t instanciate abstract class ManifestParser');\n\t\t}\n\t\tthis.#manifest = manifest;\n\t\tthis.#isLocal = isLocal;\n\t\tthis.#namespace = namespace;\n\t\tthis.#interfacer = ManifestParser.getInterfacerInstance(this.getManifest());\n\t\tthis.#castValues = (this.getInterfacer() instanceof XMLInterfacer);\n\t}\n\n\t/**\n\t * verify if manifest is a local manifest\n\t *\n\t * @returns {boolean}\n\t */\n\tisLocal() {\n\t\treturn this.#isLocal;\n\t}\n\n\t/**\n\t * get manifest\n\t *\n\t * @returns {*}\n\t */\n\tgetManifest() {\n\t\treturn this.#manifest;\n\t}\n\n\t/**\n\t * get namespace used for current manifest\n\t *\n\t * @returns {string}\n\t */\n\tgetNamespace() {\n\t\treturn this.#namespace;\n\t}\n\n\t/**\n\t * get interfacer that permit to parse manifest\n\t *\n\t * @returns {string}\n\t */\n\tgetInterfacer() {\n\t\treturn this.#interfacer;\n\t}\n\n\t/**\n\t * initialize current property node, and iterator to go through properties\n\t *\n\t * @private\n\t */\n\t_initProperties() {\n\t\tthis.#currentProperties = this._getCurrentProperties();\n\t\tthis.#propertiesIterator = this.#currentProperties.values();\n\t\tif (this.#currentProperties.length > 0) {\n\t\t\tthis.#currentProperty = this.#currentProperties[0];\n\t\t\tthis.#propertiesIterator.next();\n\t\t}\n\t}\n\n\t/**\n\t * go to next property\n\t *\n\t * @returns {boolean} false if there is no next property\n\t */\n\tnextProperty() {\n\t\tif (this.#currentProperties === null) {\n\t\t\tthis._initProperties();\n\t\t}\n\t\tconst it = this.#propertiesIterator.next();\n\t\tthis.#currentProperty = it.value;\n\t\treturn !it.done;\n\t}\n\n\t/**\n\t * get manifest current property node\n\t *\n\t * @returns {*}\n\t */\n\t_getCurrentPropertyNode() {\n\t\tif (this.#currentProperties === null) {\n\t\t\tthis._initProperties();\n\t\t}\n\t\tif (!this.#currentProperty) {\n\t\t\tthrow new ComhonException('current property is out of range');\n\t\t}\n\t\treturn this.#currentProperty;\n\t}\n\n\t/**\n\t * get manifest current properties count\n\t *\n\t * @returns {integer}\n\t */\n\tgetCurrentPropertiesCount() {\n\t\tif (this.#currentProperties === null) {\n\t\t\tthis._initProperties();\n\t\t}\n\t\treturn this.#currentProperties.length;\n\t}\n\n\t/**\n\t * get boolean value from manifest (cast if necessary)\n\t *\n\t * @param {*} node node\n\t * @param {string} name value's name\n\t * @param {boolean} defaultValue used if value not found\n\t * @returns {boolean}\n\t */\n\t_getBooleanValue(node, name, defaultValue) {\n\t\treturn this.getInterfacer().hasValue(node, name)\n\t\t\t? (\n\t\t\t\tthis.#castValues\n\t\t\t\t\t? this.getInterfacer().castValueToBoolean(this.getInterfacer().getValue(node, name))\n\t\t\t\t\t: this.getInterfacer().getValue(node, name)\n\t\t\t)\n\t\t\t: defaultValue;\n\t}\n\n\t/**\n\t *\n\t * @param {*} node the parent node\n\t * @param {string} name property's name (foundable in parent node) wich value must be converted to array if necessary.\n\t * @returns {string[]}\n\t */\n\t_getPropertyArrayStringValue(node, name) {\n\t\tif (!this.getInterfacer().hasValue(node, name, true)) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._getArrayStringValue(this.getInterfacer().getValue(node, name, true));\n\t}\n\n\t/**\n\t *\n\t * @param {*} node the node that may be converted to array (typically if manifest is an XML).\n\t * @returns {string[]}\n\t */\n\t_getArrayStringValue(node) {\n\t\tif (!(this.getInterfacer() instanceof XMLInterfacer)) {\n\t\t\treturn node;\n\t\t}\n\t\tconst values = this.getInterfacer().nodeToArray(node);\n\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\tvalues[i] = this.getInterfacer().extractNodeText(values[i]);\n\t\t}\n\n\t\treturn values;\n\t}\n\n\t/**\n\t * get current property\n\t *\n\t * @param {Model|SimpleModel} propertyModelUnique unique model associated to property\n\t * @param {Map<Promise>} patternPromises given Map will be populated if patterns found in manifest\n\t * @throws {ComhonException}\n\t * @returns {Property}\n\t */\n\tgetCurrentProperty(propertyModelUnique, patternPromises) {\n\t\tlet property, name, model, isId, isPrivate, isNotNull, isRequired, isIsolated, interfaceAsNodeXml, auto;\n\t\t[name,\n\t\t\tmodel,\n\t\t\tisId,\n\t\t\tisPrivate,\n\t\t\tisNotNull,\n\t\t\tisRequired,\n\t\t\tisIsolated,\n\t\t\tinterfaceAsNodeXml,\n\t\t\tauto\n\t\t] = this._getBaseInfosProperty(propertyModelUnique, patternPromises);\n\t\tconst dependencies = this._getDependencyProperties();\n\n\t\tif (this._isCurrentPropertyForeign()) {\n\t\t\tconst modelForeign = new ModelForeign(model);\n\t\t\tlet aggregations = null;\n\t\t\tif ((model instanceof ModelArray) && model.getDimensionsCount() === 1) {\n\t\t\t\taggregations = this._getAggregationInfos();\n\t\t\t}\n\t\t\tif (aggregations === null) {\n\t\t\t\tproperty = new ForeignProperty(modelForeign, name, isPrivate, isRequired, isNotNull, dependencies);\n\t\t\t} else {\n\t\t\t\tproperty = new AggregationProperty(modelForeign, name, aggregations, isPrivate, dependencies);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconst defaultValue = this._getDefaultValue(model);\n\t\t\tconst restrictions = this._getRestrictions(this._getCurrentPropertyNode(), model, patternPromises);\n\n\t\t\tif (auto === null) {\n\t\t\t\tproperty = new Property(model, name, isId, isPrivate, isRequired, isNotNull, defaultValue, interfaceAsNodeXml, restrictions, dependencies, isIsolated);\n\t\t\t} else {\n\t\t\t\tproperty = new AutoProperty(model, name, isId, isPrivate, isRequired, interfaceAsNodeXml, dependencies, auto);\n\t\t\t}\n\t\t}\n\t\treturn property;\n\t}\n\n\t/**\n\t * get interfacer able to parse manifest\n\t *\n\t * @param {*} manifest\n\t * @returns {Interfacer}\n\t */\n\tstatic getInterfacerInstance(manifest) {\n\t\tif (manifest instanceof Element) {\n\t\t\treturn new XMLInterfacer();\n\t\t}\n\t\tif (typeof manifest === 'object' && manifest !== null) {\n\t\t\treturn new ObjectInterfacer();\n\t\t}\n\t\tthrow new ManifestException('not recognized manifest format');\n\t}\n\n}\n\nexport default ManifestParser;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Restriction from 'Logic/Model/Restriction/Restriction';\nimport ModelString from 'Logic/Model/ModelString';\nimport ModelInteger from 'Logic/Model/ModelInteger';\nimport ModelFloat from 'Logic/Model/ModelFloat';\n\nclass Enum extends Restriction {\n\n\t/** @type {string[]|integer[]|float[]} */\n\t#enumeration = [];\n\n\t/**\n\t *\n\t * @param {string[]|integer[]|float[]} enumertation\n\t */\n\tconstructor(enumeration) {\n\t\tsuper();\n\t\tthis.#enumeration = enumeration\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::satisfy()\n\t */\n\tsatisfy(value) {\n\t\treturn this.#enumeration.indexOf(value) !== -1;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::isEqual()\n\t */\n\tisEqual(restriction) {\n\t\tif (this === restriction) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!(restriction instanceof Enum)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.#enumeration.length !== restriction.#enumeration.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// copy and sort arrays\n\t\tconst arr1 = this.#enumeration.concat().sort();\n    const arr2 = restriction.#enumeration.concat().sort();\n\n    for (let i = 0; i < arr1.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n\t\t\t}\n    }\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::isAllowedModel()\n\t */\n\tisAllowedModel(model) {\n\t\treturn (model instanceof ModelInteger)\n\t\t|| (model instanceof ModelString)\n\t\t|| (model instanceof ModelFloat);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::toMessage()\n\t */\n\ttoMessage(value) {\n\t\tif ((typeof value !== 'number') && (typeof value !== 'string')) {\n\t\t\tconst type = (typeof value === 'object' && value !== null) ? value.constructor.name : (typeof value);\n\t\t\treturn `Value passed to Enum must be an integer, float or string, instance of ${type} given`;\n\t\t}\n\t\treturn '' + value + ' is' + (this.satisfy(value) ? ' ' : ' not ')\n\t\t\t+ 'in enumeration ' + JSON.stringify(this.#enumeration);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::toString()\n\t */\n\ttoString() {\n\t\treturn JSON.stringify(this.#enumeration);\n\t}\n\n}\n\nexport default Enum;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass MalformedIntervalException extends ComhonException {\n\n\t/**\n\t * @param {string} interval\n\t */\n\tconstructor(interval) {\n\t\tsuper(`interval '${interval}' not valid`, ConstantException.MALFORMED_INTERVAL_EXCEPTION);\n\t}\n\n}\n\nexport default MalformedIntervalException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass NotSupportedModelIntervalException extends ComhonException {\n\n\t/**\n\t * @param {AbstractModel} model\n\t */\n\tconstructor(model) {\n\t\tsuper(\n\t\t\t`interval cannot be defined on model '${model.getName()}'`,\n\t\t\tConstantException.NOT_SUPPORTED_MODEL_INTERVAL_EXCEPTION\n\t\t);\n\t}\n\n}\n\nexport default NotSupportedModelIntervalException;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Restriction from 'Logic/Model/Restriction/Restriction';\nimport ModelFloat from 'Logic/Model/ModelFloat';\nimport ModelDateTime from 'Logic/Model/ModelFloat';\nimport ModelInteger from 'Logic/Model/ModelInteger';\nimport ComhonDateTime from 'Logic/Object/ComhonDateTime';\nimport MalformedIntervalException from 'Logic/Exception/Restriction/MalformedIntervalException';\nimport NotSupportedModelIntervalException from 'Logic/Exception/Restriction/NotSupportedModelIntervalException';\n\nconst dateTime = /^([[\\]])([^,]*),([^,]*)([[\\]])$/;\nconst float = /^([[\\]])\\s*((?:-?\\d+(?:\\.\\d+)?)|(?:\\d*))\\s*,\\s*((?:-?\\d+(?:\\.\\d+)?)|(?:\\d*))\\s*([[\\]])$/;\nconst integer = /^([[\\]])\\s*((?:-?\\d+)|(?:\\d*))\\s*,\\s*((?:-?\\d+)|(?:\\d*))\\s*([[\\]])$/;\n\nclass Interval extends Restriction {\n\n\t// following regexs doesn't verify if left endpoint is inferior than right endpoint\n\t// there's no verification on date format only interval structure is checked\n\n\t/**\n\t * @type {string} regex to check date time interval validity\n\t *     regex doesn't verify if left endpoint is inferior than right endpoint\n\t *     there's no verification on date format only interval structure is checked\n\t */\n\tstatic get DATETIME_INTERVAL() {return dateTime;}\n\n\t/**\n\t * @type {string} regex to check float interval validity\n\t *     regex doesn't verify if left endpoint is inferior than right endpoint\n\t */\n\tstatic get FLOAT_INTERVAL() {return float;}\n\n\t/**\n\t * @type {string} regex to check integer interval validity\n\t *     regex doesn't verify if left endpoint is inferior than right endpoint\n\t */\n\tstatic get INTEGER_INTERVAL() {return integer;}\n\n\t/** @type {*} */\n\t#leftEndPoint  = null;\n\n\t/** @type {*} */\n\t#rightEndPoint = null;\n\n\t/** @type {boolean} */\n\t#isLeftClosed  = true;\n\n\t/** @type {boolean} */\n\t#isRightClosed = true;\n\n\t/** @type {SimpleModel} */\n\t#model;\n\n\t/**\n\t *\n\t * @param {string} interval\n\t * @param {SimpleModel} model\n\t * @throws {MalformedIntervalException}\n\t * @throws {NotSupportedModelIntervalException}\n\t */\n\tconstructor(interval, model) {\n\t\tsuper();\n\t\tlet matches;\n\t\tif (model instanceof ModelFloat) {\n\t\t\tif ((matches = Interval.FLOAT_INTERVAL.exec(interval)) === null) {\n\t\t\t\tthrow new MalformedIntervalException(interval);\n\t\t\t}\n\t\t\tmatches[2] = matches[2] === '' ? null : parseFloat(matches[2]);\n\t\t\tmatches[3] = matches[3] === '' ? null : parseFloat(matches[3]);\n\t\t}\n\t\telse if (model instanceof ModelInteger) {\n\t\t\tif ((matches = Interval.INTEGER_INTERVAL.exec(interval)) === null) {\n\t\t\t\tthrow new MalformedIntervalException(interval);\n\t\t\t}\n\t\t\tmatches[2] = matches[2] === '' ? null : parseInt(matches[2]);\n\t\t\tmatches[3] = matches[3] === '' ? null : parseInt(matches[3]);\n\t\t}\n\t\telse if (model instanceof ModelDateTime) {\n\t\t\tif ((matches = Interval.DATETIME_INTERVAL.exec(interval)) === null) {\n\t\t\t\tthrow new MalformedIntervalException(interval);\n\t\t\t}\n\t\t\tmatches[2] = matches[2].trim();\n\t\t\tmatches[3] = matches[3].trim();\n\t\t\tmatches[2] = matches[2] === '' ? null : new Date(matches[2]);\n\t\t\tmatches[3] = matches[3] === '' ? null : new Date(matches[3]);\n\t\t} else {\n\t\t\tthrow new NotSupportedModelIntervalException(model);\n\t\t}\n\t\tthis.#isLeftClosed  = matches[1] === '[';\n\t\tthis.#isRightClosed = matches[4] === ']';\n\t\tthis.#leftEndPoint  = matches[2];\n\t\tthis.#rightEndPoint = matches[3];\n\t\tthis.#model = model;\n\n\t\tif ((this.#leftEndPoint !== null) && (this.#rightEndPoint !== null) && this.#leftEndPoint > this.#rightEndPoint) {\n\t\t\tthrow new MalformedIntervalException(interval);\n\t\t}\n\t}\n\n\t/**\n\t * verify if interval is left closed\n\t */\n\t_isLeftClosed() {\n\t\treturn this.#isLeftClosed;\n\t}\n\n\t/**\n\t * verify if interval is left closed\n\t */\n\t_getLeftEndPoint() {\n\t\treturn this.#leftEndPoint;\n\t}\n\n\t/**\n\t * verify if interval is left closed\n\t */\n\t_isRightClosed() {\n\t\treturn this.#isRightClosed;\n\t}\n\n\t/**\n\t * verify if interval is left closed\n\t */\n\t_getRightEndPoint() {\n\t\treturn this.#rightEndPoint;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::satisfy()\n\t */\n\tsatisfy(value) {\n\t\tif (value === null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.#leftEndPoint !== null) {\n\t\t\tif (this.#isLeftClosed) {\n\t\t\t\tif (value < this.#leftEndPoint) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (value <= this.#leftEndPoint) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (this.#rightEndPoint !== null) {\n\t\t\tif (this.#isRightClosed) {\n\t\t\t\tif (value > this.#rightEndPoint) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (value >= this.#rightEndPoint) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::isEqual()\n\t */\n\tisEqual(restriction) {\n\t\treturn this === restriction\n\t\t\t|| (\n\t\t\t\t(restriction instanceof Interval)\n\t\t\t\t&& this.#model === restriction.#model\n\t\t\t\t&& this.#isLeftClosed  === restriction.#isLeftClosed\n\t\t\t\t&& this.#isRightClosed === restriction.#isRightClosed\n\t\t\t\t&& this.#leftEndPoint  === restriction.#leftEndPoint\n\t\t\t\t&& this.#rightEndPoint === restriction.#rightEndPoint\n\t\t\t);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::isAllowedModel()\n\t */\n\tisAllowedModel(model) {\n\t\treturn model === this.#model;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::toMessage()\n\t */\n\ttoMessage(value) {\n\t\tif ((typeof value !== 'number') && !(value instanceof ComhonDateTime)) {\n\t\t\tconst type = (typeof value === 'object' && value !== null) ? value.constructor.name : typeof value;\n\t\t\treturn `Value passed to Interval must be an integer, float or instance of ComhonDateTime, instance of ${type} given`;\n\t\t}\n\n\t\treturn ((value instanceof ComhonDateTime) ? value.toISOString() : value)\n\t\t\t+ ' is' + (this.satisfy(value) ? ' ' : ' not ')\n\t\t\t+ 'in interval '\n\t\t\t+ (this.#isLeftClosed ? '[' : ']')\n\t\t\t+ ((this.#leftEndPoint instanceof Date)\t? this.#leftEndPoint.toISOString()\t: this.#leftEndPoint)\n\t\t\t+ ','\n\t\t\t+ ((this.#rightEndPoint instanceof Date) ? this.#rightEndPoint.toISOString() : this.#rightEndPoint)\n\t\t\t+ (this.#isRightClosed ? ']' : '[');\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::toString()\n\t */\n\ttoString() {\n\t\treturn (this.#isLeftClosed ? '[' : ']')\n\t\t\t+ ((this.#leftEndPoint instanceof Date)\t? this.#leftEndPoint.toISOString()\t: this.#leftEndPoint)\n\t\t\t+ ','\n\t\t\t+ ((this.#rightEndPoint instanceof Date) ? this.#rightEndPoint.toISOString() : this.#rightEndPoint)\n\t\t\t+ (this.#isRightClosed ? ']' : '[');\n\t}\n\n}\n\nexport default Interval;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Restriction from 'Logic/Model/Restriction/Restriction';\nimport ModelString from 'Logic/Model/ModelString';\nimport ComhonException from 'Logic/Exception/ComhonException';\n\nclass Regex extends Restriction {\n\n\t/** @type {string} */\n\t#regex;\n\n\t/** @type {string} */\n\t#flags;\n\n\t/** @type {string} */\n\t#regexObj;\n\n\t/**\n\t *\n\t * @param {string} regex regular expression\n\t */\n\tconstructor(regex, flags = '') {\n\t\tsuper();\n\t\tif (regex instanceof Promise) {\n\t\t\tregex.then((regexValue) => {\n\t\t\t\t[this.#regex, this.#flags] = Regex.extractPatternAndFlag(regexValue);\n\t\t\t\tthis.#regexObj = new RegExp(this.#regex, this.#flags);\n\t\t\t}).catch((error) => {\n\t\t\t\tif (error instanceof ComhonException) {\n\t\t\t\t\tconsole.log(error.getMessage());\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('error when trying to retrieve pattern');\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tthis.#regex = regex;\n\t\t\tthis.#flags = flags;\n\t\t\tthis.#regexObj = new RegExp(this.#regex, flags);\n\t\t}\n\t}\n\n\t/**\n\t * extract pattern and flags.\n\t * for example extract pattern '[A-Z]+' and flag 'si' from '/[A-Z]+/si'\n\t *\n\t * @returns {Array.string}\n\t */\n\tstatic extractPatternAndFlag(regexValue) {\n\t\t\tconst lastBackSlachIndex = regexValue.lastIndexOf('/');\n\t\t\treturn [\n\t\t\t\tregexValue.substr(1, lastBackSlachIndex - 1),\n\t\t\t\tregexValue.substr(lastBackSlachIndex + 1)\n\t\t\t]\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::satisfy()\n\t */\n\tsatisfy(value) {\n\t\treturn this.#regexObj.test(value);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::isEqual()\n\t */\n\tisEqual(restriction) {\n\t\treturn this === restriction || (\n\t\t\t(restriction instanceof Regex)\n\t\t\t&& this.#regex === restriction.#regex\n\t\t\t&& this.#flags === restriction.#flags\n\t\t);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::isAllowedModel()\n\t */\n\tisAllowedModel(model) {\n\t\treturn model instanceof ModelString;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::toMessage()\n\t */\n\ttoMessage(value) {\n\t\tif (typeof value !== 'string') {\n\t\t\tconst type = (typeof value === 'object' && value !== null) ? value.constructor.name : typeof value;\n\t\t\treturn `Value passed to Regex must be a string, instance of ${type} given`;\n\t\t}\n\t\treturn '' + value + (this.satisfy(value) ? ' ' : ' doesn\\'t ')\n\t\t\t+ 'satisfy regex ' + this.#regex;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::toString()\n\t */\n\ttoString() {\n\t\treturn this.#regex;\n\t}\n\n}\n\nexport default Regex;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Interval from 'Logic/Model/Restriction/Interval';\nimport ModelArray from 'Logic/Model/ModelArray';\nimport ComhonArray from 'Logic/Object/ComhonArray';\nimport simpleModels from 'Logic/Model/Manager/SimpleModels';\n\nclass Size extends Interval {\n\n\tconstructor(interval) {\n\t\tsuper(interval, simpleModels['integer']);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::satisfy()\n\t * @param {integer} increment permit to verify if restriction is satisfied if add or remove one or several values on array\n\t */\n\tsatisfy(value, increment = 0) {\n\t\treturn (value instanceof ComhonArray) && super.satisfy(value.count() + increment);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::isEqual()\n\t */\n\tisEqual(restriction) {\n\t\treturn super.isEqual(restriction) && (restriction instanceof Size);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::isAllowedModel()\n\t */\n\tisAllowedModel(model) {\n\t\treturn model instanceof ModelArray;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::toString()\n\t * @param {integer} increment\n\t */\n\ttoMessage(value, increment = 0) {\n\t\tif (!(value instanceof ComhonArray)) {\n\t\t\tconst type = (typeof value === 'object' && value !== null) ? value.constructor.name : typeof value;\n\t\t\treturn `Value passed to Size must be an ComhonArray, instance of ${type} given`;\n\t\t}\n\n\t\treturn (increment !== 0 ? ('trying to modify comhon array from size ' + value.count() + ' to ' + (value.count() + increment) + '. ') : '')\n\t\t\t+ 'size ' + (value.count() + increment) + ' of given array'\n\t\t\t+ ' is' + (this.satisfy(value, increment) ? ' ' : ' not ')\n\t\t\t+ 'in size range '\n\t\t\t+ (this._isLeftClosed() ? '[' : ']')\n\t\t\t+ this._getLeftEndPoint()\n\t\t\t+ ','\n\t\t\t+ this._getRightEndPoint()\n\t\t\t+ (this._isRightClosed() ? ']' : '[');\n\t}\n\n}\n\nexport default Size;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Interval from 'Logic/Model/Restriction/Interval';\nimport ModelString from 'Logic/Model/ModelString';\nimport simpleModels from 'Logic/Model/Manager/SimpleModels';\n\nclass Length extends Interval {\n\n\tconstructor(interval) {\n\t\tsuper(interval, simpleModels['integer']);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::satisfy()\n\t */\n\tsatisfy(value) {\n\t\treturn (typeof value === 'string') && super.satisfy(value.length);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::isEqual()\n\t */\n\tisEqual(restriction) {\n\t\treturn super.isEqual(restriction) && (restriction instanceof Length);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::isAllowedModel()\n\t */\n\tisAllowedModel(model) {\n\t\treturn model instanceof ModelString;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::toMessage()\n\t */\n\ttoMessage(value) {\n\t\tif (typeof value !== 'string') {\n\t\t\tconst type = (typeof value === 'object' && value !== null) ? value.constructor.name : typeof value;\n\t\t\treturn `Value passed to Length must be a string, instance of ${type} given`;\n\t\t}\n\n\t\treturn 'length ' + value.length + ' of given string'\n\t\t\t+ ' is' + (this.satisfy(value) ? ' ' : ' not ')\n\t\t\t+ 'in length range '\n\t\t\t+ (this._isLeftClosed() ? '[' : ']')\n\t\t\t+ this._getLeftEndPoint()\n\t\t\t+ ','\n\t\t\t+ this._getRightEndPoint()\n\t\t\t+ (this._isRightClosed() ? ']' : '[');\n\t}\n\n}\n\nexport default Length;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Restriction from 'Logic/Model/Restriction/Restriction';\nimport ModelString from 'Logic/Model/ModelString';\n\nclass NotEmptyString extends Restriction {\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::satisfy()\n\t */\n\tsatisfy(value) {\n\t\treturn value.length > 0;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::isEqual()\n\t */\n\tisEqual(restriction) {\n\t\treturn this === restriction || ((restriction instanceof NotEmptyString));\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::isAllowedModel()\n\t */\n\tisAllowedModel(model) {\n\t\treturn model instanceof ModelString;\n\t}\n\n\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::toMessage()\n\t */\n\ttoMessage(value) {\n\t\treturn this.satisfy(value)\n\t\t\t? 'value is not empty'\n\t\t\t: 'value is empty, value must be not empty';\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::toString()\n\t */\n\ttoString() {\n\t\treturn 'Not empty';\n\t}\n\n}\n\nexport default NotEmptyString;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Restriction from 'Logic/Model/Restriction/Restriction';\nimport ModelArray from 'Logic/Model/ModelArray';\nimport ComhonArray from 'Logic/Object/ComhonArray';\n\nclass NotEmptyArray extends Restriction {\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::satisfy()\n\t * @param {integer} increment permit to verify if restriction is satisfied if add or remove one or several values on array\n\t */\n\tsatisfy(value, increment = 0) {\n\t\treturn (value instanceof ComhonArray) ?  (value.count() + increment > 0) : value.length > 0;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::isEqual()\n\t */\n\tisEqual(restriction) {\n\t\treturn this === restriction || ((restriction instanceof NotEmptyArray));\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::isAllowedModel()\n\t */\n\tisAllowedModel(model) {\n\t\treturn model instanceof ModelArray;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::toMessage()\n\t * @param {integer} increment\n\t */\n\ttoMessage(value, increment = 0) {\n\t\treturn this.satisfy(value, increment)\n\t\t\t? 'value is not empty'\n\t\t\t: (increment === -1\n\t\t\t\t? 'trying to modify comhon array and make it empty, value must be not empty'\n\t\t\t\t: 'value is empty, value must be not empty');\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {Restriction}::toString()\n\t */\n\ttoString() {\n\t\treturn 'Not empty';\n\t}\n\n}\n\nexport default NotEmptyArray;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Regex from 'Logic/Model/Restriction/Regex';\nimport Requester from 'Logic/Requester/Requester';\nimport HTTPException from 'Logic/Exception/HTTP/HTTPException';\n\nclass RegexCollection {\n\n\t#regexs = new Map();\n\n\n\t/**\n\t * get regex according specified name.\n\t * server is requested if regex is not registered.\n\t *\n\t * @async\n\t * @param string name\n\t * @throws {HTTPException}\n\t * @returns string\n\t */\n\tasync getRegex(name) {\n\t\tif (this.#regexs.has(name)) {\n\t\t\treturn this.#regexs.get(name);\n\t\t}\n\n\t\tconst promise = Requester.get('pattern/'+name).then(xhr => {\n\t\t\tif (xhr.status === 401) {\n\t\t\t\tthrow new HTTPException(xhr, `unauthorized to retrieve pattern '${name}'`);\n\t\t\t}\n\t\t\tif (xhr.status !== 200) {\n\t\t\t\tthrow new HTTPException(xhr, `error when trying to retrieve pattern '${name}'`);\n\t\t\t}\n\t\t\treturn xhr.responseText;\n\t\t});\n\t\tconst regex = new Regex(promise);\n\t\tthis.#regexs.set(name, regex);\n\n\t\t// await after set Map to be able to call getRegisteredRegex\n\t\t// and retrieve regex object without waiting\n\t\ttry {\n\t\t\tawait promise;\n\t\t} catch (e) {\n\t\t\tthis.#regexs.delete(name);\n\t\t\tthrow e;\n\t\t}\n\n\t\treturn this.#regexs.get(name);\n\t}\n\n\t/**\n\t * get registered regex according given name\n\t *\n\t * @param {string} name\n\t * @return {Regex|void} null if there is no regex registered under given name\n\t */\n\tgetRegisteredRegex(name) {\n\t\treturn this.#regexs.has(name) ? this.#regexs.get(name) : null;\n\t}\n\n\n\t/**\n\t * verify if there is a regex registered under given name.\n\t *\n\t * @param {string} name\n\t * @return {boolean}\n\t */\n\thasRegisteredRegex(name) {\n\t\treturn this.#regexs.has(name);\n\t}\n\n}\n\nexport default new RegexCollection();\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ManifestParser from 'Logic/ManifestParser/ManifestParser';\nimport ModelArray from 'Logic/Model/ModelArray';\nimport ModelDateTime from 'Logic/Model/ModelDateTime';\nimport SimpleModel from 'Logic/Model/SimpleModel';\nimport ModelString from 'Logic/Model/ModelString';\nimport ModelFloat from 'Logic/Model/ModelFloat';\nimport ModelInteger from 'Logic/Model/ModelInteger';\nimport Enum from 'Logic/Model/Restriction/Enum';\nimport Interval from 'Logic/Model/Restriction/Interval';\nimport Regex from 'Logic/Model/Restriction/Regex';\nimport Size from 'Logic/Model/Restriction/Size';\nimport Length from 'Logic/Model/Restriction/Length';\nimport NotEmptyString from 'Logic/Model/Restriction/NotEmptyString';\nimport NotEmptyArray from 'Logic/Model/Restriction/NotEmptyArray';\nimport RegexCollection from 'Logic/Model/Restriction/RegexCollection';\nimport XMLInterfacer from 'Logic/Interfacer/XMLInterfacer';\nimport ManifestException from 'Logic/Exception/Manifest/ManifestException';\n\nclass ManifestParser_V_2_0 extends ManifestParser {\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::getExtends()\n\t */\n\tgetExtends() {\n\t\tconst extendsValue = this.getInterfacer().getValue(this.getManifest(), ManifestParser._EXTENDS);\n\n\t\treturn extendsValue === null ? null : [extendsValue];\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::getInheritanceRequestable()\n\t */\n\tgetInheritanceRequestable() {\n\t\treturn this._getPropertyArrayStringValue(this.getManifest(), ManifestParser.INHERITANCE_REQUESTABLES);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::isMain()\n\t */\n\tisMain() {\n\t\treturn this._getBooleanValue(this.getManifest(), ManifestParser.IS_MAIN, false);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::isAbstract()\n\t */\n\tisAbstract() {\n\t\treturn false;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::isSharedParentId()\n\t */\n\tisSharedParentId() {\n\t\treturn false;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::sharedId()\n\t */\n\tsharedId() {\n\t\treturn null;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::getLocalModelManifestParsers()\n\t */\n\tgetLocalModelManifestParsers() {\n\t\tconst manifestParsers = {};\n\t\tconst types = !this.isLocal() && this.getInterfacer().hasValue(this.getManifest(), 'types', true)\n\t\t\t? (\n\t\t\t\t\tthis.getInterfacer() instanceof XMLInterfacer\n\t\t\t\t\t\t? this.getInterfacer().nodeToArray(this.getInterfacer().getValue(this.getManifest(), 'types', true))\n\t\t\t\t\t\t: this.getInterfacer().getValue(this.getManifest(), 'types', true)\n\t\t\t\t)\n\t\t\t: [];\n\n\t\tfor (const type of types) {\n\t\t\tif (!this.getInterfacer().hasValue(type, ManifestParser.NAME)) {\n\t\t\t\tthrow new ManifestException(\"local type name not defined\");\n\t\t\t}\n\t\t\tconst name = this.getInterfacer().getValue(type, ManifestParser.NAME);\n\t\t\tif ((typeof name !== 'string') || name === '') {\n\t\t\t\tthrow new ManifestException(\"local type name invalid\");\n\t\t\t}\n\n\t\t\tconst manifestParser = new this.constructor(type, true, this.getNamespace());\n\t\t\tmanifestParsers[this.getNamespace() + '\\\\' + name] = manifestParser;\n\t\t}\n\n\t\treturn manifestParsers;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::_getCurrentProperties()\n\t */\n\t_getCurrentProperties() {\n\t\treturn this.getInterfacer().hasValue(this.getManifest(), 'properties', true)\n\t\t\t? (\n\t\t\t\t\tthis.getInterfacer() instanceof XMLInterfacer\n\t\t\t\t\t\t? this.getInterfacer().nodeToArray(this.getInterfacer().getValue(this.getManifest(), 'properties', true))\n\t\t\t\t\t\t: this.getInterfacer().getValue(this.getManifest(), 'properties', true)\n\t\t\t\t)\n\t\t\t: [];\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::getCurrentPropertyModelUniqueName()\n\t */\n\tgetCurrentPropertyModelUniqueName() {\n\t\treturn this._getPropertyModelUniqueName(this._getCurrentPropertyNode());\n\t}\n\n\t/**\n\t *\n\t * @param {*} property\n\t * @returns {string}\n\t */\n\t_getPropertyModelUniqueName(property) {\n\t\tlet modelName = this.getInterfacer().getValue(property, 'type');\n\t\tif (modelName === 'array') {\n\t\t\tmodelName = this._getPropertyModelUniqueName(this.getInterfacer().getValue(property, 'values', true));\n\t\t}\n\t\treturn modelName;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::_isCurrentPropertyForeign()\n\t */\n\t_isCurrentPropertyForeign() {\n\t\treturn this._getBooleanValue(this._getCurrentPropertyNode(), ManifestParser.IS_FOREIGN, false);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::_getBaseInfosProperty()\n\t */\n\t_getBaseInfosProperty(propertyModelUnique, patternPromises) {\n\t\tconst currentProperty = this._getCurrentPropertyNode();\n\n\t\tlet interfaceAsNodeXml = null;\n\t\tconst isId       = this._getBooleanValue(currentProperty, ManifestParser.IS_ID, false);\n\t\tconst isPrivate  = this._getBooleanValue(currentProperty, ManifestParser.IS_PRIVATE, false);\n\t\tconst isNotNull  = this._getBooleanValue(currentProperty, ManifestParser.NOT_NULL, false);\n\t\tconst isRequired = this._getBooleanValue(currentProperty, ManifestParser.IS_REQUIRED, false);\n\t\tconst isIsolated = this._getBooleanValue(currentProperty, ManifestParser.IS_ISOLATED, false);\n\t\tconst name       = this.getInterfacer().getValue(currentProperty, ManifestParser.NAME);\n\t\tconst auto       = this.getInterfacer().getValue(currentProperty, ManifestParser.AUTO);\n\t\tconst model      = this._completePropertyModel(currentProperty, propertyModelUnique, patternPromises);\n\n\t\tif (this.getInterfacer().hasValue(currentProperty, ManifestParser.XML_ELEM_TYPE)) {\n\t\t\tconst type = this.getInterfacer().getValue(currentProperty, ManifestParser.XML_ELEM_TYPE);\n\t\t\tif (type === ManifestParser.XML_ATTRIBUTE) {\n\t\t\t\tinterfaceAsNodeXml = false;\n\t\t\t} else if (type === ManifestParser.XML_NODE) {\n\t\t\t\tinterfaceAsNodeXml = true;\n\t\t\t} else {\n\t\t\t\tthrow new ManifestException(\"invalid value 'type' for property '\" + ManifestParser.XML_ELEM_TYPE + \"'\");\n\t\t\t}\n\t\t}\n\n\t\treturn [name, model, isId, isPrivate, isNotNull, isRequired, isIsolated, interfaceAsNodeXml, auto];\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::_getAggregationInfos()\n\t */\n\t_getAggregationInfos() {\n\t\treturn null;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::_getRestrictions()\n\t */\n\t_getRestrictions(currentNode, model, patternPromises) {\n\t\tif (!(model instanceof SimpleModel)) {\n\t\t\treturn [];\n\t\t}\n\t\tconst restrictions = [];\n\n\t\tif (this._getBooleanValue(currentNode, ManifestParser.NOT_EMPTY, false)) {\n\t\t\trestrictions.push(new NotEmptyString());\n\t\t}\n\t\tif (this.getInterfacer().hasValue(currentNode, ManifestParser.LENGTH)) {\n\t\t\trestrictions.push(new Length(this.getInterfacer().getValue(currentNode, ManifestParser.LENGTH)));\n\t\t}\n\t\tif (this.getInterfacer().hasValue(currentNode, ManifestParser.ENUM, true)) {\n\t\t\tlet enumValues = this.getInterfacer().getValue(currentNode, ManifestParser.ENUM, true);\n\t\t\tif (this.getInterfacer() instanceof XMLInterfacer) {\n\t\t\t\tenumValues = this.getInterfacer().nodeToArray(enumValues);\n\t\t\t\tif (model instanceof ModelInteger) {\n\t\t\t\t\tfor (let i = 0; i < enumValues.length; i++) {\n\t\t\t\t\t\tenumValues[i] = parseInt(this.getInterfacer().extractNodeText(enumValues[i]));\n\t\t\t\t\t}\n\t\t\t\t} else if (model instanceof ModelString) {\n\t\t\t\t\tfor (let i = 0; i < enumValues.length; i++) {\n\t\t\t\t\t\tenumValues[i] = this.getInterfacer().extractNodeText(enumValues[i]);\n\t\t\t\t\t}\n\t\t\t\t} else if (model instanceof ModelFloat) {\n\t\t\t\t\tfor (let i = 0; i < enumValues.length; i++) {\n\t\t\t\t\t\tenumValues[i] = parseFloat(this.getInterfacer().extractNodeText(enumValues[i]));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new ManifestException('enum cannot be defined on ' + model.getName());\n\t\t\t\t}\n\t\t\t}\n\t\t\trestrictions.push(new Enum(enumValues));\n\t\t}\n\t\tif (this.getInterfacer().hasValue(currentNode, ManifestParser.INTERVAL)) {\n\t\t\trestrictions.push(new Interval(this.getInterfacer().getValue(currentNode, ManifestParser.INTERVAL), model));\n\t\t}\n\t\tif (this.getInterfacer().hasValue(currentNode, ManifestParser.PATTERN)) {\n\t\t\tif (this.getInterfacer().hasValue(currentNode, ManifestParser.REGEX)) {\n\t\t\t\tthrow new ManifestException(ManifestParser.PATTERN + ' cannot coexist with ' + ManifestParser.REGEX);\n\t\t\t}\n\t\t\tif (!(model instanceof ModelString)) {\n\t\t\t\tthrow new ManifestException('pattern cannot be defined on ' + model.getName());\n\t\t\t}\n\t\t\tconst pattern = this.getInterfacer().getValue(currentNode, ManifestParser.PATTERN);\n\n\t\t\tif (!RegexCollection.hasRegisteredRegex(pattern)) {\n\t\t\t\tconst promise = RegexCollection.getRegex(pattern);\n\t\t\t\tpatternPromises.set(pattern, promise);\n\t\t\t}\n\t\t\trestrictions.push(RegexCollection.getRegisteredRegex(pattern));\n\t\t} else if (this.getInterfacer().hasValue(currentNode, ManifestParser.REGEX)) {\n\t\t\tif (!(model instanceof ModelString)) {\n\t\t\t\tthrow new ManifestException('regex cannot be defined on ' + model.getName());\n\t\t\t}\n\t\t\tconst [pattern, flags] = Regex.extractPatternAndFlag(this.getInterfacer().getValue(currentNode, ManifestParser.REGEX));\n\t\t\trestrictions.push(new Regex(pattern, flags));\n\t\t}\n\n\t\treturn restrictions;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::_getDefaultValue()\n\t */\n\t_getDefaultValue(propertyModel) {\n\t\tconst currentProperty = this._getCurrentPropertyNode();\n\t\tlet defaultValue = null;\n\n\t\tif (this.getInterfacer().hasValue(currentProperty, 'default')) {\n\t\t\tdefaultValue = this.getInterfacer().getValue(currentProperty, 'default');\n\t\t\tif (propertyModel instanceof ModelDateTime) {\n\t\t\t\tconst date = new Date(defaultValue);\n\t\t\t\tif (date.toString() === 'Invalid Date') {\n\t\t\t\t\tthrow new ManifestException('invalid default value time format : ' + defaultValue);\n\t\t\t\t}\n\t\t\t} else if (propertyModel instanceof SimpleModel) {\n\t\t\t\tdefaultValue = propertyModel.importValue(defaultValue, this.getInterfacer());\n\t\t\t} else {\n\t\t\t\tthrow new ManifestException('default value can\\'t be applied on complex model');\n\t\t\t}\n\t\t}\n\n\t\treturn defaultValue;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::_getDependencyProperties()\n\t */\n\t_getDependencyProperties() {\n\t\treturn this._getPropertyArrayStringValue(this._getCurrentPropertyNode(), ManifestParser.DEPENDS);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::getConflicts()\n\t */\n\tgetConflicts() {\n\t\tlet conflicts = [];\n\t\tif (!this.getInterfacer().hasValue(this.getManifest(), ManifestParser.CONFLICTS, true)) {\n\t\t\treturn conflicts;\n\t\t}\n\t\tconflicts = this.getInterfacer().getValue(this.getManifest(), ManifestParser.CONFLICTS, true);\n\t\tif (this.getInterfacer() instanceof XMLInterfacer) {\n\t\t\tconflicts = this.getInterfacer().nodeToArray(conflicts);\n\t\t\tfor (let i = 0; i < conflicts.length; i++) {\n\t\t\t\tconflicts[i] = this._getArrayStringValue(conflicts[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn conflicts;\n\t}\n\n\t/**\n\t * add model container if needed\n\t *\n\t * @private\n\t * @param {*} propertyNode\n\t * @param {Model|SimpleModel} uniqueModel\n\t * @throws {ComhonException}\n\t * @returns {AbstractModel}\n\t */\n\t_completePropertyModel(propertyNode, uniqueModel, patternPromises) {\n\t\tlet model = uniqueModel;\n\n\t\tif (this._isArrayNode(propertyNode) || this._isAggregationNode(propertyNode)) {\n\t\t\tconst valuesNode = this.getInterfacer().getValue(propertyNode, 'values', true);\n\t\t\tif (valuesNode === null) {\n\t\t\t\tthrow new ManifestException('arrays and aggregations must have a values node');\n\t\t\t}\n\t\t\tconst valuesName = this.getInterfacer().getValue(valuesNode, 'name');\n\t\t\tif (valuesName === null) {\n\t\t\t\tthrow new ManifestException('arrays and aggregations must have a values name property');\n\t\t\t}\n\t\t\tlet isAssociative, isNotNullElement, isIsolatedElement, subModel, elementRestrictions;\n\t\t\tif (this._isAggregationNode(propertyNode)) {\n\t\t\t\tisAssociative = false;\n\t\t\t\tisNotNullElement = true;\n\t\t\t\tisIsolatedElement = true;\n\n\t\t\t\tsubModel = uniqueModel;\n\t\t\t\telementRestrictions = [];\n\t\t\t} else {\n\t\t\t\tisAssociative = this._getBooleanValue(propertyNode, ManifestParser.IS_ASSOCIATIVE, false);\n\t\t\t\tisNotNullElement = this._getBooleanValue(valuesNode, ManifestParser.NOT_NULL, false);\n\t\t\t\tisIsolatedElement = this._getBooleanValue(valuesNode, ManifestParser.IS_ISOLATED, false);\n\n\t\t\t\tsubModel = this._completePropertyModel(valuesNode, uniqueModel, patternPromises);\n\t\t\t\telementRestrictions = subModel instanceof ModelArray ? [] : this._getRestrictions(valuesNode, uniqueModel, patternPromises);\n\t\t\t}\n\t\t\tconst arrayRestrictions = [];\n\n\t\t\tif (this.getInterfacer().hasValue(propertyNode, ManifestParser.SIZE)) {\n\t\t\t\tarrayRestrictions.push(new Size(this.getInterfacer().getValue(propertyNode, ManifestParser.SIZE)));\n\t\t\t}\n\t\t\tif (this._getBooleanValue(propertyNode, ManifestParser.NOT_EMPTY, false)) {\n\t\t\t\tarrayRestrictions.push(new NotEmptyArray());\n\t\t\t}\n\t\t\tmodel = new ModelArray(subModel, isAssociative, valuesName, arrayRestrictions, elementRestrictions, isNotNullElement, isIsolatedElement);\n\t\t}\n\t\treturn model;\n\t}\n\n\t/**\n\t *\n\t * @param {*} propertyNode\n\t * @returns {boolean}\n\t */\n\t_isArrayNode(propertyNode) {\n\t\treturn this.getInterfacer().getValue(propertyNode, 'type') === 'array';\n\t}\n\n\t/**\n\t *\n\t * @param {*} propertyNode\n\t * @returns {boolean}\n\t */\n\t_isAggregationNode(propertyNode) {\n\t\treturn false;\n\t}\n\n}\n\nexport default ManifestParser_V_2_0;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ManifestParser from 'Logic/ManifestParser/ManifestParser';\nimport ManifestParser_V_2_0 from 'Logic/ManifestParser/V_2_0/ManifestParser_V_2_0';\nimport ManifestException from 'Logic/Exception/Manifest/ManifestException';\nimport Interfacer from 'Logic/Interfacer/Interfacer';\n\nconst propertyToSimpleModel = {\n\t'Comhon\\\\Manifest\\\\Property\\\\String': 'string',\n\t'Comhon\\\\Manifest\\\\Property\\\\Integer': 'integer',\n\t'Comhon\\\\Manifest\\\\Property\\\\Index': 'index',\n\t'Comhon\\\\Manifest\\\\Property\\\\Float': 'float',\n\t'Comhon\\\\Manifest\\\\Property\\\\Percentage': 'percentage',\n\t'Comhon\\\\Manifest\\\\Property\\\\Boolean': 'boolean',\n\t'Comhon\\\\Manifest\\\\Property\\\\DateTime': 'dateTime'\n};\nObject.freeze(propertyToSimpleModel);\n\nconst valueToSimpleModel = {\n\t'Comhon\\\\Manifest\\\\Value\\\\String': 'string',\n\t'Comhon\\\\Manifest\\\\Value\\\\Integer': 'integer',\n\t'Comhon\\\\Manifest\\\\Value\\\\Index': 'index',\n\t'Comhon\\\\Manifest\\\\Value\\\\Float': 'float',\n\t'Comhon\\\\Manifest\\\\Value\\\\Percentage': 'percentage',\n\t'Comhon\\\\Manifest\\\\Value\\\\Boolean': 'boolean',\n\t'Comhon\\\\Manifest\\\\Value\\\\DateTime': 'dateTime'\n};\nObject.freeze(valueToSimpleModel);\n\nclass ManifestParser_V_3_0 extends ManifestParser_V_2_0 {\n\n\t/** @type {Object} */\n\tstatic get PROPERTY_TO_SIMPLE_MODEL() {return propertyToSimpleModel;}\n\n\t/** @type {Object} */\n\tstatic get VALUE_TO_SIMPLE_MODEL() {return valueToSimpleModel;}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::isAbstract()\n\t */\n\tisAbstract() {\n\t\treturn this._getBooleanValue(this.getManifest(), ManifestParser.IS_ABSTRACT, false);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::isSharedParentId()\n\t */\n\tisSharedParentId() {\n\t\treturn this._getBooleanValue(this.getManifest(), ManifestParser.SHARE_PARENT_ID, false);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::sharedId()\n\t */\n\tsharedId() {\n\t\treturn this.getInterfacer().getValue(this.getManifest(), ManifestParser.SHARED_ID);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::getExtends()\n\t */\n\tgetExtends() {\n\t\treturn this.getInterfacer().hasValue(this.getManifest(), ManifestParser._EXTENDS, true)\n\t\t\t? this._getPropertyArrayStringValue(this.getManifest(), ManifestParser._EXTENDS)\n\t\t\t: null;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::getCurrentPropertyModelUniqueName()\n\t */\n\tgetCurrentPropertyModelUniqueName() {\n\t\tlet modelName;\n\t\tconst propertyNode = this._getCurrentPropertyNode();\n\t\tconst inheritance = this.getInterfacer().getValue(propertyNode, Interfacer.INHERITANCE_KEY);\n\t\t\n\t\tif (inheritance in ManifestParser_V_3_0.PROPERTY_TO_SIMPLE_MODEL) {\n\t\t\tmodelName = ManifestParser_V_3_0.PROPERTY_TO_SIMPLE_MODEL[inheritance];\n\t\t} else if (inheritance === 'Comhon\\\\Manifest\\\\Property\\\\Object') {\n\t\t\tmodelName = this.getInterfacer().getValue(propertyNode, 'model');\n\t\t} else if (inheritance === 'Comhon\\\\Manifest\\\\Property\\\\Array') {\n\t\t\tmodelName = this._getValueModelUniqueName(this.getInterfacer().getValue(propertyNode, 'values', true));\n\t\t} else if (inheritance === 'Comhon\\\\Manifest\\\\Property\\\\Aggregation') {\n\t\t\tconst valuesNode = this.getInterfacer().getValue(propertyNode, 'values', true);\n\t\t\tmodelName = this.getInterfacer().getValue(valuesNode, 'model');\n\t\t} else {\n\t\t\tthrow new ManifestException('invalid ' + Interfacer.INHERITANCE_KEY + ' value : ' + inheritance);\n\t\t}\n\t\treturn modelName;\n\t}\n\n\t/**\n\t *\n\t * @param {*} property\n\t * @returns {string}\n\t */\n\t_getValueModelUniqueName(valuesNode) {\n\t\tlet modelName;\n\t\tconst inheritance = this.getInterfacer().getValue(valuesNode, Interfacer.INHERITANCE_KEY);\n\n\t\tif (inheritance in ManifestParser_V_3_0.VALUE_TO_SIMPLE_MODEL) {\n\t\t\tmodelName = ManifestParser_V_3_0.VALUE_TO_SIMPLE_MODEL[inheritance];\n\t\t} else if (inheritance === 'Comhon\\\\Manifest\\\\Value\\\\Object') {\n\t\t\tmodelName = this.getInterfacer().getValue(valuesNode, 'model');\n\t\t} else if (inheritance === 'Comhon\\\\Manifest\\\\Value\\\\Array') {\n\t\t\tmodelName = this._getValueModelUniqueName(this.getInterfacer().getValue(valuesNode, 'values', true));\n\t\t} else {\n\t\t\tthrow new ManifestException('invalid ' + Interfacer.INHERITANCE_KEY + ' array value : ' + inheritance);\n\t\t}\n\t\treturn modelName;\n\t}\n\n\t/**\n\t *\n\t * @param {*} node\n\t * @returns {boolean}\n\t */\n\t_isArrayNode(node) {\n\t\tconst inheritance = this.getInterfacer().getValue(node, Interfacer.INHERITANCE_KEY);\n\t\treturn inheritance === 'Comhon\\\\Manifest\\\\Property\\\\Array' || inheritance === 'Comhon\\\\Manifest\\\\Value\\\\Array';\n\t}\n\n\t/**\n\t *\n\t * @param {*} propertyNode\n\t * @returns {boolean}\n\t */\n\t_isAggregationNode(propertyNode) {\n\t\treturn this.getInterfacer().getValue(propertyNode, Interfacer.INHERITANCE_KEY) === 'Comhon\\\\Manifest\\\\Property\\\\Aggregation';\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::_getAggregationInfos()\n\t */\n\t_getAggregationInfos() {\n\t\tlet aggregations = null;\n\t\tconst propertyNode = this._getCurrentPropertyNode();\n\n\t\tif (this._isAggregationNode(propertyNode) && this.getInterfacer().hasValue(propertyNode, ManifestParser.AGGREGATIONS, true)) {\n\t\t\taggregations = this._getPropertyArrayStringValue(propertyNode, ManifestParser.AGGREGATIONS);\n\t\t\tif (!Array.isArray(aggregations) || aggregations.length === 0) {\n\t\t\t\tthrow new ManifestException('aggregation must have at least one aggregation property');\n\t\t\t}\n\t\t}\n\n\t\treturn aggregations;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ManifestParser}::_isCurrentPropertyForeign()\n\t */\n\t_isCurrentPropertyForeign() {\n\t\tlet node = this._getCurrentPropertyNode();\n\t\tif (this._isAggregationNode(node)) {\n\t\t\treturn  true;\n\t\t}\n\t\twhile (this._isArrayNode(node)) {\n\t\t\tnode = this.getInterfacer().getValue(node, 'values', true);\n\t\t}\n\t\treturn this._getBooleanValue(node, ManifestParser.IS_FOREIGN, false);\n\t}\n}\n\nexport default ManifestParser_V_3_0;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ManifestParser_V_2_0 from 'Logic/ManifestParser/V_2_0/ManifestParser_V_2_0';\nimport ManifestParser_V_3_0 from 'Logic/ManifestParser/V_3_0/ManifestParser_V_3_0';\nimport ManifestParser from 'Logic/ManifestParser/ManifestParser';\nimport ManifestException from 'Logic/Exception/Manifest/ManifestException';\n\n/**\n * @abstract\n */\nclass ManifestParserFactory {\n\n\t/**\n\t * get manifest parser instance\n\t *\n\t * @param {*} manifest\n\t * @param {string} namespace the name space to use for local types (equal to manifest model name)\n\t * @throws {ComhonException}\n\t * @returns ManifestParser\n\t */\n\tstatic getInstance(manifest, namespace) {\n\t\tconst interfacer = ManifestParser.getInterfacerInstance(manifest);\n\n\t\tif (!interfacer.hasValue(manifest, 'version')) {\n\t\t\tthrow new ManifestException(`manifest '${namespace}' doesn't have version`);\n\t\t}\n\t\tconst version = interfacer.getValue(manifest, 'version');\n\t\tswitch (version) {\n\t\t\tcase '2.0': return new ManifestParser_V_2_0(manifest, false, namespace);\n\t\t\tcase '3.0': return new ManifestParser_V_3_0(manifest, false, namespace);\n\t\t\tdefault:    throw new ManifestException(`version ${version} not recognized for manifest ${namespace}`);\n\t\t}\n\t}\n\n}\n\nexport default ManifestParserFactory;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass NotDefinedModelException extends ComhonException {\n\n\t/**\n\t * @param {string} modelName\n\t */\n\tconstructor(modelName) {\n\t\tsuper(`manifest not found for model ${modelName}`, ConstantException.NOT_DEFINED_MODEL_EXCEPTION);\n\t}\n\n}\n\nexport default NotDefinedModelException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass AlreadyUsedModelNameException extends ComhonException {\n\n\t/**\n\t * @param {string} modelName\n\t */\n\tconstructor(modelName) {\n\t\tsuper(`model ${modelName} already used`, ConstantException.ALREADY_USED_MODEL_NAME_EXCEPTION);\n\t}\n\n}\n\nexport default AlreadyUsedModelNameException;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport simpleModels from 'Logic/Model/Manager/SimpleModels';\nimport Model from 'Logic/Model/Model';\nimport Restriction from 'Logic/Model/Restriction/Restriction';\nimport ManifestParser from 'Logic/ManifestParser/ManifestParser';\nimport ManifestParserFactory from 'Logic/ManifestParser/ManifestParserFactory';\nimport ObjectCollection from 'Logic/Object/Collection/ObjectCollection';\nimport NotDefinedModelException from 'Logic/Exception/Model/NotDefinedModelException';\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport HTTPException from 'Logic/Exception/HTTP/HTTPException';\nimport AlreadyUsedModelNameException from 'Logic/Exception/Model/AlreadyUsedModelNameException';\nimport NotSatisfiedRestrictionException from 'Logic/Exception/Value/NotSatisfiedRestrictionException';\nimport ModuleBridge from 'Logic/ModuleBridge/ModuleBridge';\nimport Requester from 'Logic/Requester/Requester';\n\nclass ModelManager {\n\n\t/** @type {string} */\n\tstatic get PROPERTIES() {return 'properties';};\n\n\t/** @type {string} */\n\tstatic get PARENT_MODELS() {return 'parentModels';};\n\n\t/** @type {string} */\n\tstatic get IS_MAIN_MODEL() {return 'isMainModel';};\n\n\t/** @type {string} */\n\tstatic get IS_ABSTRACT() {return 'is_abstract';};\n\n\t/** @type {string} */\n\tstatic get SHARED_ID_MODEL() {return 'shared_id_model';};\n\n\t/** @type {string} */\n\tstatic get CONFLICTS() {return 'conflicts';};\n\n\t/**\n\t * @type {ModelManager}\n\t */\n\tstatic #instance = null;\n\n\t/**\n\t * @type {AbstractModel[]}\n\t *     map that contain all main model and simple model instances\n\t *     an element may be a model if model is loaded\n\t *     an element may be an array that contain a non loaded model (with needed informations to load it)\n\t */\n\t#instanceModels = {};\n\n\t/**\n\t * @type {string}\n\t */\n\t#originalModelName = null;\n\n\t/**\n\t * @var {ModelRoot}\n\t */\n\t#modelRoot = null;\n\n\tstatic getInstance() {\n\t\tif (ModelManager.#instance === null) {\n\t\t\tModelManager.#instance = new ModelManager();\n\t\t}\n\t\treturn ModelManager.#instance;\n\t}\n\n\tconstructor() {\n\t\tfor (const simpleModelName in simpleModels) {\n\t\t\tif (simpleModels.hasOwnProperty(simpleModelName)) {\n\t\t\t\tthis.#instanceModels[simpleModelName] = simpleModels[simpleModelName];\n\t\t\t}\n\t\t}\n\t\tthis.#modelRoot = ModuleBridge.getModelRoot();\n\t\tif (this.#modelRoot === null) {\n\t\t\tthrow new Error(`Model root model has not been registered`);\n\t\t}\n\t\tthis.#instanceModels[this.#modelRoot.getName()] = this.#modelRoot;\n\t}\n\n\t/**\n\t * verify if specified model is instanciated (not necessary loaded)\n\t *\n\t * @param {string} modelName fully qualified name of wanted model\n\t * @returns {boolean}\n\t */\n\thasInstanceModel(modelName) {\n\t\treturn modelName in this.#instanceModels;\n\t}\n\n\t/**\n\t * verify if specified model is instanciated and loaded\n\t *\n\t * @param {string} modelName fully qualified name of wanted model\n\t * @throws {ComhonException} if model has not been registered\n\t * @returns {boolean}\n\t */\n\thasInstanceModelLoaded(modelName) {\n\t\treturn (modelName in this.#instanceModels) && this.#instanceModels[modelName].isLoaded();\n\t}\n\n\t/**\n\t * get model instance\n\t *\n\t * @async\n\t * @param {string} modelName fully qualified name of wanted model\n\t * @returns {Promise<Model|SimpleModel>}\n\t */\n\tasync getInstanceModel(modelName) {\n\t\tconst model = this._getInstanceModel(modelName);\n\t\tif (!model.isLoaded()) {\n\t\t\tawait model.load();\n\t\t}\n\t\treturn model;\n\t}\n\n\t/**\n\t * get model instance\n\t *\n\t * unlike public method, retrieved model is not necessarily loaded\n\t *\n\t * @private\n\t * @param {string} modelName fully qualified name of wanted model\n\t * @throws {ComhonException}\n\t * @returns {Model|SimpleModel}\n\t */\n\t_getInstanceModel(modelName) {\n\t\tif (typeof modelName !== 'string') {\n\t\t\tthrow new Error('first argument must be a string');\n\t\t}\n\t\tif (!(modelName in this.#instanceModels)) {\n\t\t\tnew Model(modelName);\n\t\t\t// instance model must be added during model instanciation (in constructor)\n\t\t\tif (!(modelName in this.#instanceModels)) {\n\t\t\t\tthrow new ComhonException('model not added during model instanciation');\n\t\t\t}\n\t\t}\n\t\treturn this.#instanceModels[modelName];\n\t}\n\n\t/**\n\t * add manifest parser to specified model\n\t *\n\t * @async\n\t * @param {Model} model\n\t * @returns {Model[]} models from local types\n\t */\n\tasync addManifestParser(model) {\n\t\tconst manifest = await this.getManifest(model.getName());\n\t\tconst interfacer = ManifestParser.getInterfacerInstance(manifest);\n\t\tconst fullyQualifiedName = interfacer.getValue(manifest, 'name');\n\n\t\t/**\n\t\t * the model that come from manifest (not necessarily same than model because model might be a model from local type)\n\t\t * @var {Model} mainModel\n\t\t */\n\t\tconst mainModel = this._getInstanceModel(fullyQualifiedName);\n\t\tconst manifestParser = ManifestParserFactory.getInstance(manifest, mainModel.getName());\n\t\tconst localTypeManifestParsers = manifestParser.getLocalModelManifestParsers();\n\n\t\tif (mainModel !== model && !(model.getName() in localTypeManifestParsers)) {\n\t\t\tthrow new NotDefinedModelException(model.getName());\n\t\t}\n\n\t\tmainModel.setManifestParser(manifestParser);\n\t\treturn this._instanciateLocalModels(localTypeManifestParsers);\n\t}\n\n\t/**\n\t * retrieve manifest from server according model name\n\t *\n\t * @async\n\t * @param {string} modelName\n\t * @returns {Object} retrieved manifest\n\t */\n  async getManifest(modelName) {\n    if (this.hasInstanceModelLoaded(modelName)) {\n\t\t\tthrow new ComhonException(modelName + ' model already loaded');\n    }\n\t\tconst xhr = await Requester.get('manifest/'+modelName);\n\n\t\tif (xhr.status !== 200) {\n\t\t\tthrow new HTTPException(xhr);\n\t\t}\n\t\tconst manifest = JSON.parse(xhr.responseText);\n\t\tif (manifest === null || typeof manifest !== 'object') {\n\t\t\tthrow new ComhonException('invalid manifest from server response');\n\t\t}\n\t\treturn manifest;\n  }\n\n\t/**\n\t * add instance model.\n\t * automatically called during Model instanciation\n\t *\n\t * @param {Model} model\n\t */\n\taddInstanceModel(model) {\n\t\tif (model.getName() in this.#instanceModels) {\n\t\t\tthrow new AlreadyUsedModelNameException(model.getName());\n\t\t}\n\t\tthis.#instanceModels[model.getName()] = model;\n\t}\n\n\t/**\n\t * get properties (and optional parent model, object class) of specified model\n\t *\n\t * @async\n\t * @param {Model} model\n\t * @returns [\n\t *     ModelManager.IS_MAIN_MODEL : bool\n\t *     ModelManager.IS_ABSTRACT   : bool\n\t *     ModelManager.PROPERTIES    : {Property[]}\n\t *     ModelManager.PARENT_MODELS : {Model[]}\n\t *     ModelManager.SHARED_ID_MODEL : {Model|void}\n\t *     ModelManager.CONFLICTS : {String[]}\n\t * ]\n\t */\n\tasync getProperties(model,manifestParser) {\n\t\tlet properties = null;\n\t\tlet isOriginalModel = false;\n\n\t\ttry {\n\t\t\tif ((model.getName() in this.#instanceModels) && this.#instanceModels[model.getName()].isLoaded()) {\n\t\t\t\tthrow new ComhonException(`function should not be called, model ${model.getName()} already loaded`);\n\t\t\t}\n\t\t\tif (this.#originalModelName === null) {\n\t\t\t\tthis.#originalModelName = model.getName();\n\t\t\t\tisOriginalModel = true;\n\t\t\t}\n\t\t\tconst parentModels = await this._getParentModels(model, manifestParser);\n\n\t\t\tproperties = {\n\t\t\t\t[ModelManager.IS_ABSTRACT] : manifestParser.isAbstract(),\n\t\t\t\t[ModelManager.PROPERTIES] : await this._buildProperties(parentModels, model, manifestParser),\n\t\t\t\t[ModelManager.CONFLICTS] : manifestParser.getConflicts(),\n\t\t\t};\n\t\t\tproperties[ModelManager.SHARED_ID_MODEL] = await this._getSharedIdModel(model, manifestParser, parentModels);\n\t\t\tproperties[ModelManager.IS_MAIN_MODEL] = manifestParser.isMain();\n\t\t\tif (parentModels.length === 0) {\n\t\t\t\tparentModels.push(this.#modelRoot);\n\t\t\t}\n\t\t\tproperties[ModelManager.PARENT_MODELS] = parentModels;\n\n\t\t\tif (isOriginalModel) {\n\t\t\t\tthis.#originalModelName = null;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.#originalModelName = null;\n\t\t\tthrow e;\n\t\t}\n\t\treturn properties;\n\t}\n\n\t/**\n\t * instanciate models according given local manifest parsers\n\t *\n\t * @private\n\t * @param {array} localTypeManifestParsers\n\t * @returns {Model[]} models from local types\n\t */\n\t_instanciateLocalModels(localTypeManifestParsers) {\n\t\tconst models = [];\n\t\tfor (const modelName in localTypeManifestParsers) {\n\t\t\tif (!localTypeManifestParsers.hasOwnProperty(modelName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst localManifestParser = localTypeManifestParsers[modelName];\n\t\t\tconst model = this._getInstanceModel(modelName);\n\t\t\tif (!model.isLoaded()) {\n\t\t\t\tif (model.hasManifestParser()) {\n\t\t\t\t\tthrow new AlreadyUsedModelNameException(model.getName());\n\t\t\t\t}\n\t\t\t\tmodel.setManifestParser(localManifestParser);\n\t\t\t}\n\t\t\tmodels.push(model);\n\t\t}\n\t\treturn models;\n\t}\n\n\t/**\n\t * get parent models if exist\n\t *\n\t * @async\n\t * @private\n\t * @param {Model} model\n\t * @param {ManifestParser} manifestParser\n\t * @throws {ComhonException}\n\t * @returns {Promise<Model[]>}\n\t */\n\tasync _getParentModels(model,manifestParser) {\n\t\tconst parentModels = [];\n\t\tconst modelNames = manifestParser.getExtends();\n\n\t\tif (modelNames !== null) {\n\t\t\tfor (let modelName of modelNames) {\n\t\t\t\tif (modelName in simpleModels) {\n\t\t\t\t\tthrow new ComhonException(`${model.getName()} cannot extends from ${modelName}`);\n\t\t\t\t}\n\t\t\t\tmodelName = modelName[0] === '\\\\' ? modelName.substr(1) : manifestParser.getNamespace() + '\\\\' + modelName;\n\n\t\t\t\tif (this.hasInstanceModel(modelName) && this._getInstanceModel(modelName).isLoading()) {\n\t\t\t\t\tthrow new ComhonException(`loop detected in model inheritance : ${model.getName()} and ${this.#originalModelName}`);\n\t\t\t\t}\n\t\t\t\tconst parentModel = await this.getInstanceModel(modelName);\n\t\t\t\tparentModels.push(parentModel);\n\t\t\t}\n\t\t}\n\n\t\treturn parentModels;\n\t}\n\n\t/**\n\t * build model properties\n\t *\n\t * @async\n\t * @private\n\t * @param {Model[]} parentModels\n\t * @param {Model} currentModel\n\t * @param {ManifestParser} manifestParser\n\t * @throws {ComhonException}\n\t * @returns {Property[]}\n\t */\n\tasync _buildProperties(parentModels,currentModel,manifestParser) {\n\t\t/** @var {Property[]} properties */\n\t\tconst properties = {};\n\t\tconst propertiesWithDefault = [];\n\t\tconst patternPromises = new Map();\n\n\t\tfor (const parentModel of parentModels) {\n\t\t\tfor (const property of parentModel.getProperties()) {\n\t\t\t\tconst propertyName = property.getName();\n\t\t\t\tif ((propertyName in properties) && !properties[propertyName].isEqual(property)) {\n\t\t\t\t\tthrow new ComhonException(\n\t\t\t\t\t\t`Multiple inheritance conflict on property \"${propertyName}\" `+\n\t\t\t\t\t\t`on model \"${currentModel.getName()}\"`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tproperties[propertyName] = property;\n\t\t\t}\n\t\t}\n\t\tif (manifestParser.getCurrentPropertiesCount() > 0) {\n\t\t\tdo {\n\t\t\t\tlet modelName = manifestParser.getCurrentPropertyModelUniqueName();\n\t\t\t\tif (!(modelName in simpleModels)) {\n\t\t\t\t\tmodelName = (modelName[0] !== '\\\\')\n\t\t\t\t\t\t? manifestParser.getNamespace() + '\\\\' + modelName\n\t\t\t\t\t\t: modelName.substr(1) ;\n\t\t\t\t}\n\n\t\t\t\tconst propertyModelUnique = this._getInstanceModel(modelName);\n\t\t\t\tconst property = manifestParser.getCurrentProperty(propertyModelUnique, patternPromises);\n\n\t\t\t\tif ((property.getName() in properties) && !properties[property.getName()].isEqual(property)) {\n\t\t\t\t\tthrow new ComhonException(\n\t\t\t\t\t\t\t`Inheritance conflict on property \"${property.getName()}\" `+\n\t\t\t\t\t\t\t`on model \"${currentModel.getName()}\"`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tproperties[property.getName()] = property;\n\t\t\t\tif (property.hasDefaultValue()) {\n\t\t\t\t\tpropertiesWithDefault.push(property);\n\t\t\t\t}\n\t\t\t} while (manifestParser.nextProperty());\n\t\t}\n\n\t\t// await for all patterns that must be retrieve from server\n\t\tif (patternPromises.size > 0) {\n\t\t\tawait Promise.all(patternPromises.values());\n\t\t}\n\n\t\tfor (const property of propertiesWithDefault) {\n\t\t\tconst restriction = Restriction.getFirstNotSatisifed(property.getRestrictions(), property.getDefaultValue());\n\t\t\tif (restriction !== null) {\n\t\t\t\tthrow new NotSatisfiedRestrictionException(property.getDefaultValue(), restriction);\n\t\t\t}\n\t\t}\n\n\t\treturn properties;\n\t}\n\n\t/**\n\t *\n\t * @async\n\t * @private\n\t * @param {Model} model\n\t * @param {ManifestParser} manifestParser\n\t * @param {Model[]} parentModels\n\t * @throws ComhonException\n\t */\n\tasync _getSharedIdModel(model,manifestParser, parentModels = null) {\n\t\tconst parentModel = parentModels !== null && parentModels[0] ? parentModels[0] : null;\n\t\tconst sharedIdType = manifestParser.sharedId();\n\t\tconst shareParentId = manifestParser.isSharedParentId();\n\t\tlet sharedIdModel = null;\n\n\t\tif (parentModel === null) {\n\t\t\tif (shareParentId) {\n\t\t\t\tthrow new ComhonException(`Invalid manifest that define model '${model.getName()}' : '`\n\t\t\t\t\t+ ManifestParser.SHARE_PARENT_ID + '\\' is set to true but there is no defined extends.'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (sharedIdType !== null) {\n\t\t\t\tthrow new ComhonException(`Invalid manifest that define model '${model.getName()}' : '`\n\t\t\t\t\t+ ManifestParser.SHARED_ID + '\\' is set but there is no defined extends.'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (shareParentId && (sharedIdType !== null)) {\n\t\t\tthrow new ComhonException(`Conflict in manifest that define model '${model.getName()}' : '`\n\t\t\t\t+ ManifestParser.SHARED_ID + '\\' and ' + ManifestParser.SHARE_PARENT_ID + ' cannot be defined together.'\n\t\t\t);\n\t\t}\n\t\tif ((parentModel !== null) && shareParentId) {\n\t\t\tsharedIdModel = ObjectCollection.getModelKey(parentModel);\n\t\t}\n\t\tif (sharedIdType !== null) {\n\t\t\tconst modelName = sharedIdType[0] === '\\\\' ? sharedIdType.substr(1) : manifestParser.getNamespace() + '\\\\' + sharedIdType;\n\n\t\t\tsharedIdModel = await this.getInstanceModel(modelName);\n\t\t\t// cannot call isInheritedFrom() on model because parent model is not currently set\n\t\t\tif ((parentModel === null) || (parentModel !== sharedIdModel && !parentModel.isInheritedFrom(sharedIdModel))) {\n\t\t\t\tthrow new ComhonException(`Invalid shared id type in manifest that define '${model.getName()}'. shared id type must be a parent model.`);\n\t\t\t}\n\t\t\tsharedIdModel = ObjectCollection.getModelKey(sharedIdModel);\n\t\t}\n\t\treturn sharedIdModel;\n\t}\n\n}\n\nexport default ModelManager;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\n\nclass ParameterException extends ComhonException {\n\n\t/**\n\t * @param {string} parameterName\n\t */\n\tconstructor(parameterName = null) {\n\t\tconst message = (parameterName === null)\n\t\t\t? 'Bad parameters definition : must be an array or null'\n\t\t\t: `Missing parameter : '${parameterName}' must be specified`;\n\n\t\tsuper(message);\n\t}\n\n}\n\nexport default ParameterException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\n\nclass VisitException extends ComhonException {\n\n\t/**\n\t * @type {ComhonException}\n\t */\n\t#originalException;\n\n\t/**\n\t * @type {Array.}\n\t */\n\t#stackProperties = [];\n\n\t/**\n\t *\n\t * @param {ComhonException} exception\n\t * @param {string[]} stackProperties\n\t */\n\tconstructor(exception, stackProperties) {\n\t\tif (!(exception instanceof ComhonException)) {\n\t\t\tthrow new Error('given exception is not instance of ComhonException');\n\t\t}\n\t\tconst message = \"Something goes wrong on '.\" + stackProperties.join('.') + \"' object : \\n\" + exception.getMessage();\n\t\t\tsuper(message, exception.getCode());\n\t\t\tthis.#originalException = exception;\n\t\t\tthis.#stackProperties = stackProperties;\n\t}\n\n\t/**\n\t * get original thrown exception\n\t *\n\t * @returns {ComhonException}\n\t */\n\tgetOriginalException() {\n\t\treturn this.#originalException;\n\t}\n\n\t/**\n\t * get stack properties encountered during visit\n\t *\n\t * @returns array\n\t */\n\tgetStackProperties() {\n\t\treturn this.#stackProperties;\n\t}\n\n\t/**\n\t * get stringified properties encountered during visit\n\t *\n\t * @returns {string}\n\t */\n\tgetStringifiedProperties() {\n\t\treturn '.' + this.#stackProperties.join('.');\n\t}\n}\n\nexport default VisitException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ParameterException from 'Logic/Exception/Visitor/ParameterException';\nimport VisitException from 'Logic/Exception/Visitor/VisitException';\nimport ComhonArray from 'Logic/Object/ComhonArray';\n\n/**\n * @abstract\n */\nclass Visitor {\n\n\t/** @type {ComhonObject} main object to visit */\n\tmainObject;\n\n\t/** @type {Object} parameters to apply on visitor */\n\tparams;\n\n\t/** @type {Object} instances of all visisted objects to avoid infinite loop */\n\t#oids = {};\n\n\t/** @type {string[]} stack of all properies names  already visited */\n\t#propertyNameStack;\n\n\tconstructor() {\n\t\tif (this.constructor === Visitor) {\n\t\t\tthrow new Error('can\\'t instanciate abstract class Visitor');\n\t\t}\n\t}\n\n\t/**\n\t * execute visitor\n\t *\n\t * @param {AbstractComhonObject} object\n\t * @param {array} params\n\t * @returns {*}\n\t */\n\texecute(object, params = {}) {\n\t\tthis._verifParameters(params);\n\t\tthis.#oids = {};\n\t\tthis.#propertyNameStack = [];\n\t\tthis.mainObject = object;\n\t\tthis.params = params;\n\t\tlet result = null;\n\n\t\ttry {\n\t\t\tif ((object instanceof ComhonArray) && object.getModel().isUniqueModelSimple()) {\n\t\t\t\tthrow new ComhonException('cannot visit ComhonArray that contain a SimpleModel');\n\t\t\t}\n\t\t\tthis._init(object);\n\t\t\tthis._acceptChildren(object, false);\n\t\t\tresult = this._finalize(object);\n\t\t} catch (e) {\n\t\t\tif (e instanceof VisitException) {\n\t\t\t\tthrow e;\n\t\t\t} else {\n\t\t\t\tthrow new VisitException(e, this.#propertyNameStack);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * accept to visit object of specified parent\n\t *\n\t * @private\n\t * @param {AbstractComhonObject} parentObject\n\t * @param {string} key\n\t * @param {boolean} isForeign\n\t */\n\t_accept(parentObject, key, isForeign) {\n\t\tconst object = parentObject.getValue(key);\n\t\tif (object !== null) {\n\t\t\tthis.#propertyNameStack.push(key);\n\t\t\tconst visitChild = this._visit(parentObject, key, this.#propertyNameStack, isForeign);\n\t\t\tif (visitChild && (!isForeign || (object instanceof ComhonArray))) {\n\t\t\t\tthis._acceptChildren(object, isForeign);\n\t\t\t}\n\t\t\tthis._postVisit(parentObject, key, this.#propertyNameStack, isForeign);\n\t\t\tthis.#propertyNameStack.pop();\n\t\t}\n\t}\n\n\t/**\n\t * accept to visit children of specified object\n\t *\n\t * @private\n\t * @param {AbstractComhonObject} object\n\t * @param {boolean} isForeign\n\t */\n\t_acceptChildren(object, isForeign) {\n\t\tif (object === null) {\n\t\t\treturn;\n\t\t}\n\t\tif (object instanceof ComhonArray) {\n\t\t\tfor (const keyAndValue of object) {\n\t\t\t\tthis._accept(object, keyAndValue[0], isForeign);\n\t\t\t}\n\t\t}\n\t\telse if (!(object.getOid() in this.#oids)) {\n\t\t\tthis.#oids[object.getOid()] = object;\n\t\t\tfor (const property of object.getModel().getProperties()) {\n\t\t\t\tif (!property.isUniqueModelSimple()) {\n\t\t\t\t\tthis._accept(object, property.getName(), property.isForeign());\n\t\t\t\t}\n\t\t\t}\n\t\t\tdelete this.#oids[object.getOid()];\n\t\t}\n\t}\n\n\n\t/**\n\t * verify parameters\n\t *\n\t * @private\n\t * @param {Object} params\n\t * @throws ParameterException\n\t */\n\t_verifParameters(params) {\n\t\tconst parameters = this._getMandatoryParameters();\n\t\tif (Array.isArray(parameters)) {\n\t\t\tif (parameters.length > 0) {\n\t\t\t\tif (params === null || typeof params !== 'object') {\n\t\t\t\t\tthrow new ParameterException(parameters.join(', '));\n\t\t\t\t}\n\t\t\t\tfor (const parameterName of parameters) {\n\t\t\t\t\tif (!(parameterName in params)) {\n\t\t\t\t\t\tthrow new ParameterException(parameterName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (parameters !== null) {\n\t\t\tthrow new ParameterException(null);\n\t\t}\n\t}\n\n\t/**\n\t * get mandatory parameters\n\t *\n\t * permit to define mandatory parameters.\n\t * an exception is thrown if there are missing parameters\n\t *\n\t * @abstract\n\t * @returns {Object}\n\t */\n\t_getMandatoryParameters() {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * initialize visit\n\t *\n\t * permit to initialize some informations before visit\n\t *\n\t * @abstract\n\t * @param {AbstractComhonObject} object\n\t */\n\t_init(object) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * visit object in parentObject at key\n\t *\n\t * @abstract\n\t * @param {AbstractComhonObject} parentObject\n\t * @param {string} key\n\t * @param {string} propertyNameStack\n\t * @param {boolean} isForeign\n\t */\n\t_visit(parentObject, key, propertyNameStack, isForeign) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * called after visting all children of current object\n\t *\n\t * @abstract\n\t * @param {AbstractComhonObject} parentObject\n\t * @param {string} key\n\t * @param {string} propertyNameStack\n\t * @param {boolean} isForeign\n\t */\n\t_postVisit(parentObject, key, propertyNameStack, isForeign) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n\n\t/**\n\t * finalize visit\n\t *\n\t * @abstract\n\t * @param {AbstractComhonObject} object\n\t * @returns {*} permit to return all needed information at the end of visit\n\t */\n\t_finalize(object) {\n\t\tthrow new Error('function must be overridden in children class');\n\t}\n}\n\nexport default Visitor;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Visitor from 'Logic/Visitor/Visitor';\nimport ComhonObject from 'Logic/Object/ComhonObject';\n\n/**\n * instanciate and populate ObjectCollection\n */\nclass ObjectFinder extends Visitor {\n\n\t/** @type {string} */\n\tstatic get ID() {return 'id';}\n\n\t/** @type {string} */\n\tstatic get MODEL() {return 'model';}\n\n\t/** @type {string} */\n\tstatic get SEARCH_FOREIGN() {return 'searchForeign';}\n\n\t/**\n\t *\n\t * @type {string|number}\n\t */\n\t#id;\n\n\t/**\n\t *\n\t * @type {Model}\n\t */\n\t#model;\n\n\t/**\n\t *\n\t * @type {boolean}\n\t */\n\t#searchForeign = false;\n\n\t/**\n\t *\n\t * @type {boolean}\n\t */\n\t#found = false;\n\n\t/**\n\t *\n\t * @type {string[]}\n\t */\n\t#stack = null;\n\n\t/**\n\t * {@inheritDoc}\n\t * @see {Visitor}::_getMandatoryParameters()\n\t */\n\t_getMandatoryParameters() {\n\t\treturn [ObjectFinder.ID, ObjectFinder.MODEL, ObjectFinder.SEARCH_FOREIGN];\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see {Visitor}::_init()\n\t */\n\t_init(object) {\n\t\tthis.#id = this.params[ObjectFinder.ID];\n\t\tthis.#model = this.params[ObjectFinder.MODEL];\n\t\tthis.#searchForeign = (ObjectFinder.SEARCH_FOREIGN in this.params) ? this.params[ObjectFinder.SEARCH_FOREIGN] : false;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see {Visitor}::_visit()\n\t */\n\t_visit(parentObject, key, propertyNameStack, isForeign) {\n\t\tconst value = parentObject.getValue(key);\n\n\t\tif ((value instanceof ComhonObject) && value.getId() === this.#id && value.getModel() === this.#model) {\n\t\t\tthis.#stack = propertyNameStack;\n\t\t\tthis.#found = true;\n\t\t}\n\n\t\treturn !this.#found;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see {Visitor}::_postVisit()\n\t */\n\t_postVisit(parentObject, key, propertyNameStack, isForeign) {}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see {Visitor}::_finalize()\n\t */\n\t_finalize(object) {\n\t\treturn this.#stack;\n\t}\n}\n\nexport default ObjectFinder;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass UnexpectedModelException extends ComhonException {\n\n\t/**\n\t * @param {AbstractModel} expectedModel\n\t * @param {AbstractModel} actualModel\n\t */\n\tconstructor(expectedModel, actualModel) {\n\t\tconst message = `model must be a '${expectedModel.getName()}', model '${actualModel.getName()}' given`;\n\t\tsuper(message, ConstantException.UNEXPECTED_MODEL_EXCEPTION);\n\t}\n\n}\n\nexport default UnexpectedModelException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass UndefinedPropertyException extends ComhonException {\n\n\t/**\n\t * @param {Model} model\n\t * @param {string} propertyName\n\t */\n\tconstructor(model, propertyName) {\n\t\tconst message = `Undefined property '${propertyName}' for model '${model.getName()}'`;\n\t\tsuper(message, ConstantException.UNDEFINED_PROPERTY_EXCEPTION);\n\t}\n\n}\n\nexport default UndefinedPropertyException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass NoIdPropertyException extends ComhonException {\n\n\t/**\n\t *\n\t * @param {Model} model\n\t */\n\tconstructor(model) {\n\t\tconst message = `model '${model.getName()}' doesn't have id property`;\n\t\tsuper(message, ConstantException.NO_ID_PROPERTY_EXCEPTION);\n\t}\n\n}\n\nexport default NoIdPropertyException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass AbstractObjectExportException extends ComhonException {\n\n\t/**\n\t * @param {string} modelName\n\t */\n\tconstructor(modelName) {\n\t\tsuper(\n\t\t\t`model '${modelName}' is abstract. abstract model can't be exported`,\n\t\t\tConstantException.ABSTRACT_OBJECT_EXPORT_EXCEPTION\n\t\t);\n\t}\n\n}\n\nexport default AbstractObjectExportException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass DuplicatedIdException extends ComhonException {\n\n\t/**\n\t * @param {string} id\n\t */\n\tconstructor(id) {\n\t\tsuper(`Duplicated id '${id}'`, ConstantException.DUPLICATED_ID_EXCEPTION);\n\t}\n\n}\n\nexport default DuplicatedIdException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass ContextIdException extends ComhonException {\n\n\tconstructor() {\n\t\tsuper('Cannot interface foreign value with private id in public context', ConstantException.CONTEXT_ID_EXCEPTION);\n\t}\n\n}\n\nexport default ContextIdException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass ObjectLoopException extends ComhonException {\n\n\tconstructor() {\n\t\tsuper('Object loop detected, object contain itself', ConstantException.OBJECT_LOOP_EXCEPTION);\n\t}\n\n}\n\nexport default ObjectLoopException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass MissingIdForeignValueException extends ComhonException {\n\n\tconstructor() {\n\t\tsuper('missing or not complete id on foreign value', ConstantException.MISSING_ID_FOREIGN_VALUE_EXCEPTION);\n\n\t}\n\n}\n\nexport default MissingIdForeignValueException;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport ConstantException from 'Logic/Exception/ConstantException';\n\nclass InvalidCompositeIdException extends ComhonException {\n\n\t/**\n\t * @param {string} id\n\t */\n\tconstructor(id) {\n\t\tsuper(`invalid composite id '${id}'`, ConstantException.INVALID_COMPOSITE_ID_EXCEPTION);\n\n\t}\n\n}\n\nexport default InvalidCompositeIdException;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ModelComplex from 'Logic/Model/ModelComplex';\nimport ModelArray from 'Logic/Model/ModelArray';\nimport ModelForeign from 'Logic/Model/ModelForeign';\nimport ModuleBridge from 'Logic/ModuleBridge/ModuleBridge';\nimport Interfacer from 'Logic/Interfacer/Interfacer';\nimport ComhonObject from 'Logic/Object/ComhonObject';\nimport ObjectCollection from 'Logic/Object/Collection/ObjectCollection';\nimport MainObjectCollection from 'Logic/Object/Collection/MainObjectCollection';\nimport ObjectCollectionInterfacer from 'Logic/Object/Collection/ObjectCollectionInterfacer';\nimport ObjectInterfacer from 'Logic/Interfacer/ObjectInterfacer';\nimport XMLInterfacer from 'Logic/Interfacer/XMLInterfacer';\nimport ModelManager from 'Logic/Model/Manager/ModelManager';\nimport ObjectFinder from 'Logic/Visitor/ObjectFinder';\nimport Requester from 'Logic/Requester/Requester';\nimport ApiModelNameManager from 'Logic/Model/Manager/ApiModelNameManager';\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport UnexpectedValueTypeException from 'Logic/Exception/Value/UnexpectedValueTypeException';\nimport ImportException from 'Logic/Exception/Interfacer/ImportException';\nimport ExportException from 'Logic/Exception/Interfacer/ExportException';\nimport NotDefinedModelException from 'Logic/Exception/Model/NotDefinedModelException';\nimport UnexpectedModelException from 'Logic/Exception/Model/UnexpectedModelException';\nimport UndefinedPropertyException from 'Logic/Exception/Model/UndefinedPropertyException';\nimport NoIdPropertyException from 'Logic/Exception/Model/NoIdPropertyException';\nimport AbstractObjectExportException from 'Logic/Exception/Interfacer/AbstractObjectExportException';\nimport DuplicatedIdException from 'Logic/Exception/Interfacer/DuplicatedIdException';\nimport ContextIdException from 'Logic/Exception/Interfacer/ContextIdException';\nimport ObjectLoopException from 'Logic/Exception/Interfacer/ObjectLoopException';\nimport MissingIdForeignValueException from 'Logic/Exception/Value/MissingIdForeignValueException';\nimport InvalidCompositeIdException from 'Logic/Exception/Value/InvalidCompositeIdException';\nimport ArgumentException from 'Logic/Exception/ArgumentException';\nimport UnknownServerException from 'Logic/Exception/HTTP/UnknownServerException';\nimport HTTPException from 'Logic/Exception/HTTP/HTTPException';\n\nclass Model extends ModelComplex {\n\n\t/** @type {string} */\n\t#modelName;\n\n\t/** @type {boolean} */\n\t#isLoaded = false;\n\n\t/** @type {boolean} */\n\t#isLoading = false;\n\n\t/**\n\t * list of parent models (current model extends these models).\n\t * Comhon inheriance manage multiple inheritance so it may contain several models.\n\t * first parent model (at index 0) is called main parent model.\n\t *\n\t * @var {Model[]}\n\t */\n\t#parents = [];\n\n\t/** @type {Model} */\n\t#sharedIdModel = null;\n\n\t/** @type {boolean} */\n\t#isMain = false;\n\n\t/** @type {boolean} */\n\t#isAbstract = false;\n\n\t/** @type {boolean} */\n\t#isOptionsLoaded = false;\n\n\t/** @type {ComhonObject} */\n\t#options = null;\n\n\t/** @type {Object} */\n\t#propertyIndexByName = new Map();\n\n\t/** @type {Property[]} */\n\t#properties   = [];\n\n\t/** @type {Property[]} */\n\t#idProperties = [];\n\n\t/** @type {AggregationProperty[]} */\n\t#aggregations = [];\n\n\t/** @type {Property[]} */\n\t#publicProperties  = [];\n\n\t/** @type {Property[]} */\n\t#propertiesWithDefaultValues = [];\n\n\t/** @type {Property[]} */\n\t#complexProperties = [];\n\n\t/** @type {Property[]} */\n\t#dateTimeProperties = [];\n\n\t/** @type {Property[]} */\n\t#requiredProperties = [];\n\n\t/** @type {Property[]} */\n\t#dependsProperties = [];\n\n\t/** @type {string[][]} */\n\t#conflicts = new Map();\n\n\t/** @type Property */\n\t#uniqueIdProperty = null;\n\n\t/** @type {boolean} */\n\t#hasPrivateIdProperty = false;\n\n\t#manifestParser = null;\n\n\t/**\n\t * the generated promise when load model for the first time\n\t * value is not null only during model loading\n\t *\n\t * @type {Promise}\n\t */\n\t#promiseModel = null;\n\n\t/**\n\t * the generated promise when load model for the first time\n\t * value is not null only during model loading\n\t *\n\t * @type {Promise}\n\t */\n\t#promiseOptions = null;\n\n\t/**\n\t * don't instanciate a model by yourself because it take time.\n\t * to get a model instance use singleton ModelManager.\n\t *\n\t * @param {string} modelName\n\t */\n\tconstructor(modelName) {\n\t\tsuper();\n\t\tthis.#modelName = modelName;\n\t\tif (this.constructor === Model) {\n\t\t\tModelManager.getInstance().addInstanceModel(this);\n\t\t} else {\n\t\t\t// ModelRoot\n\t\t\tthis.#isLoaded = true;\n\t\t}\n\t}\n\n\t/**\n\t * get class name\n\t *\n\t * @returns {string}\n\t */\n\tgetClassName() {\n\t\treturn 'Model';\n\t}\n\n\t/**\n\t * verify if model is loaded or not\n\t *\n\t * @returns {boolean}\n\t */\n\tisLoaded() {\n\t\treturn this.#isLoaded;\n\t}\n\n\t/**\n\t * load model\n\t *\n\t * parse related manifest, fill model with needed inofmrations\n\t *\n\t * @async\n\t * @returns {Promise<void>}\n\t */\n\tasync load() {\n\t\tif (this.#isLoaded) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.#isLoading) {\n\t\t\tawait this.#promiseModel;\n\t\t\treturn;\n\t\t}\n\t\tlet localModels = null;\n\t\ttry {\n\t\t\tthis.#promiseModel = new Promise(async (resolve, reject) => {\n\t\t\t\ttry {\n\t\t\t\t\tthis.#isLoading = true;\n\t\t\t\t\tif (this.#manifestParser === null) {\n\t\t\t\t\t\tlocalModels = await ModelManager.getInstance().addManifestParser(this);\n\t\t\t\t\t\tif (this.#manifestParser === null) {\n\t\t\t\t\t\t\tthrow new NotDefinedModelException(this.getName());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst result = await ModelManager.getInstance().getProperties(this, this.#manifestParser);\n\t\t\t\t\tthis.#isMain = result[ModelManager.IS_MAIN_MODEL];\n\t\t\t\t\tthis.#parents = result[ModelManager.PARENT_MODELS];\n\t\t\t\t\tthis.#sharedIdModel = result[ModelManager.SHARED_ID_MODEL];\n\t\t\t\t\tthis._setProperties(result[ModelManager.PROPERTIES]);\n\t\t\t\t\tthis.#isAbstract = result[ModelManager.IS_ABSTRACT];\n\n\t\t\t\t\tfor (const properties of result[ModelManager.CONFLICTS]) {\n\t\t\t\t\t\tfor (let i = 0; i < properties.length; i++) {\n\t\t\t\t\t\t\tif (!this.#conflicts.has(properties[i])) {\n\t\t\t\t\t\t\t\tthis.#conflicts.set(properties[i], []);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (let j = 0; j < properties.length; j++) {\n\t\t\t\t\t\t\t\tif (j !== i) {\n\t\t\t\t\t\t\t\t\tthis.#conflicts.get(properties[i]).push(properties[j]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const propertyNameAndConflicts of this.#conflicts) {\n\t\t\t\t\t\tObject.freeze(propertyNameAndConflicts[1]);\n\t\t\t\t\t}\n\t\t\t\t\tObject.freeze(this.#conflicts);\n\t\t\t\t\tObject.freeze(this.#parents);\n\t\t\t\t\tObject.freeze(this.#propertyIndexByName);\n\t\t\t\t\tObject.freeze(this.#properties);\n\t\t\t\t\tObject.freeze(this.#idProperties);\n\t\t\t\t\tObject.freeze(this.#aggregations);\n\t\t\t\t\tObject.freeze(this.#publicProperties);\n\t\t\t\t\tObject.freeze(this.#propertiesWithDefaultValues);\n\t\t\t\t\tObject.freeze(this.#complexProperties);\n\t\t\t\t\tObject.freeze(this.#dateTimeProperties);\n\t\t\t\t\tObject.freeze(this.#dependsProperties);\n\t\t\t\t\tObject.freeze(this.#requiredProperties);\n\n\t\t\t\t\tthis.#isLoaded  = true;\n\t\t\t\t\tthis.#isLoading = false;\n\t\t\t\t\tthis.#manifestParser = null;\n\t\t\t\t\tresolve();\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t});\n\t\t\tawait this.#promiseModel;\n\t\t\tthis.#promiseModel = null;\n\t\t} catch (e) {\n\t\t\t// reinitialize attributes if any exception\n\t\t\tthis.#isLoading = false;\n\t\t\tthis.#parents = [];\n\t\t\tthis.#propertyIndexByName = new Map();\n\t\t\tthis.#properties   = [];\n\t\t\tthis.#idProperties = [];\n\t\t\tthis.#aggregations = [];\n\t\t\tthis.#publicProperties  = [];\n\t\t\tthis.#propertiesWithDefaultValues = [];\n\t\t\tthis.#complexProperties = [];\n\t\t\tthis.#dateTimeProperties = [];\n\t\t\tthis.#dependsProperties = [];\n\t\t\tthis.#conflicts = [];\n\t\t\tthis.#requiredProperties = [];\n\t\t\tthis.#uniqueIdProperty = null;\n\t\t\tthis.#hasPrivateIdProperty = false;\n\t\t\tthis.#manifestParser = null;\n\n\t\t\tif (localModels !== null) {\n\t\t\t\tfor (const localModel of localModels) {\n\t\t\t\t\tlocalModel.#manifestParser = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * set manifest parser to populate model attributes.\n\t * should be called only during model loading.\n\t *\n\t * @param {ManifestParser} manifestParser\n\t * @throws ComhonException\n\t */\n\tsetManifestParser(manifestParser) {\n\t\tif (this.#manifestParser !== null) {\n\t\t\tthrow new ComhonException('error during model \\''+this.#modelName+'\\' loading');\n\t\t}\n\t\tthis.#manifestParser = manifestParser;\n\t}\n\n\t/**\n\t * verify if model has a manifest parser set.\n\t * should be called only during model loading.\n\t *\n\t * @returns {boolean}\n\t */\n\thasManifestParser() {\n\t\treturn this.#manifestParser !== null;\n\t}\n\n\t/**\n\t * set differents properties\n\t *\n\t * @param {Property[]} properties\n\t */\n\t_setProperties(properties) {\n\t\tlet publicIdProperties = [];\n\t\tlet property;\n\t\tlet i = 0;\n\n\t\tfor (let propertyName in properties) {\n\t\t\tif (!properties.hasOwnProperty(propertyName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tproperty = properties[propertyName];\n\t\t\tif (property.isId()) {\n\t\t\t\tthis.#idProperties.push(property);\n\t\t\t\tif (!property.isPrivate()) {\n\t\t\t\t\tpublicIdProperties.push(property);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (property.hasDefaultValue()) {\n\t\t\t\tthis.#propertiesWithDefaultValues.push(property);\n\t\t\t} else if (property.isAggregation()) {\n\t\t\t\tthis.#aggregations.push(property);\n\t\t\t}\n\t\t\tif (!property.isPrivate()) {\n\t\t\t\tthis.#publicProperties.push(property);\n\t\t\t}\n\t\t\tif (property.isComplex()) {\n\t\t\t\tthis.#complexProperties.push(property);\n\t\t\t}\n\t\t\tif (property.hasModelDateTime()) {\n\t\t\t\tthis.#dateTimeProperties.push(property);\n\t\t\t}\n\t\t\tif (property.isRequired()) {\n\t\t\t\tthis.#requiredProperties.push(property);\n\t\t\t}\n\t\t\tif (property.hasDependencies()) {\n\t\t\t\tthis.#dependsProperties.push(property);\n\t\t\t}\n\t\t\tthis.#propertyIndexByName.set(propertyName, i);\n\t\t\tthis.#properties.push(property);\n\t\t\ti++;\n\t\t}\n\t\tif (this.#idProperties.length === 1) {\n\t\t\tthis.#uniqueIdProperty = this.#idProperties[0];\n\t\t}\n\t\tif (this.#idProperties.length !== publicIdProperties.length) {\n\t\t\tthis.#hasPrivateIdProperty = true;\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelComplex}::getObjectInstance()\n\t * @returns {ComhonObject}\n\t */\n\tgetObjectInstance(isloaded = true) {\n\t\treturn new ComhonObject(this, isloaded);\n\t}\n\n\t/**\n\t * verify if model is abstract.\n\t * object with abstract model may be instanciated but cannot be set as loaded and cannot be interfaced\n\t *\n\t * @returns {boolean}\n\t */\n\tisAbstract() {\n\t\treturn this.#isAbstract;\n\t}\n\n\t/**\n\t * get model that share id with current model.\n\t * if a model is return it is inevitably a parent of current model.\n\t * it may be the direct parent or the parent of parent, etc...\n\t *\n\t * @returns {Model|void} null if there is no parent model that share id with current model.\n\t */\n\tgetSharedIdModel() {\n\t\treturn this.#sharedIdModel;\n\t}\n\n\t/**\n\t * get parent models. Comhon inheriance manage multiple inheritance so it may return several models.\n\t *\n\t * @returns {Model[]} if current model doesn't extend from any models, an empty array is returned.\n\t */\n\tgetParents() {\n\t\treturn this.#parents;\n\t}\n\n\t/**\n\t * get parent model at specified index (default 0)\n\t *\n\t * @returns {Model|void} null if parent model at specified index doesn't exist\n\t */\n\tgetParent(index = 0) {\n\t\treturn this.#parents[index] ? this.#parents[index] : null;\n\t}\n\n\t/**\n\t * get first shared id parent model found. search from direct parent to last parent.\n\t *\n\t * @returns {Model|void} null if no parent model matches\n\t */\n\tgetFirstSharedIdParentMatch() {\n\t\treturn this.getSharedIdParentMatch(true);\n\t}\n\n\t/**\n\t * get last shared id parent model found. search from direct parent to last parent.\n\t *\n\t * @returns {Model|void} null if no parent model matches\n\t */\n\tgetLastSharedIdParentMatch() {\n\t\treturn this.getSharedIdParentMatch(false);\n\t}\n\n\t/**\n\t * get first or last shared id parent model found. search from direct parent two last parent.\n\t *\n\t * @param {boolean} first if true stop at first parent match otherwise coninue to last parent match\n\t * @returns {Model|void} null if no parent model matches\n\t */\n\tgetSharedIdParentMatch(first) {\n\t\tlet model = this;\n\t\tlet parentMatch = null;\n\t\tconst shareIdModel = ObjectCollection.getModelKey(this);\n\t\twhile (model.getParent() !== null) {\n\t\t\tmodel = model.getParent();\n\t\t\tif (ObjectCollection.getModelKey(model) !== shareIdModel) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tparentMatch = model;\n\t\t\tif (first) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn parentMatch;\n\t}\n\n\t/**\n\t * verify if model extends from at least another one\n\t *\n\t * @returns {boolean}\n\t */\n\thasParent() {\n\t\treturn this.#parents.length > 0;\n\t}\n\n\t/**\n\t * verify if current model inherit from specified model\n\t *\n\t * @param {Model} model\n\t * @returns {boolean}\n\t */\n\tisInheritedFrom(model) {\n\t\tif (!this.isLoaded()) {\n\t\t\tthrow new ComhonException('current model is not loaded, cannot verify if current model is inherited from given model');\n\t\t}\n\t\tlet isInherited = false;\n\n\t\tfor (const parent of this.getParents()) {\n\t\t\tisInherited = model === parent;\n\t\t\tif (!isInherited) {\n\t\t\t\tisInherited = parent.isInheritedFrom(model);\n\t\t\t}\n\t\t\tif (isInherited) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn isInherited;\n\t}\n\n\t/**\n\t * get model name\n\t *\n\t * @returns {string}\n\t */\n\tgetName() {\n\t\treturn this.#modelName;\n\t}\n\n\t/**\n\t * get namespace of model\n\t *\n\t * @returns {string}\n\t */\n\tgetNameSpace() {\n\t\tconst name = this.getName();\n\t\tconst pos = name.lastIndexOf('\\\\');\n\n\t\treturn (pos !== -1) ? name.substr(0, pos + 1) : '';\n\t}\n\n\t/**\n\t * get short name of model (name without namespace)\n\t *\n\t * @returns {string}\n\t */\n\tgetShortName() {\n\t\tconst name = this.getName();\n\t\tconst pos = name.lastIndexOf('\\\\');\n\n\t\treturn (pos !== -1) ? name.substr(pos + 1) : name;\n\t}\n\n\t/**\n\t * verify if model is loading or not\n\t *\n\t * @returns {boolean}\n\t */\n\tisLoading() {\n\t\treturn this.#isLoading;\n\t}\n\n\t/**\n\t * get model properties\n\t *\n\t * @returns {Property[]}\n\t */\n\tgetProperties() {\n\t\treturn this.#properties;\n\t}\n\n\t/**\n\t * get model properties according Private/Public context\n\t *\n\t * @param {boolean} isPrivate\n\t * @returns {Property[]}\n\t */\n\t_getContextProperties(isPrivate) {\n\t\treturn isPrivate ? this.#properties : this.#publicProperties;\n\t}\n\n\t/**\n\t * get model complex properties i.e. properties with model different than SimpleModel\n\t *\n\t * @returns {Property[]}\n\t */\n\tgetComplexProperties() {\n\t\treturn this.#complexProperties;\n\t}\n\n\t/**\n\t * get model properties with dateTime model\n\t *\n\t * @returns {Property[]}\n\t */\n\tgetDateTimeProperties() {\n\t\treturn this.#dateTimeProperties;\n\t}\n\n\t/**\n\t * get model public properties\n\t *\n\t * @returns {Property[]}\n\t */\n\tgetPublicProperties() {\n\t\treturn this.#publicProperties;\n\t}\n\n\t/**\n\t * get model properties names\n\t *\n\t * @returns {string[]}\n\t */\n\tgetPropertiesNames() {\n\t\tconst propertiesNames = [];\n\t\tfor (const property of this.#properties) {\n\t\t\tpropertiesNames.push(property.getName());\n\t\t}\n\t\treturn propertiesNames;\n\t}\n\n\t/**\n\t * get property according specified name\n\t *\n\t * @param {string} propertyName\n\t * @param {boolean} throwException if true, throw an exception if property doesn't exist\n\t * @throws {UndefinedPropertyException}\n\t * @returns {Property|void}\n\t *     null if property with specified name doesn't exist\n\t */\n\tgetProperty(propertyName, throwException = false) {\n\t\tif (this.hasProperty(propertyName)) {\n\t\t\treturn this.#properties[this.#propertyIndexByName.get(propertyName)];\n\t\t}\n\t\telse if (throwException) {\n\t\t\tthrow new UndefinedPropertyException(this, propertyName);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * get id property according specified name\n\t *\n\t * @param {string} propertyName\n\t * @param {boolean} throwException\n\t * @throws {UndefinedPropertyException}\n\t * @returns {Property|void} null if property with specified name doesn't exist or is not an id property\n\t */\n\tgetIdProperty(propertyName, throwException = false) {\n\t\tconst property = this.getProperty(propertyName, throwException);\n\t\tif (property !== null && property.isId()) {\n\t\t\treturn property;\n\t\t}\n\t\telse if (throwException) {\n\t\t\tthrow new UndefinedPropertyException(this, propertyName);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * verify if model has property with specified name\n\t *\n\t * @param {string} propertyName\n\t * @returns {boolean}\n\t */\n\thasProperty(propertyName) {\n\t\treturn this.#propertyIndexByName.has(propertyName);\n\t}\n\n\t/**\n\t * verify if model has id property with specified name\n\t *\n\t * @param {string} propertyName\n\t * @returns {boolean}\n\t */\n\thasIdProperty(propertyName) {\n\t\treturn this.getIdProperty(propertyName) !== null;\n\t}\n\n\t/**\n\t * get id properties\n\t *\n\t * @returns {Property[]}\n\t */\n\tgetIdProperties() {\n\t\treturn this.#idProperties;\n\t}\n\n\t/**\n\t * get id property if there is one and only one id property\n\t *\n\t * @returns {Property|void}\n\t *            null if there is no id property or there are several id properties\n\t */\n\tgetUniqueIdProperty() {\n\t\treturn this.#uniqueIdProperty;\n\t}\n\n\t/**\n\t * verify if there is one and only one id property\n\t *\n\t * @returns {boolean}\n\t */\n\thasUniqueIdProperty() {\n\t\treturn this.#uniqueIdProperty !== null;\n\t}\n\n\t/**\n\t * verify if model has at least one Private id property\n\t *\n\t * @returns {boolean}\n\t */\n\thasPrivateIdProperty() {\n\t\treturn this.#hasPrivateIdProperty;\n\t}\n\n\t/**\n\t * verify if model has at least one id property\n\t *\n\t * @returns {boolean}\n\t */\n\thasIdProperties() {\n\t\treturn this.#idProperties.length > 0;\n\t}\n\n\t/**\n\t * get properties with default value\n\t *\n\t * @returns {Property[]}\n\t */\n\tgetPropertiesWithDefaultValues() {\n\t\treturn this.#propertiesWithDefaultValues;\n\t}\n\n\t/**\n\t * get aggregation proprties\n\t *\n\t * @returns {AggregationProperty[]}\n\t */\n\tgetAggregationProperties() {\n\t\treturn this.#aggregations;\n\t}\n\n\t/**\n\t * get required properties\n\t *\n\t * @returns {Property[]}\n\t */\n\tgetRequiredProperties() {\n\t\treturn this.#requiredProperties;\n\t}\n\n\t/**\n\t * verify if specified property has conflits with other properties.\n\t * a property has conflict with other properties if property value MUST NOT be set when other properties values are set.\n\t *\n\t * @param {string} propertyName name of property\n\t * @returns {boolean}\n\t */\n\thasPropertyConflicts(propertyName) {\n\t\treturn this.#conflicts.has(propertyName);\n\t}\n\n\t/**\n\t * get properties names that have conflicts with specified property.\n\t * a property has conflict with other properties if property value MUST NOT be set when other properties values are set.\n\t *\n\t * @param {string} propertyName name of property\n\t * @returns {string[]}\n\t */\n\tgetPropertyConflicts(propertyName) {\n\t\treturn this.#conflicts.has(propertyName) ? this.#conflicts.get(propertyName) : [];\n\t}\n\n\t/**\n\t * get all conflicts.\n\t * a property has conflict with other properties if property value MUST NOT be set when other properties values are set.\n\t *\n\t * @returns {string[]}\n\t */\n\tgetConflicts() {\n\t\treturn this.#conflicts;\n\t}\n\n\t/**\n\t * get all properties that depends on other property(ies).\n\t * a property depends on other properties if property value MAY be set only if other properties values are set.\n\t *\n\t * @returns {Property[]}\n\t */\n\tgetDependsProperties() {\n\t\treturn this.#dependsProperties;\n\t}\n\n\t/**\n\t * verify if model is a main model\n\t * if true that means comhon object with current model might be stored in MainObjectCollection\n\t *\n\t * @returns {boolean}\n\t */\n\tisMain() {\n\t\treturn this.#isMain;\n\t}\n\n\t/**\n\t * load options\n\t *\n\t * @async\n\t * @private\n\t * @returns {Promise<ComhonObject>}\n\t */\n\tasync _loadOptions() {\n\t\tif (!this.#isOptionsLoaded) {\n\t\t\tconst apiModelName = ApiModelNameManager.getApiModelName(this.#modelName) ?? this.#modelName;\n\t\t\ttry {\n\t\t\t\tconst xhr = await Requester.options(apiModelName);\n\t\t\t\tif (xhr.status !== 200) {\n\t\t\t\t\tthrow new HTTPException(xhr);\n\t\t\t\t}\n\t\t\t\tif (xhr.responseText !== '') {\n\t\t\t\t\tconst objectInterfacer = new ObjectInterfacer();\n\t\t\t\t\tconst optionsModel = await ModelManager.getInstance().getInstanceModel('Comhon\\\\Options');\n\t\t\t\t\tthis.#options = await optionsModel.import(objectInterfacer.fromString(xhr.responseText), objectInterfacer);\n\t\t\t\t} else {\n\t\t\t\t\t// simulate unique request by puting a random id '1'\n\t\t\t\t\tconst unique = await Requester.options(apiModelName+'/1');\n\t\t\t\t\tthis.#options = this._initOptionsMethods(xhr.getResponseHeader('Allow'), unique.getResponseHeader('Allow'));\n\t\t\t\t}\n\t\t\t\tthis.#isOptionsLoaded = true;\n\t\t\t} catch (e) {\n\t\t\t\t// UnknownServerException may happened due to CORS that block request OPTIONS\n\t\t\t\t// that may return 404 (the exact error is not catchable)\n\t\t\t\t// (if model does't exist or is not requestable, 404 is returned on OPTIONS request)\n\t\t\t\tif (e instanceof UnknownServerException || (e instanceof HTTPException && e.getCode() === 404)) {\n\t\t\t\t\tthis.#options = this._initOptionsMethods(null, null);\n\t\t\t\t\tthis.#isOptionsLoaded = true;\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * load options\n\t *\n\t * @async\n\t * @private\n\t * @returns {Promise<ComhonObject>}\n\t */\n\tasync _initOptionsMethods(collectionAllowHeader, uniqueAllowHeader) {\n\t\tconst collectionAllow = collectionAllowHeader === null ? [] : collectionAllowHeader.replace(/\\s/g, '').split(',');\n\t\tconst uniqueAllow = uniqueAllowHeader === null ? [] : uniqueAllowHeader.replace(/\\s/g, '').split(',');\n\n\t\tconst optionsModel = await ModelManager.getInstance().getInstanceModel('Comhon\\\\Options');\n\t\tconst options = optionsModel.getObjectInstance(true);\n\t\toptions.setValue('name', this.#modelName);\n\t\tconst collection = await options.initValue('collection');\n\t\tconst collectionAllowed = await collection.initValue('allowed_methods');\n\t\tfor (const allow of collectionAllow) {\n\t\t\tcollectionAllowed.pushValue(allow);\n\t\t}\n\t\tconst unique = await options.initValue('unique');\n\t\tconst uniqueAllowed = await unique.initValue('allowed_methods');\n\t\tfor (const allow of uniqueAllow) {\n\t\t\tuniqueAllowed.pushValue(allow);\n\t\t}\n\n\t\treturn options;\n\t}\n\n\t/**\n\t * get options\n\t *\n\t * @async\n\t * @returns {Promise<ComhonObject>}\n\t */\n\tasync getOptions() {\n\t\tif (!this.#isOptionsLoaded) {\n\t\t\tif (this.#promiseOptions === null) {\n\t\t\t\tthis.#promiseOptions = this._loadOptions();\n\t\t\t}\n\t\t\tawait this.#promiseOptions;\n\t\t\tthis.#promiseOptions = null;\n\t\t}\n\t\treturn this.#options;\n\t}\n\n\t/**\n\t * encode multiple ids in json format\n\t *\n\t * @param {array} idValues\n\t * @returns {string}\n\t */\n\tstatic encodeId(idValues) {\n\t\treturn idValues.length > 0 ? null : JSON.stringify(idValues);\n\t}\n\n\t/**\n\t * decode multiple ids from json format\n\t *\n\t * @param {string} id\n\t * @returns {Array.}\n\t */\n\tdecodeId(id) {\n\t\tconst decodedId = JSON.parse(id);\n\t\tif (!Array.isArray(decodedId) || (this.getIdProperties().length !== decodedId.length)) {\n\t\t\tthrow new InvalidCompositeIdException(id);\n\t\t}\n\t\treturn decodedId;\n\t}\n\n\t/**\n\t * verify if composite id has all id values not null and are not empty string.\n\t * do not verify values types.\n\t *\n\t * @param {string} id\n\t * @returns {boolean}\n\t */\n\tisCompleteId(id) {\n\t\tif (this.hasUniqueIdProperty()) {\n\t\t\treturn true;\n\t\t}\n\t\tconst decodedId = this.decodeId(id);\n\t\tfor (let i = 0; i < decodedId.length; i++) {\n\t\t\tif ((decodedId[i] === null) || decodedId[i] === '') {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * verify if during import we stay in first level object or not\n\t *\n\t * @param {boolean} isCurrentLevelFirstLevel\n\t * @returns {boolean}\n\t */\n\t_isNextLevelFirstLevel(isCurrentLevelFirstLevel) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * load comhon object\n\t *\n\t * @async\n\t * @param {string|integer} id\n\t * @param {string[]} propertiesFilter\n\t * @param {boolean} forceLoad if object already exists and is already loaded, force to reload object\n\t * @throws {ComhonException}\n\t * @returns {Promise<ComhonObject|void>} null if load is unsuccessfull\n\t */\n\tasync loadObject(id, propertiesFilter = null, forceLoad = false) {\n\t\tif (id === null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (!this.hasIdProperties()) {\n\t\t\tthrow new NoIdPropertyException(this);\n\t\t}\n\t\tlet object = MainObjectCollection.getObject(id, this);\n\t\tlet newObject;\n\n\t\tif (object === null) {\n\t\t\tobject = this._buildObjectFromId(id, false, false);\n\t\t\tnewObject = true;\n\t\t} else if (object.isLoaded() && !forceLoad) {\n\t\t\treturn object;\n\t\t} else {\n\t\t\tnewObject = false;\n\t\t}\n\n\t\ttry {\n\t\t\tconst success = await object.load(propertiesFilter, forceLoad);\n\t\t\tif (!success && newObject) {\n\t\t\t\tobject.reset(); // remove object from main object collection if needed\n\t\t\t}\n\t\t\treturn success ? object : null;\n\t\t} catch (e) {\n\t\t\tif (newObject) {\n\t\t\t\tobject.reset(); // remove object from main object collection if needed\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractModel}::_export()\n\t */\n\t_export(object, nodeName, interfacer, isFirstLevel, objectCollectionInterfacer, nullNodes, oids, isolate = false) {\n\t\t/** @var {ComhonObject} object */\n\t\tif (object === null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (object.getModel().isAbstract()) {\n\t\t\tthrow new AbstractObjectExportException(object.getModel().getName());\n\t\t}\n\t\tif (!isFirstLevel || interfacer.mustValidate()) {\n\t\t\tobject.validate();\n\t\t}\n\n\t\tconst node              = interfacer.createNode(nodeName);\n\t\tconst isPrivate         = interfacer.isPrivateContext();\n\t\tconst onlyUpdatedValues = isFirstLevel && interfacer.hasToExportOnlyUpdatedValues();\n\t\tconst propertiesFilter  = isFirstLevel ? interfacer.getPropertiesFilter() : null;\n\t\tlet originalCollection, exportedValue;\n\n\t\tif (object.getOid() in oids) {\n\t\t\tif (oids[object.getOid()] > 0) {\n\t\t\t\tthrow new ObjectLoopException();\n\t\t\t}\n\t\t} else {\n\t\t\toids[object.getOid()] = 0;\n\t\t}\n\t\toids[object.getOid()]++;\n\n\t\tif (object.getModel().hasIdProperties()) {\n\t\t\tif (objectCollectionInterfacer.hasNewObject(object.getId(), object.getModel())) {\n\t\t\t\tthrow new DuplicatedIdException(object.getId());\n\t\t\t}\n\t\t\tobjectCollectionInterfacer.addObject(object, false);\n\t\t}\n\t\tif (isolate) {\n\t\t\toriginalCollection = objectCollectionInterfacer;\n\t\t\tobjectCollectionInterfacer = new ObjectCollectionInterfacer();\n\t\t}\n\n\t\tlet propertyName, value;\n\t\tfor ([propertyName, value] of object) {\n\t\t\ttry {\n\t\t\t\tconst property = object.getModel().getProperty(propertyName);\n\t\t\t\tif (\n\t\t\t\t\tproperty.isInterfaceable(isPrivate)\n\t\t\t\t\t&& (!onlyUpdatedValues || property.isId() || object.isUpdatedValue(propertyName))\n\t\t\t\t\t&& ((propertiesFilter === null) || (propertiesFilter.indexOf(propertyName) !== -1))\n\t\t\t\t) {\n\t\t\t\t\tif ((value === null) && (nullNodes !== null)) {\n\t\t\t\t\t\t// if nullNodes is not null interfacer must be a xml interfacer\n\t\t\t\t\t\texportedValue = interfacer.createNode(propertyName);\n\t\t\t\t\t\tnullNodes.push(exportedValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\texportedValue = property.getLoadedModel()._export(value, propertyName, interfacer, false, objectCollectionInterfacer, nullNodes, oids, property.isIsolated());\n\t\t\t\t\t}\n\t\t\t\t\tinterfacer.setValue(node, exportedValue, propertyName, property.isInterfacedAsNodeXml());\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthrow new ExportException(e, propertyName);\n\t\t\t}\n\t\t}\n\t\tif (object.getModel() !== this) {\n\t\t\tinterfacer.setValue(node, object.getModel().getName(), Interfacer.INHERITANCE_KEY);\n\t\t}\n\t\tif (isolate) {\n\t\t\tif (interfacer.hasToVerifyReferences()) {\n\t\t\t\tthis._verifyReferences(object, objectCollectionInterfacer);\n\t\t\t}\n\t\t\tobjectCollectionInterfacer = originalCollection;\n\t\t\tobjectCollectionInterfacer.addObject(object, false);\n\t\t}\n\t\toids[object.getOid()]--;\n\t\treturn node;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelComplex}::_exportId()\n\t */\n\t_exportId(object, nodeName, interfacer, objectCollectionInterfacer, nullNodes) {\n\t\tconst model = object.getModel();\n\t\tlet exportedId;\n\t\tif (!model.hasIdProperties()) {\n\t\t\tthrow new ComhonException(`cannot export id, actual model '${model.getName()}' doesn't have id`);\n\t\t}\n\t\tif (!interfacer.isPrivateContext() && model.hasPrivateIdProperty()) {\n\t\t\tthrow new ContextIdException();\n\t\t}\n\t\tobjectCollectionInterfacer.addObject(object, true);\n\t\t// for object model different than current model but that share id with current model\n\t\t// we may export only id whitout inheritance\n\t\t// but for main model we keep inheritance because it can be a usefull information\n\t\tif (model === this || (!model.isMain() && ObjectCollection.getModelKey(this) === ObjectCollection.getModelKey(model))) {\n\t\t\texportedId = Model._toInterfacedId(object);\n\t\t} else {\n\t\t\tif (!model.isInheritedFrom(this)) {\n\t\t\t\tthrow new UnexpectedModelException(this, model);\n\t\t\t}\n\t\t\texportedId = interfacer.createNode(nodeName);\n\t\t\tinterfacer.setValue(exportedId, Model._toInterfacedId(object), Interfacer.COMPLEX_ID_KEY);\n\t\t\tinterfacer.setValue(exportedId, model.getName(), Interfacer.INHERITANCE_KEY);\n\t\t}\n\n\t\treturn exportedId;\n\t}\n\n\t/**\n\t * get inherited model name from interfaced object\n\t *\n\t * @private\n\t * @param {*} interfacedObject\n\t * @param Interfacer interfacer\n\t * @returns {string|void}\n\t */\n\t_getInheritedModelName(interfacedObject, interfacer) {\n\t\treturn interfacer.getValue(interfacedObject, Interfacer.INHERITANCE_KEY);\n\t}\n\n\t/**\n\t * get inherited model\n\t *\n\t * @async\n\t * @private\n\t * @param {string} inheritanceModelName\n\t * @returns {Promise<Model>}\n\t */\n\tasync _getInheritedModel(inheritanceModelName) {\n\t\tconst model = await ModelManager.getInstance().getInstanceModel(inheritanceModelName);\n\t\tif (model !== this && !model.isInheritedFrom(this)) {\n\t\t\tthrow new UnexpectedModelException(this, model);\n\t\t}\n\t\treturn model;\n\t}\n\n\t/**\n\t * get id from interfaced object\n\t *\n\t * @param {*} interfacedObject\n\t * @param {Interfacer} interfacer\n\t * @param {boolean} isFirstLevel\n\t * @returns {*}\n\t */\n\tgetIdFromInterfacedObject(interfacedObject, interfacer, isFirstLevel) {\n\t\tconst isPrivate = interfacer.isPrivateContext();\n\t\tlet propertyName;\n\t\tif (this.#uniqueIdProperty !== null) {\n\t\t\tif (!this.#uniqueIdProperty.isInterfaceable(isPrivate)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpropertyName = this.#uniqueIdProperty.getName();\n\t\t\tconst id = interfacer.getValue(interfacedObject, propertyName, this.#uniqueIdProperty.isInterfacedAsNodeXml());\n\t\t\treturn this.#uniqueIdProperty.getLoadedModel().importValue(id, interfacer);\n\t\t}\n\t\tconst idValues = [];\n\t\tlet hasIds = false;\n\n\t\tfor (const idProperty of this.getIdProperties()) {\n\t\t\tif (idProperty.isInterfaceable(isPrivate)) {\n\t\t\t\tpropertyName = idProperty.getName();\n\t\t\t\tif (interfacer.hasValue(interfacedObject, propertyName, idProperty.isInterfacedAsNodeXml())) {\n\t\t\t\t\thasIds = true;\n\t\t\t\t}\n\t\t\t\tconst idValue = interfacer.getValue(interfacedObject, propertyName, idProperty.isInterfacedAsNodeXml());\n\t\t\t\tidValues.push(idProperty.getLoadedModel().importValue(idValue, interfacer));\n\t\t\t} else {\n\t\t\t\tidValues.push(null);\n\t\t\t}\n\t\t}\n\t\treturn hasIds ? Model.encodeId(idValues) : null;\n\t}\n\n\t/**\n\t * get comhon object instance according model and interfaced object\n\t *\n\t * @async\n\t * @param {*} interfacedObject\n\t * @param {Interfacer} interfacer\n\t * @param {boolean} isFirstLevel\n\t * @param {ObjectCollectionInterfacer} objectCollectionInterfacer\n\t * @returns {Promise<ComhonObject>}\n\t */\n\tasync _getOrCreateObjectInstanceFromInterfacedObject(interfacedObject, interfacer, isFirstLevel, objectCollectionInterfacer) {\n\t\tconst inheritance = this._getInheritedModelName(interfacedObject, interfacer);\n\t\tconst model = inheritance === null ? this : await this._getInheritedModel(inheritance);\n\t\tconst id = model.getIdFromInterfacedObject(interfacedObject, interfacer, isFirstLevel);\n\n\t\treturn model._getOrCreateObjectInstance(id, interfacer, isFirstLevel, false, objectCollectionInterfacer);\n\t}\n\n\t/**\n\t * get or create an instance of AbstractComhonObject\n\t *\n\t * @param {integer}|string id\n\t * @param {Interfacer} interfacer\n\t * @param {boolean} isFirstLevel\n\t * @param {boolean} isForeign\n\t * @param {ObjectCollectionInterfacer} objectCollectionInterfacer\n\t * @throws {ComhonException}\n\t * @returns {AbstractComhonObject}\n\t */\n\t_getOrCreateObjectInstance(id, interfacer, isFirstLevel, isForeign, objectCollectionInterfacer) {\n\t\tlet object;\n\t\tif ((id === null) || !this.hasIdProperties()) {\n\t\t\tobject = this.getObjectInstance(false);\n\t\t}\n\t\telse {\n\t\t\tconst model = ObjectCollection.getModelKey(this);\n\t\t\tobject = objectCollectionInterfacer.getObject(id, model);\n\t\t\tif ((object !== null) && !isForeign && objectCollectionInterfacer.hasNewObject(id, model)) {\n\t\t\t\tthrow new DuplicatedIdException(id);\n\t\t\t}\n\t\t\tif (this.#isMain && (object === null)) {\n\t\t\t\tobject = MainObjectCollection.getObject(id, this);\n\t\t\t}\n\t\t\tif (object === null) {\n\t\t\t\tobject = this._buildObjectFromId(id, false, interfacer.hasToFlagValuesAsUpdated());\n\t\t\t\tobjectCollectionInterfacer.addObject(object, isForeign);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this.isInheritedFrom(object.getModel()) && ObjectCollection.getModelKey(this) === ObjectCollection.getModelKey(object.getModel())) {\n\t\t\t\t\tobject.cast(this);\n\t\t\t\t}\n\t\t\t\tif (isFirstLevel) {\n\t\t\t\t\tif (interfacer.getMergeType() === Interfacer.OVERWRITE) {\n\t\t\t\t\t\tconst isLoaded = object.isLoaded();\n\t\t\t\t\t\tobject.reset(false);\n\t\t\t\t\t\tobject.setIsLoaded(isLoaded);\n\t\t\t\t\t}\n\t\t\t\t} else if (!isForeign) {\n\t\t\t\t\tobject.reset(false);\n\t\t\t\t}\n\t\t\t\tobjectCollectionInterfacer.addObject(object, isForeign);\n\t\t\t}\n\t\t}\n\t\treturn object;\n\t}\n\n\t/**\n\t * import interfaced object\n\t *\n\t * build comhon object with values from interfaced object\n\t * import may create an object or update an existing object\n\t *\n\t * @async\n\t * @param {*} interfacedObject\n\t * @param {Interfacer} interfacer\n\t * @throws {ComhonException}\n\t * @returns {Promise<ComhonObject>}\n\t */\n\tasync import(interfacedObject, interfacer) {\n\t\ttry {\n\t\t\treturn this._importRoot(interfacedObject, interfacer);\n\t\t}\n\t\tcatch (e) {\n\t\t\tthrow new ImportException(e);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelComplex}::_importRoot()\n\t * @returns {ComhonObject}\n\t */\n\tasync _importRoot(interfacedObject, interfacer, rootObject = null, isolate = false) {\n\t\tif (!interfacer.isNodeValue(interfacedObject)) {\n\t\t\tif ((interfacer instanceof ObjectInterfacer) && Array.isArray(interfacedObject) && (interfacedObject.length === 0)) {\n\t\t\t\tinterfacedObject = {};\n\t\t\t} else {\n\t\t\t\tthrow new UnexpectedValueTypeException(interfacedObject, interfacer.getNodeClasses().join(' or '));\n\t\t\t}\n\t\t}\n\n\t\treturn super._importRoot(interfacedObject, interfacer, rootObject, isolate);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelComplex}::_getRootObject()\n\t */\n\tasync _getRootObject(interfacedObject, interfacer) {\n\t\treturn this._getOrCreateObjectInstanceFromInterfacedObject(\n\t\t\tinterfacedObject,\n\t\t\tinterfacer,\n\t\t\ttrue,\n\t\t\tnew ObjectCollectionInterfacer()\n\t\t);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelComplex}::_initObjectCollectionInterfacer()\n\t */\n\t_initObjectCollectionInterfacer(object, mergeType) {\n\t\tconst objectCollectionInterfacer = mergeType === Interfacer.MERGE\n\t\t\t? new ObjectCollectionInterfacer(object)\n\t\t\t: new ObjectCollectionInterfacer();\n\n\t\tobjectCollectionInterfacer.addStartObject(object, false);\n\t\tobjectCollectionInterfacer.addObject(object, false);\n\n\t\treturn objectCollectionInterfacer;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractModel}::_import()\n\t */\n\tasync _import(interfacedObject, interfacer, isFirstLevel, objectCollectionInterfacer, isolate = false) {\n\t\tif (interfacer.isNullValue(interfacedObject)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (!interfacer.isNodeValue(interfacedObject)) {\n\t\t\tif ((interfacer instanceof ObjectInterfacer) && Array.isArray(interfacedObject) && (interfacedObject.length === 0)) {\n\t\t\t\tinterfacedObject = {};\n\t\t\t} else {\n\t\t\t\tthrow new UnexpectedValueTypeException(interfacedObject, interfacer.getNodeClasses().join(' or '));\n\t\t\t}\n\t\t}\n\t\tconst object = await this._getOrCreateObjectInstanceFromInterfacedObject(interfacedObject, interfacer, isFirstLevel, objectCollectionInterfacer);\n\n\t\tif (isolate) {\n\t\t\tobjectCollectionInterfacer = isFirstLevel\n\t\t\t\t? new ObjectCollectionInterfacer(object)\n\t\t\t\t: new ObjectCollectionInterfacer();\n\t\t\tobjectCollectionInterfacer.addStartObject(object, false);\n\t\t\tobjectCollectionInterfacer.addObject(object, false);\n\t\t}\n\t\tawait this._fillObject(object, interfacedObject, interfacer, isFirstLevel, objectCollectionInterfacer);\n\t\tif (isolate) {\n\t\t\tif (interfacer.hasToVerifyReferences()) {\n\t\t\t\tthis._verifyReferences(object, objectCollectionInterfacer);\n\t\t\t}\n\t\t}\n\t\treturn object;\n\t}\n\n\t/**\n\t * fill comhon object with values from interfaced object\n\t *\n\t * @async\n\t * @param {AbstractComhonObject} object\n\t * @param {*} interfacedObject\n\t * @param {Interfacer} interfacer\n\t * @throws {ComhonException}\n\t * @returns {Promise<void>}\n\t */\n\tasync fillObject(object, interfacedObject, interfacer) {\n\t\tthis.verifValue(object);\n\n\t\ttry {\n\t\t\tconst inheritance = this._getInheritedModelName(interfacedObject, interfacer, true);\n\t\t\tif (inheritance !== null) {\n\t\t\t\tconst newModel = await ModelManager.getInstance().getInstanceModel(inheritance);\n\t\t\t\tobject.cast(newModel);\n\t\t\t}\n\t\t\tconst model = object.getModel();\n\t\t\tmodel._verifIdBeforeFillObject(object, model.getIdFromInterfacedObject(interfacedObject, interfacer, true), interfacer.hasToFlagValuesAsUpdated());\n\n\t\t\tconst imported = await model._importRoot(interfacedObject, interfacer, object);\n\t\t\tif (imported !== object) {\n\t\t\t\tthrow new ComhonException('invalid object instance');\n\t\t\t}\n\t\t}\n\t\tcatch (e) {\n\t\t\tif (e instanceof ComhonException) {\n\t\t\t\tthrow new ImportException(e);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * verify comhon object to fill\n\t *\n\t * check if has right model and right id\n\t *\n\t * @private\n\t * @param {ComhonObject} object\n\t * @param {*} id\n\t * @param {boolean} flagAsUpdated\n\t * @throws {ComhonException}\n\t */\n\t_verifIdBeforeFillObject(object, id, flagAsUpdated) {\n\t\tif (object.getModel() !== this) {\n\t\t\tthrow new UnexpectedModelException(this, object.getModel());\n\t\t}\n\t\tif (!this.hasIdProperties()) {\n\t\t\treturn ;\n\t\t}\n\t\tif (!object.hasCompleteId()) {\n\t\t\tthis._fillObjectwithId(object, id, flagAsUpdated);\n\t\t}\n\t\tif (!object.hasCompleteId()) {\n\t\t\treturn ;\n\t\t}\n\t\tif (object.getId() !== id) {\n\t\t\tconst messageId = id === null ? 'null' : id;\n\t\t\tthrow new ComhonException(`id must be the same as imported value id : ${object.getId()} !== ${messageId}`);\n\t\t}\n\t}\n\n\t/**\n\t * fill comhon object with values from interfaced object\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelComplex}::_fillObject()\n\t */\n\tasync _fillObject(\n\t\tobject,\n\t\tinterfacedObject,\n\t\tinterfacer,\n\t\tisFirstLevel,\n\t\tobjectCollectionInterfacer,\n\t\tisolate = false\n\t) {\n\t\tif (!(object instanceof ComhonObject)) {\n\t\t\tthrow new ArgumentException(object, 'ComhonObject', 1);\n\t\t}\n\t\tconst model = object.getModel();\n\t\tif (!object.isA(this)) {\n\t\t\tthrow new UnexpectedModelException(this, model);\n\t\t}\n\t\tlet unchangedValues;\n\t\tlet processUnchangedValues = isFirstLevel && interfacer.hasToVerifyReferences()\n\t\t\t&& interfacer.getMergeType() === Interfacer.MERGE;\n\t\tif (processUnchangedValues) {\n\t\t\tunchangedValues = object.getObjectValues();\n\t\t\tif (unchangedValues.size === 0) {\n\t\t\t\tprocessUnchangedValues = false;\n\t\t\t}\n\t\t}\n\n\t\tconst isPrivate         = interfacer.isPrivateContext();\n\t\tconst flagAsUpdated     = interfacer.hasToFlagValuesAsUpdated();\n\t\tconst properties        = model._getContextProperties(isPrivate);\n\t\tconst nullNodes         = interfacer instanceof XMLInterfacer ? interfacer.getNullNodes(interfacedObject) : null;\n\t\tlet value;\n\n\t\tfor (const property of properties) {\n\t\t\tlet propertyName;\n\t\t\ttry {\n\t\t\t\tconst propertyName = property.getName();\n\t\t\t\tif (property.isInterfaceable(isPrivate)) {\n\t\t\t\t\tif (interfacer.hasValue(interfacedObject, propertyName, property.isInterfacedAsNodeXml())) {\n\t\t\t\t\t\tconst interfacedValue = interfacer.getValue(interfacedObject, propertyName, property.isInterfacedAsNodeXml());\n\t\t\t\t\t\tif (interfacer.isNullValue(interfacedValue)) {\n\t\t\t\t\t\t\tvalue = null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst propertyModel = await property.getModel();\n\t\t\t\t\t\t\tvalue = await propertyModel._import(\n\t\t\t\t\t\t\t\tinterfacedValue,\n\t\t\t\t\t\t\t\tinterfacer,\n\t\t\t\t\t\t\t\tpropertyModel._isNextLevelFirstLevel(isFirstLevel),\n\t\t\t\t\t\t\t\tobjectCollectionInterfacer,\n\t\t\t\t\t\t\t\tproperty.isIsolated()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tobject.setValue(propertyName, value, flagAsUpdated);\n\t\t\t\t\t\tif (processUnchangedValues) {\n\t\t\t\t\t\t\tunchangedValues.delete(propertyName);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (!property.isInterfacedAsNodeXml() && (nullNodes !== null) && (nullNodes.indexOf(propertyName) !== -1)) {\n\t\t\t\t\t\tobject.setValue(propertyName, null, flagAsUpdated);\n\t\t\t\t\t\tif (processUnchangedValues) {\n\t\t\t\t\t\t\tunchangedValues.delete(propertyName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof ComhonException) {\n\t\t\t\t\tthrow new ImportException(e, propertyName);\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (isFirstLevel) {\n\t\t\tif (interfacer.hasToFlagObjectAsLoaded()) {\n\t\t\t\tobject.setIsLoaded(true);\n\t\t\t}\n\t\t\tif (interfacer.mustValidate()) {\n\t\t\t\tobject.validate();\n\t\t\t}\n\t\t\tif (processUnchangedValues) {\n\t\t\t\tthis._processUnchangeValues(unchangedValues, objectCollectionInterfacer);\n\t\t\t}\n\t\t} else {\n\t\t\tobject.setIsLoaded(true);\n\t\t\tobject.validate();\n\t\t}\n\t}\n\n\t/**\n\t * add unchanged values of existing objects in new object collections.\n\t * that will permit to verify references at the end of inport\n\t *\n\t * @private\n\t * @param {Map.AbstractComhonObject} unchangedValues\n\t * @param {ObjectCollectionInterfacer} objectCollectionInterfacer\n\t */\n\t_processUnchangeValues(unchangedValues, objectCollectionInterfacer) {\n\t\tfor (const [name, value] of unchangedValues) {\n\t\t\tconst propertyModel = this.getProperty(name).getLoadedModel();\n\t\t\tif (propertyModel instanceof ModelForeign) {\n\t\t\t\tif (propertyModel.getLoadedModel() instanceof ModelArray) {\n\t\t\t\t\tfor (const element of ModelArray.getOneDimensionalValues(value, true)) {\n\t\t\t\t\t\tobjectCollectionInterfacer.addObject(element, true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tobjectCollectionInterfacer.addObject(value, true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tObjectCollection.build(value, true, false, objectCollectionInterfacer.getNewObjectCollection());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * create or get comhon object according interfaced id\n\t *\n\t * @async\n\t * @param {*} interfacedId\n\t * @param {Interfacer} interfacer\n\t * @param {boolean} isFirstLevel\n\t * @param {ObjectCollectionInterfacer} objectCollectionInterfacer\n\t * @returns {Promise<ComhonObject>}\n\t */\n\tasync _importId(interfacedId, interfacer, isFirstLevel, objectCollectionInterfacer) {\n\t\tlet id, model;\n\t\tif (interfacer.isComplexInterfacedId(interfacedId)) {\n\t\t\tif (!interfacer.hasValue(interfacedId, Interfacer.COMPLEX_ID_KEY) || !interfacer.hasValue(interfacedId, Interfacer.INHERITANCE_KEY)) {\n\t\t\t\tthrow new ComhonException('object id must have property \\''+Interfacer.COMPLEX_ID_KEY+'\\' and \\''+Interfacer.INHERITANCE_KEY+'\\'');\n\t\t\t}\n\t\t\tid = interfacer.getValue(interfacedId, Interfacer.COMPLEX_ID_KEY);\n\t\t\tconst inheritance = interfacer.getValue(interfacedId, Interfacer.INHERITANCE_KEY);\n\t\t\tmodel = await this._getInheritedModel(inheritance);\n\t\t}\n\t\telse {\n\t\t\tid = interfacedId;\n\t\t\tmodel = this;\n\t\t\tif (interfacer instanceof XMLInterfacer && id instanceof Element) {\n\t\t\t\tid = interfacer.extractNodeText(id);\n\t\t\t}\n\t\t}\n\t\tif (!model.hasIdProperties()) {\n\t\t\tthrow new ComhonException(`cannot import id, actual model '${model.getName()}' doesn't have id`);\n\t\t}\n\t\tif (!interfacer.isPrivateContext() && model.hasPrivateIdProperty()) {\n\t\t\tthrow new ContextIdException();\n\t\t}\n\t\tif (id === null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (\n\t\t\tmodel.hasUniqueIdProperty()\n\t\t\t&& (\n\t\t\t\t(isFirstLevel && interfacer.isStringifiedValues())\n\t\t\t\t|| interfacer instanceof XMLInterfacer\n\t\t\t)\n\t\t) {\n\t\t\tid = model.getUniqueIdProperty().getLoadedModel().importValue(id, interfacer);\n\t\t}\n\t\tif ((typeof id === 'object' && id !== null) || id === '') {\n\t\t\tid = (typeof id === 'object' && id !== null) ? JSON.stringify(id) : id;\n\t\t\tthrow new ComhonException(`malformed id '${id}' for model '${model.modelName}'`);\n\t\t}\n\n\t\treturn model._getOrCreateObjectInstance(id, interfacer, false, true, objectCollectionInterfacer);\n\t}\n\n\t/**\n\t * build interface id from comhon object\n\t *\n\t * @private\n\t * @param {ComhonObject} object\n\t * @throws {ComhonException}\n\t * @returns {integer|string}\n\t */\n\t static _toInterfacedId(object) {\n\t\tif (!object.hasCompleteId()) {\n\t\t\tthrow new MissingIdForeignValueException();\n\t\t}\n\t\treturn object.getId();\n\t}\n\n\t/**\n\t * create comhon object and fill it with id\n\t *\n\t * @param {*} id\n\t * @param {boolean} isloaded\n\t * @param {boolean} flagAsUpdated\n\t * @returns {ComhonObject}\n\t */\n\t_buildObjectFromId(id, isloaded, flagAsUpdated) {\n\t\treturn this._fillObjectwithId(this.getObjectInstance(isloaded), id, flagAsUpdated);\n\t}\n\n\t/**\n\t * fill comhon object with id\n\t *\n\t * @param {ComhonObject} object\n\t * @param {*} id\n\t * @param {boolean} flagAsUpdated\n\t * @throws {ComhonException}\n\t * @returns {ComhonObject}\n\t */\n\t_fillObjectwithId(object, id, flagAsUpdated) {\n\t\tif (object.getModel() !== this) {\n\t\t\tthrow new UnexpectedModelException(this, object.getModel());\n\t\t}\n\t\tif (id !== null) {\n\t\t\tobject.setId(id, flagAsUpdated);\n\t\t}\n\t\treturn object;\n\t}\n\n\t/**\n\t * verify if value is correct according current model\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tverifValue(value) {\n\t\tif (!(value instanceof ComhonObject) || !value.isA(this)) {\n\t\t\tthrow new UnexpectedValueTypeException(value, `ComhonObject(${this.getName()})`);\n\t\t}\n\t\treturn true;\n\t}\n\n}\n\nclass ModelRoot extends Model {\n\n\t/**\n\t * don't instanciate a model by yourself because it take time.\n\t * to get a model instance use singleton ModelManager.\n\t *\n\t * @param {string} modelName\n\t */\n\t constructor() {\n\t\t super('Comhon\\\\Root');\n\t }\n\n \t/**\n \t * get class name\n \t *\n \t * @returns {string}\n \t */\n \tgetClassName() {\n \t\treturn 'ModelRoot';\n \t}\n\n}\n\n// we register some module to avoid import loop\n// due to strong dependencies that make inherited class loading fail\nModuleBridge.registerModelRoot(new ModelRoot());\nModuleBridge.registerObjectFinder(ObjectFinder);\n\nexport default Model;\n","/*\n * This file is part of the Comhon package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ComhonException from 'Logic/Exception/ComhonException';\n\nclass IncompatibleValueException extends ComhonException {\n\n\t/**\n\t *\n\t * @param {*} interfacedObject\n\t * @param {Interfacer} interfacer\n\t */\n\tconstructor(interfacedObject, interfacer) {\n\t\tlet type;\n\t\tif (interfacedObject === null) {\n\t\t\ttype = 'null';\n\t\t} else {\n\t\t\ttype = (typeof interfacedObject === 'object') ? interfacedObject.constructor.name : (typeof interfacedObject);\n\t\t}\n\t\tsuper('value (' + type + ') imcompatible with interfacer (' + interfacer.constructor.name + ')');\n\t}\n\n}\n\nexport default IncompatibleValueException;\n","/*\n * This file is part of the comhon-front package.\n *\n * (c) Jean-Philippe <jeanphilippe.perrotton@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ModelContainer from 'Logic/Model/ModelContainer';\nimport ModelForeign from 'Logic/Model/ModelForeign';\nimport Model from 'Logic/Model/Model';\nimport ComhonArray from 'Logic/Object/ComhonArray';\nimport ObjectCollectionInterfacer from 'Logic/Object/Collection/ObjectCollectionInterfacer';\nimport Restriction from 'Logic/Model/Restriction/Restriction';\nimport NotNull from 'Logic/Model/Restriction/NotNull';\nimport Interfacer from 'Logic/Interfacer/Interfacer';\nimport XMLInterfacer from 'Logic/Interfacer/XMLInterfacer';\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport UnexpectedValueTypeException from 'Logic/Exception/Value/UnexpectedValueTypeException';\nimport UnexpectedArrayException from 'Logic/Exception/Value/UnexpectedArrayException';\nimport ImportException from 'Logic/Exception/Interfacer/ImportException';\nimport ExportException from 'Logic/Exception/Interfacer/ExportException';\nimport NotSatisfiedRestrictionException from 'Logic/Exception/Value/NotSatisfiedRestrictionException';\nimport IncompatibleValueException from 'Logic/Exception/Interfacer/IncompatibleValueException';\nimport ArgumentException from 'Logic/Exception/ArgumentException';\n\nclass ModelArray extends ModelContainer {\n\n\t/**\n\t * @type {string} name of each element\n\t *     for exemple if we have a ModelArray 'children', each element name would be 'child'\n\t */\n\t#elementName;\n\n\t/**\n\t * @type {boolean}\n\t */\n\t#isAssociative;\n\n\t/**\n\t * @type {boolean}\n\t */\n\t#isNotNullElement;\n\n\t/**\n\t * @type {boolean}\n\t */\n\t#isIsolatedElement;\n\n\t/**\n\t * @var {Restriction[]}\n\t */\n\t#arrayRestrictions = [];\n\n\t/**\n\t * @var {Restriction[]}\n\t */\n\t#elementRestrictions = [];\n\n\t/**\n\t *\n\t * @param {AbstractModel} model\n\t * @param {boolean} isAssociative\n\t * @param {string} elementName\n\t * @param {Restriction[]} arrayRestrictions\n\t * @param {Restriction[]} elementRestrictions\n\t * @param {boolean} isNotNullElement\n\t * @param {boolean} isIsolatedElement\n\t */\n\tconstructor(model, isAssociative, elementName, arrayRestrictions = [], elementRestrictions = [], isNotNullElement = false, isIsolatedElement = false) {\n\t\tif (model instanceof ModelForeign) {\n\t\t\tthrow new ArgumentException(model.getClassName(), ['ModelUnique', 'ModelArray'], 1);\n\t\t}\n\t\tsuper(model);\n\t\tthis.#isAssociative = isAssociative;\n\t\tthis.#elementName = elementName;\n\t\tthis.#isNotNullElement = isNotNullElement;\n\t\tthis.#isIsolatedElement = isIsolatedElement;\n\t\tthis.#arrayRestrictions = arrayRestrictions;\n\t\tthis.#elementRestrictions = elementRestrictions;\n\n\t\tif (this.#isIsolatedElement && !(this._getModel() instanceof Model)) {\n\t\t\tthrow new ComhonException('only ModelArray with contained model instance of \"Model\" may be isolated');\n\t\t}\n\t\tfor (const arrayRestriction of this.#arrayRestrictions) {\n\t\t\tif (!arrayRestriction.isAllowedModel(this)) {\n\t\t\t\tthrow new ComhonException('restriction doesn\\'t allow specified model'+this.getClassName());\n\t\t\t}\n\t\t}\n\t\tfor (const elementRestriction of this.#elementRestrictions) {\n\t\t\tif (!elementRestriction.isAllowedModel(this._getModel())) {\n\t\t\t\tthrow new ComhonException('restriction doesn\\'t allow specified model'+this._getModel().getClassName());\n\t\t\t}\n\t\t}\n\t\tObject.freeze(this.#arrayRestrictions);\n\t\tObject.freeze(this.#elementRestrictions);\n\t}\n\n\t/**\n\t * get class name\n\t *\n\t * @returns {string}\n\t */\n\tgetClassName() {\n\t\treturn 'ModelArray';\n\t}\n\n\t/**\n\t * get element name\n\t *\n\t * element name is used for xml interface\n\t *\n\t * @returns {string}\n\t */\n\tgetElementName() {\n\t\treturn this.#elementName;\n\t}\n\n\t/**\n\t * verify if array is associative\n\t *\n\t * @returns {boolean}\n\t */\n\tisAssociative() {\n\t\treturn this.#isAssociative;\n\t}\n\n\t/**\n\t * verify if elements of comhon array must be not null\n\t *\n\t * @returns {boolean}\n\t */\n\tisNotNullElement() {\n\t\treturn this.#isNotNullElement;\n\t}\n\n\t/**\n\t * verify if elements of comhon array are isolated\n\t *\n\t * @returns {boolean}\n\t */\n\tisIsolatedElement() {\n\t\treturn this.#isIsolatedElement;\n\t}\n\n\t/**\n\t * get restrictions applied on comhon array itslef\n\t *\n\t * @returns {Restriction[]}\n\t */\n\tgetArrayRestrictions() {\n\t\treturn this.#arrayRestrictions;\n\t}\n\n\t/**\n\t * get restrictions applied on each comhon array element\n\t *\n\t * @returns {Restriction[]}\n\t */\n\tgetElementRestrictions() {\n\t\treturn this.#elementRestrictions;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelComplex}::getObjectInstance()\n\t * @returns {ComhonArray}\n\t */\n\tgetObjectInstance(isloaded = true) {\n\t\treturn new ComhonArray(this, isloaded);\n\t}\n\n\t/**\n\t * get model array dimensions count\n\t *\n\t * @returns {integer}\n\t */\n\tgetDimensionsCount() {\n\t\treturn this._getModel() instanceof ModelArray\n\t\t\t? (this._getModel().getDimensionsCount() + 1)\n\t\t\t: 1;\n\t}\n\n\t/**\n\t * verify if during import we stay in first level object or not\n\t *\n\t * @param {boolean} isCurrentLevelFirstLevel\n\t * @returns {boolean}\n\t */\n\t_isNextLevelFirstLevel(isCurrentLevelFirstLevel) {\n\t\treturn false;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractModel}::_export()\n\t * @param {boolean} isolate determine if each array elements must be isolated.\n\t *                         this parameter may by true only if the exported root object is an array\n\t *                         and if the parameter forceIsolateElements is set to true.\n\t */\n\t_export(objectArray, nodeName, interfacer, isFirstLevel, objectCollectionInterfacer, nullNodes, oids, isolate = false) {\n\t\t/** @var {ComhonArray} objectArray */\n\t\tif (objectArray === null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (!isFirstLevel || interfacer.mustValidate()) {\n\t\t\tobjectArray.validate();\n\t\t}\n\t\tconst nodeArray = interfacer.createArrayNode(nodeName);\n\t\tisolate = isolate || this.#isIsolatedElement;\n\n\t\tlet key, value, exportedValue;\n\t\tfor ([key, value] of objectArray) {\n\t\t\ttry {\n\t\t\t\tif ((value === null) && (nullNodes !== null)) {\n\t\t\t\t\t// if nullNodes is not null interfacer must be a xml interfacer\n\t\t\t\t\texportedValue = interfacer.createNode(this.#elementName);\n\t\t\t\t\tnullNodes.push(exportedValue);\n\t\t\t\t} else {\n\t\t\t\t\texportedValue = this.getLoadedModel()._export(value, this.#elementName, interfacer, isFirstLevel, objectCollectionInterfacer, nullNodes, oids, isolate);\n\t\t\t\t}\n\t\t\t\tif (this.#isAssociative) {\n\t\t\t\t\tinterfacer.addAssociativeValue(nodeArray, exportedValue, key, this.#elementName);\n\t\t\t\t} else {\n\t\t\t\t\tinterfacer.addValue(nodeArray, exportedValue, this.#elementName);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthrow new ExportException(e, key);\n\t\t\t}\n\t\t}\n\t\treturn nodeArray;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelComplex}::_exportId()\n\t */\n\t_exportId(objectArray, nodeName, interfacer, objectCollectionInterfacer, nullNodes) {\n\t\tconst nodeArray = interfacer.createArrayNode(nodeName);\n\n\t\tlet key, value, exportedValue;\n\t\tfor ([key, value] of objectArray) {\n\t\t\ttry {\n\t\t\t\tif (value === null) {\n\t\t\t\t\tif (nullNodes !== null) {\n\t\t\t\t\t\t// if nullNodes is not null interfacer must be a xml interfacer\n\t\t\t\t\t\texportedValue = interfacer.createNode(this.#elementName);\n\t\t\t\t\t\tnullNodes.push(exportedValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\texportedValue = null;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\texportedValue = this.getLoadedModel()._exportId(value, this.#elementName, interfacer, objectCollectionInterfacer, nullNodes);\n\t\t\t\t}\n\t\t\t\tif (this.#isAssociative) {\n\t\t\t\t\tinterfacer.addAssociativeValue(nodeArray, exportedValue, key, this.#elementName);\n\t\t\t\t} else {\n\t\t\t\t\tinterfacer.addValue(nodeArray, exportedValue, this.#elementName);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthrow new ExportException(e, key);\n\t\t\t}\n\t\t}\n\t\treturn nodeArray;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractModel}::_import()\n\t *\n\t * @returns {ComhonArray|void}\n\t */\n\tasync _import(interfacedObject, interfacer, isFirstLevel, objectCollectionInterfacer, isolate = false) {\n\t\tif (interfacer.isNullValue(interfacedObject)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (!interfacer.isArrayNodeValue(interfacedObject, this.#isAssociative)) {\n\t\t\tthrow new UnexpectedValueTypeException(interfacedObject, interfacer.getArrayNodeClasses().join(' or '));\n\t\t}\n\t\t// ensure model is loaded\n\t\tawait this.getModel();\n\n\t\tconst objectArray = this.getObjectInstance(false);\n\t\tawait this._fillObject(objectArray, interfacedObject, interfacer, isFirstLevel, objectCollectionInterfacer, isolate);\n\t\treturn objectArray;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see \\Comhon\\Model\\ModelContainer::_fillObject()\n\t */\n\tasync _fillObject(objectArray, interfacedObject, interfacer, isFirstLevel, objectCollectionInterfacer, isolate = false) {\n\t\tif (!(objectArray instanceof ComhonArray)) {\n\t\t\tthrow new ArgumentException(objectArray, 'ComhonArray', 1);\n\t\t}\n\t\tisolate = isolate || this.#isIsolatedElement;\n\t\tconst elements = this._getInterfacedElements(interfacedObject, interfacer);\n\t\tconst keys = Array.isArray(elements) ? elements.keys() : Object.keys(elements);\n\n\t\tfor (const key of keys) {\n\t\t\ttry {\n\t\t\t\tconst element = elements[key];\n\t\t\t\tconst value = await this.getLoadedModel()._import(element, interfacer, isFirstLevel, objectCollectionInterfacer, isolate);\n\t\t\t\tif (this.#isAssociative) {\n\t\t\t\t\tobjectArray.setValue(key, value, interfacer.hasToFlagValuesAsUpdated());\n\t\t\t\t} else {\n\t\t\t\t\tobjectArray.pushValue(value, interfacer.hasToFlagValuesAsUpdated());\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof ComhonException) {\n\t\t\t\t\tthrow new ImportException(e, key);\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!isFirstLevel || interfacer.mustValidate()) {\n\t\t\tobjectArray.validate();\n\t\t}\n\t\tobjectArray.setIsLoaded(true);\n\t}\n\n\t/**\n\t * create object array and for each array element, create or get comhon object according interfaced id\n\t *\n\t * @async\n\t * @param {*} interfacedId\n\t * @param {Interfacer} interfacer\n\t * @param {boolean} isFirstLevel\n\t * @param {ObjectCollectionInterfacer} objectCollectionInterfacer\n\t * @returns {Promise<ComhonArray>}\n\t */\n\tasync _importId(interfacedObject, interfacer, isFirstLevel, objectCollectionInterfacer) {\n\t\tif (interfacer.isNullValue(interfacedObject)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (!interfacer.isArrayNodeValue(interfacedObject, this.#isAssociative)) {\n\t\t\tthrow new UnexpectedValueTypeException(interfacedObject, interfacer.getArrayNodeClasses().join(' or '));\n\t\t}\n\t\t// ensure contained model is loaded\n\t\tawait this.getModel();\n\n\t\tconst objectArray = this.getObjectInstance(false);\n\t\tconst elements = this._getInterfacedElements(interfacedObject, interfacer);\n\t\tconst keys = Array.isArray(elements) ? elements.keys() : Object.keys(elements);\n\n\t\tfor (const key of keys) {\n\t\t\tconst element = elements[key];\n\t\t\tconst value = await this.getLoadedModel()._importId(element, interfacer, false, objectCollectionInterfacer);\n\t\t\tif (this.#isAssociative) {\n\t\t\t\tobjectArray.setValue(key, value, interfacer.hasToFlagValuesAsUpdated());\n\t\t\t} else {\n\t\t\t\tobjectArray.pushValue(value, interfacer.hasToFlagValuesAsUpdated());\n\t\t\t}\n\t\t}\n\t\tif (!isFirstLevel || interfacer.mustValidate()) {\n\t\t\tobjectArray.validate();\n\t\t}\n\t\tobjectArray.setIsLoaded(true);\n\t\treturn objectArray;\n\t}\n\n\t/**\n\t * import interfaced array\n\t *\n\t * build comhon object array with values from interfaced object\n\t *\n\t * @async\n\t * @param {*} interfacedObject\n\t * @param {Interfacer} interfacer\n\t * @param {boolean} forceIsolateElements force isolate each elements of imported array\n\t * (isolated element doesn't share objects instances with others elements)\n\t * @throws {ComhonException}\n\t * @returns {Promise<ComhonArray>}\n\t */\n\tasync import(interfacedObject, interfacer, forceIsolateElements = true) {\n\t\ttry {\n\t\t\treturn this._importRoot(interfacedObject, interfacer, null, forceIsolateElements);\n\t\t} catch (e) {\n\t\t\tif (e instanceof ComhonException) {\n\t\t\t\tthrow new ImportException(e);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelComplex}::fillObject()\n\t * @param {boolean} forceIsolateElements force isolate each elements of imported array\n\t * (isolated element doesn't share objects instances with others elements)\n\t */\n\tasync fillObject(objectArray, interfacedObject, interfacer, forceIsolateElements = true) {\n\t\tthis.verifValue(objectArray);\n\n\t\ttry {\n\t\t\tconst imported = await this._importRoot(interfacedObject, interfacer, objectArray, forceIsolateElements);\n\t\t\tif (imported !== objectArray) {\n\t\t\t\tthrow new ComhonException('invalid object instance');\n\t\t\t}\n\t\t\treturn objectArray;\n\t\t} catch (e) {\n\t\t\tif (e instanceof ComhonException) {\n\t\t\t\tthrow new ImportException(e);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelComplex}::_importRoot()\n\t * @returns {ComhonArray}\n\t */\n\tasync _importRoot(interfacedObject, interfacer, rootObject = null, isolate = false) {\n\t\tif (!interfacer.isArrayNodeValue(interfacedObject, this.isAssociative)) {\n\t\t\tthrow new IncompatibleValueException(interfacedObject, interfacer);\n\t\t}\n\n\t\treturn super._importRoot(interfacedObject, interfacer, rootObject, isolate);\n\t}\n\n\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelComplex}::_getRootObject()\n\t */\n\tasync _getRootObject(interfacedObject, interfacer) {\n\t\treturn this.getObjectInstance(false);\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelContainer}::_initObjectCollectionInterfacer()\n\t */\n\t_initObjectCollectionInterfacer(objectArray, mergeType) {\n\t\tlet objectCollectionInterfacer;\n\t\tconst uniqueModel = this.getLoadedUniqueModel();\n\n\t\tif (uniqueModel instanceof Model && uniqueModel.hasIdProperties()) {\n\t\t\tif (mergeType === Interfacer.MERGE) {\n\t\t\t\tobjectCollectionInterfacer = new ObjectCollectionInterfacer(objectArray);\n\t\t\t} else {\n\t\t\t\tobjectCollectionInterfacer = new ObjectCollectionInterfacer();\n\t\t\t\tfor (const value of ModelArray.getOneDimensionalValues(objectArray, true)) {\n\t\t\t\t\tobjectCollectionInterfacer.addStartObject(value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tobjectCollectionInterfacer = new ObjectCollectionInterfacer();\n\t\t}\n\t\treturn objectCollectionInterfacer;\n\t}\n\n\t/**\n\t * get object array values in one dimentional array\n\t *\n\t * @param {ComhonArray} objectArray\n\t * @param {boolean} skipNullValues\n\t * @returns {Array.}\n\t */\n\tstatic getOneDimensionalValues(objectArray, skipNullValues = false) {\n\t\tlet objectArrayElmt;\n\t\tconst values = [];\n\t\tconst stack = [objectArray];\n\n\t\twhile (stack.length > 0) {\n\t\t\tobjectArrayElmt = stack.pop();\n\t\t\tif (objectArrayElmt.getModel().getLoadedModel() instanceof ModelArray) {\n\t\t\t\tfor (const keyAndValue of objectArrayElmt) {\n\t\t\t\t\tif (keyAndValue[1] !== null) {\n\t\t\t\t\t\tstack.push(keyAndValue[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (const keyAndValue of objectArrayElmt) {\n\t\t\t\t\tif (!skipNullValues || keyAndValue[1] !== null) {\n\t\t\t\t\t\tvalues.push(keyAndValue[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn values;\n\t}\n\n\t/**\n\t* get interfaced object elements. typically transfom xml node to array (or Object if array is associative).\n\t*\n\t* @private\n\t*/\n\t_getInterfacedElements(interfacedObject, interfacer) {\n\t\treturn interfacer instanceof XMLInterfacer\n\t\t\t? (\n\t\t\t\t\tthis.#isAssociative\n\t\t\t\t\t\t? this.interfacer.nodeToObject(interfacedObject)\n\t\t\t\t\t\t: this.interfacer.nodeToArray(interfacedObject)\n\t\t\t\t)\n\t\t\t: interfacedObject;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {AbstractModel}::verifValue()\n\t */\n\tverifValue(value) {\n\t\tif (!(value instanceof ComhonArray)) {\n\t\t\tthrow new UnexpectedValueTypeException(value, `ComhonArray(${this.getUniqueModelName()})`);\n\t\t}\n\t\treturn this._verifModel(value.getModel(), value, 0);\n\t}\n\n\t/**\n\t *\n\t * @param {Model} modelArray\n\t * @throws UnexpectedValueTypeException\n\t * @throws UnexpectedArrayException\n\t * @returns {boolean}\n\t */\n\t_verifModel(model, value, depth) {\n\t\tif (model === this) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!(model instanceof ModelArray)) {\n\t\t\tthrow new UnexpectedArrayException(value, this, depth);\n\t\t}\n\t\tif (this.#isAssociative !== model.#isAssociative) {\n\t\t\tthrow new UnexpectedArrayException(value, this, depth);\n\t\t}\n\t\tif (this.#elementName !== model.#elementName) {\n\t\t\tthrow new UnexpectedArrayException(value, this, depth);\n\t\t}\n\t\tif (this.#isNotNullElement !== model.#isNotNullElement) {\n\t\t\tthrow new UnexpectedArrayException(value, this, depth);\n\t\t}\n\t\tif (this.#isIsolatedElement !== model.#isIsolatedElement) {\n\t\t\tthrow new UnexpectedArrayException(value, this, depth);\n\t\t}\n\t\tif (model.getLoadedModel() !== this._getModel()) {\n\t\t\tif (this._getModel() instanceof ModelArray) {\n\t\t\t\tthis._getModel()._verifModel(model.getLoadedModel(), value, depth + 1);\n\t\t\t} else if (\n\t\t\t\t\t!(model.getLoadedModel() instanceof Model)\n\t\t\t\t\t|| !model.getLoadedModel().isInheritedFrom(this._getModel())\n\t\t\t) {\n\t\t\t\tthrow new UnexpectedArrayException(value, this, depth);\n\t\t\t}\n\t\t}\n\t\tif (!Restriction.compare(this.#arrayRestrictions, model.getArrayRestrictions())) {\n\t\t\tthrow new UnexpectedArrayException(value, this, depth);\n\t\t}\n\t\tif (!Restriction.compare(this.#elementRestrictions, model.getElementRestrictions())) {\n\t\t\tthrow new UnexpectedArrayException(value, this, depth);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * verify if value is correct according element model in object array\n\t *\n\t * @param {*} value\n\t * @returns {boolean}\n\t */\n\tverifElementValue(value) {\n\t\tif (value === null) {\n\t\t\tif (this.#isNotNullElement) {\n\t\t\t\tthrow new NotSatisfiedRestrictionException(value, new NotNull());\n\t\t\t}\n\t\t} else {\n\t\t\tthis.getLoadedModel().verifValue(value);\n\t\t\tconst restriction = Restriction.getFirstNotSatisifed(this.#elementRestrictions, value);\n\t\t\tif (restriction !== null) {\n\t\t\t\tthrow new NotSatisfiedRestrictionException(value, restriction);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * {@inheritDoc}\n\t * @see {ModelContainer}::isEqual()\n\t */\n\tisEqual(model) {\n\t\treturn this === model || (super.isEqual(model) &&\n\t\t\tRestriction.compare(this.#arrayRestrictions, model.getArrayRestrictions()) &&\n\t\t\tRestriction.compare(this.#elementRestrictions, model.getElementRestrictions()));\n\t}\n\n}\n\nexport default ModelArray;\n","import ModelManager from 'Logic/Model/Manager/ModelManager';\nimport ApiModelNameManager from 'Logic/Model/Manager/ApiModelNameManager';\nimport ModelArray from 'Logic/Model/ModelArray';\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport HTTPException from 'Logic/Exception/HTTP/HTTPException';\n\nclass PageUtils {\n\n  /**\n   * get model according givenAPI ModelName\n   *\n   * @param {string} apiModelName the API model name\n   * @param {boolean} collection if true ModelArray is return\n   * @param {function} onUnauthorized function to execute on unauthorized request\n   *                                  (typically may be a login function)\n   */\n  async getModelWithApiModelName(apiModelName, collection = false, onUnauthorized = null) {\n    try {\n      let model;\n      let modelName = ApiModelNameManager.getModelName(apiModelName);\n      modelName = modelName ?? apiModelName;\n      model = await ModelManager.getInstance().getInstanceModel(modelName);\n      if (collection) {\n        model = new ModelArray(model);\n      }\n      return model;\n    } catch (error) {\n      this.manageError(error, onUnauthorized, 'model '+apiModelName);\n    }\n    return null;\n  }\n\n  /**\n   * verify if model is requestable.\n   * if given model is instance of Model, verify if model is requestable for unique route\n   * if given model is instance of ModelArray, verify if model is requestable for collection route\n   *\n   * @param {Model|ModelArray} model\n   */\n  async isRequestable(model) {\n    let isRequestable = false;\n    const uniqueModel = model instanceof ModelArray\n      ? model.getLoadedModel() : model;\n    const options = await uniqueModel.getOptions();\n    const valueName = model instanceof ModelArray ? 'collection' : 'unique';\n    const allowedMethods = options.issetValue(valueName) && options.getValue(valueName).issetValue('allowed_methods')\n      ? options.getValue(valueName).getValue('allowed_methods')\n      : null;\n\n    if (allowedMethods !== null) {\n      for (const keyAndValue of allowedMethods) {\n        if (keyAndValue[1] === 'GET') {\n          isRequestable = true;\n          break;\n        }\n      }\n    }\n    return isRequestable;\n  }\n\n  /**\n   * manage error\n   *\n   * @param {*} error the error to manage\n   * @param {function} onUnauthorized function to execute on unauthorized request\n   *                                  (typically may be a login function)\n   * @param {boolean} sentencePrefix a prefix to concatenate to error sentence\n   */\n  manageError(error, onUnauthorized = null, sentencePrefix = '') {\n    if (error instanceof HTTPException) {\n      if (error.getCode() === 401 && onUnauthorized) {\n        onUnauthorized();\n      } else {\n        alert(this.getErrorSentence(error.getCode(), sentencePrefix));\n      }\n    } else {\n      console.log(error);\n      if (error instanceof ComhonException) {\n        alert(error.getMessage());\n      } else {\n        alert('unknown server error when trying to retrieve models');\n      }\n    }\n  }\n\n  getErrorSentence(responseStatus, prefix = '', suffix = '') {\n    let sentence;\n    switch (responseStatus) {\n      case 401:\n        sentence = 'unauthorized (login and retry)';\n        break;\n      case 403:\n        sentence = 'forbidden';\n        break;\n      case 404:\n        sentence = 'not found';\n        break;\n      case 405:\n        sentence = 'not requestable';\n        break;\n      default:\n        sentence = 'unknown error';\n    }\n    return `${prefix} ${sentence} ${suffix}`;\n  }\n}\n\nexport default new PageUtils();\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport 'Details/Details.css';\nimport ComponentGenerator from 'ComponentGenerator/ComponentGenerator';\nimport ApiModelNameManager from 'Logic/Model/Manager/ApiModelNameManager';\nimport PageUtils from 'Page/Utils/PageUtils';\n\nclass Details extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClickable: false\n    };\n    this.getComponentList = this.getComponentList.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.setIsClickable();\n  }\n\n  async setIsClickable() {\n    if (this.props.isAggregation) {\n      this.setState({isClickable: true});\n      return;\n    }\n    if (!this.props.isForeign || this.props.isRoot || !this.props.object.getModel().hasIdProperties()) {\n      return;\n    }\n    if (await PageUtils.isRequestable(this.props.object.getModel())) {\n        this.setState({isClickable: true});\n    }\n  }\n\n  getValueComponent(object, propertyName) {\n    const value = object.getValue(propertyName);\n    const propertyModel = object.getModel().getProperty(propertyName).getLoadedModel();\n\n    return (\n      <div className=\"value\" key={propertyName}>\n        <span className=\"property\">{propertyName} :</span>\n        {ComponentGenerator.generate(value, propertyModel)}\n      </div>\n    );\n  }\n\n  getComponentList(object) {\n    const list = [];\n    for (const keyAndvalue of object) {\n      list.push(this.getValueComponent(object, keyAndvalue[0]));\n    }\n    if (object.getModel() !== this.props.componentModel) {\n      list.push(\n        <div className=\"value\" key=\"inheritance-\">\n          <span className=\"property\">inheritance :</span>\n          <span className=\"simple inheritance\">{object.getModel().getName()}</span>\n        </div>\n      );\n    }\n\n    return list;\n  }\n\n  handleClick(event) {\n    event.stopPropagation();\n    if (!this.state.isClickable) {\n      return;\n    }\n    let apiModelName = ApiModelNameManager.getApiModelName(this.props.object.getModel().getName());\n    apiModelName = apiModelName ?? this.props.object.getModel().getName();\n    const newPath = '/'+apiModelName+'/'+this.props.object.getId();\n    if (!this.props.isRoot && this.props.location.pathname !== newPath) {\n      this.props.history.push(newPath);\n    }\n  }\n\n  render() {\n    return (\n      this.props.isForeign\n      ? <span className={this.state.isClickable ? 'foreign simple clickable' : 'foreign simple'} onClick={this.handleClick}>{this.props.object.getId()}</span>\n      : <div className={this.state.isClickable ? 'details clickable' : 'details'} onClick={this.handleClick}>\n          {this.getComponentList(this.props.object)}\n        </div>\n    );\n  }\n}\n\nexport default withRouter(Details);\n","import React from 'react';\nimport './List.css';\nimport ComhonArray from 'Logic/Object/ComhonArray';\nimport Model from 'Logic/Model/Model';\nimport ModelArray from 'Logic/Model/ModelArray';\nimport ComponentGenerator from 'ComponentGenerator/ComponentGenerator';\n\nclass List extends React.Component {\n\n  #isForeign = false;\n\n  #isAggregation = false;\n\n  constructor(props) {\n    super(props);\n    if (props.isForeign) {\n      this.#isForeign = true;\n    }\n    if (props.isAggregation) {\n      this.#isAggregation = true;\n    }\n    this.getComponentList = this.getComponentList.bind(this);\n    this.getValueComponent = this.getValueComponent.bind(this);\n  }\n\n  getValueComponent(object, key, useKeyId) {\n    const value = object.getValue(key);\n    const elementModel = object.getModel().getLoadedModel();\n    const componentKey = useKeyId && value.getId() !== null ? value.getId() : key;\n    const isComplex = elementModel instanceof ModelArray || elementModel instanceof Model;\n\n    return (\n      <div key={componentKey}>\n        {isComplex ? <div className=\"separator\"/> : null}\n        {isComplex ? null : (object.getModel().isAssociative() ? `${key} : ` : '- ')}\n        {ComponentGenerator.generate(value, elementModel, this.#isForeign, this.#isAggregation)}\n      </div>\n    );\n  }\n\n  getComponentList(object) {\n    const useKeyId = object instanceof ComhonArray && object.getModel().getLoadedModel() instanceof Model\n      && object.getModel().getLoadedModel().hasIdProperties();\n    const list = [];\n    for (const keyAndvalue of object) {\n      list.push(this.getValueComponent(object, keyAndvalue[0], useKeyId));\n    }\n\n    return list;\n  }\n\n  render() {\n    const isComplex = this.props.object\n      && (this.props.object.getModel().getLoadedModel() instanceof ModelArray\n      || this.props.object.getModel().getLoadedModel() instanceof Model);\n\n    return (\n      this.props.object.count() > 0\n      ? <div className={isComplex ? 'complexList' : 'simpleList'}>\n          {this.getComponentList(this.props.object)}\n        </div>\n      : (this.props.isRoot\n          ? <span style={{fontSize: '30px'}}>no results</span>\n          : <span className=\"simple null\">{'<empty>'}</span>\n        )\n    );\n  }\n}\n\nexport default List;\n","import 'ComponentGenerator/ComponentGenerator.css';\nimport Details from 'Details/Details';\nimport List from 'List/List';\nimport ModelForeign from 'Logic/Model/ModelForeign';\n\nclass ComponentGenerator {\n\n  static generate(value, valueModel, isForeign = false, isAggregation = false, isRoot = false) {\n    if (value === null) {\n      return <span className=\"simple null\">null</span>\n    }\n    if (valueModel instanceof ModelForeign) {\n      valueModel = valueModel.getLoadedModel();\n      isForeign = true;\n    }\n    switch (valueModel.getClassName()) {\n      case 'Model':\n        return <Details object={value} componentModel={valueModel} isRoot={isRoot} isForeign={isForeign} isAggregation={isAggregation}/>;\n      case 'ModelArray':\n        return <List object={value} componentModel={valueModel} isRoot={isRoot} isForeign={isForeign} isAggregation={isAggregation}/>;\n      case 'integer':\n      case 'index':\n      case 'float':\n      case 'string':\n        return <span className=\"simple\">{value}</span>\n      case 'percentage':\n        return <span className=\"simple\">{(value * 100) + ' %'}</span>\n      case 'dateTime':\n        return <span className=\"simple\">{value.toLocaleDateString() + ' at ' + value.toLocaleTimeString()}</span>\n      case 'boolean':\n        return value\n          ? <span className=\"simple true\">true</span>\n          : <span className=\"simple false\">false</span>\n      default:\n        throw new Error('invalid model '+valueModel.getClassName());\n    }\n  }\n}\n\nexport default ComponentGenerator;\n","import React from 'react';\nimport 'Loading/Loading.css';\n\nclass Loading extends React.Component {\n\n\n  render() {\n    return (\n      <div className=\"d-flex justify-content-center\">\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport './PageObject.css';\nimport ModelArray from 'Logic/Model/ModelArray';\nimport Model from 'Logic/Model/Model';\nimport ObjectInterfacer from 'Logic/Interfacer/ObjectInterfacer';\nimport Requester from 'Logic/Requester/Requester';\nimport ComponentGenerator from 'ComponentGenerator/ComponentGenerator';\nimport Loading from 'Loading/Loading';\nimport PageUtils from 'Page/Utils/PageUtils';\nimport ApiModelNameManager from 'Logic/Model/Manager/ApiModelNameManager';\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport HTTPException from 'Logic/Exception/HTTP/HTTPException';\n\nclass PageObject extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      object: null,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    this.initComponent();\n  }\n\n  async initComponent() {\n    if (!this.props.model) {\n      throw new ComhonException('invalid model');\n    }\n    const isRequestable = await PageUtils.isRequestable(this.props.model);\n    if (isRequestable) {\n      this.setObject();\n    } else {\n      this.setState({\n        object: null,\n        error: 'model not found or not requestable'\n      });\n    }\n  }\n\n  async setObject() {\n    try {\n      const object = this.props.model instanceof Model\n        ? await this.retrieveComhonObject()\n        : await this.retrieveComhonArray();\n      if (object === null) {\n        this.setState({\n          object: null,\n          error: PageUtils.getErrorSentence(404)\n        });\n      } else {\n        this.setState({object: object});\n      }\n    } catch (error) {\n      PageUtils.manageError(error, this.props.onUnauthorized);\n    }\n  }\n\n  async retrieveComhonArray() {\n    let apiModelName = ApiModelNameManager.getApiModelName(this.props.model.getLoadedModel().getName());\n    apiModelName = apiModelName ?? this.props.model.getName();\n\t\tconst xhr = await Requester.get(apiModelName);\n    if (xhr.status === 200) {\n      return await this.props.model.import(JSON.parse(xhr.responseText), new ObjectInterfacer());\n    } else {\n      throw new HTTPException(xhr);\n    }\n  }\n\n  async retrieveComhonObject() {\n    let id = this.props.id;\n    if (this.props.model.hasUniqueIdProperty && this.props.model.getUniqueIdProperty().getLoadedModel().castValue) {\n      id = this.props.model.getUniqueIdProperty().getLoadedModel().castValue(id);\n    }\n\t\treturn this.props.model.loadObject(id);\n  }\n\n  render() {\n    const isAggregation = this.props.model && this.props.model instanceof ModelArray;\n    return (\n      <div>\n        {\n          this.state.object !== null\n            ? ComponentGenerator.generate(this.state.object, this.props.model, false, isAggregation, true)\n            : (this.state.error ? this.state.error : <Loading />)\n        }\n      </div>\n    );\n  }\n}\n\nexport default PageObject;\n","import React from 'react';\nimport 'Page/Details/PageDetails.css';\n\nclass PageFilter extends React.Component {\n\n  render() {\n    // TODO add filter, range, order, properties.\n    return (\n      <div>\n      </div>\n    );\n  }\n}\n\nexport default PageFilter;\n","import React from 'react';\nimport { withRouter } from \"react-router\";\nimport 'Page/List/PageList.css';\nimport PageObject from 'Page/Object/PageObject';\nimport PageFilter from 'Page/Filter/PageFilter';\nimport PageUtils from 'Page/Utils/PageUtils';\nimport Loading from 'Loading/Loading';\n\n\nclass PageList extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      model: null,\n      error: false\n    };\n  }\n\n  componentDidMount() {\n    PageUtils.getModelWithApiModelName(this.props.match.params.pathModel, true, this.props.onUnauthorized)\n    .then(model => {\n        if (model === null) {\n          this.setState({error: true});\n        } else {\n          this.setState({model: model});\n        }\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"title\">list {this.props.match.params.pathModel}</h1>\n        {\n          this.state.model\n          ? <div>\n              <PageFilter model={this.state.model} onUnauthorized={this.props.onUnauthorized}/>\n              <PageObject model={this.state.model} onUnauthorized={this.props.onUnauthorized}/>\n            </div>\n          : (this.state.error ? null : <Loading/>)\n        }\n      </div>\n    );\n  }\n}\n\nexport default withRouter(PageList);\n","import React from 'react';\nimport 'Page/Details/PageDetails.css';\nimport PageObject from 'Page/Object/PageObject';\nimport PageUtils from 'Page/Utils/PageUtils';\nimport Loading from 'Loading/Loading';\n\nimport { withRouter } from \"react-router\";\n\nclass PageDetails extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      model: null,\n      error: false\n    };\n  }\n\n  componentDidMount() {\n    PageUtils.getModelWithApiModelName(this.props.match.params.pathModel, false, this.props.onUnauthorized)\n    .then(model => {\n        if (model === null) {\n          this.setState({error: true});\n        } else {\n          this.setState({model: model});\n        }\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"title\">\n          {this.props.match.params.pathModel} :\n          <span style={{'marginLeft': '15px', color: 'rgba(180, 180, 180)'}}>{this.props.match.params.id}</span>\n        </h1>\n        {\n          this.state.model\n          ? <div>\n              <PageObject model={this.state.model} id={this.props.match.params.id} onUnauthorized={this.props.onUnauthorized}/>\n            </div>\n          : (this.state.error ? null : <Loading/>)\n        }\n      </div>\n    );\n  }\n}\n\nexport default  withRouter(PageDetails);\n","import React from 'react';\nimport { Switch, Route, withRouter } from 'react-router-dom';\nimport $ from 'jquery';\n\nimport './App.css';\nimport Account from 'Account/Account';\nimport Home from 'Home/Home';\nimport Login from 'Login/Login';\nimport NavBar from 'NavBar/NavBar';\nimport PageList from 'Page/List/PageList';\nimport PageDetails from 'Page/Details/PageDetails';\nimport Loading from 'Loading/Loading';\nimport Cookie from 'Cookie/Cookie';\nimport ApiModelNameManager from 'Logic/Model/Manager/ApiModelNameManager';\nimport ComhonConfig from 'Logic/Config/ComhonConfig';\nimport ComhonException from 'Logic/Exception/ComhonException';\nimport HTTPException from 'Logic/Exception/HTTP/HTTPException';\n// import ModelManager from 'Logic/Model/Manager/ModelManager';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      logged: false,\n      appInitialized: false,\n      models: [],\n    };\n    this.handleLogin = this.handleLogin.bind(this);\n    this.showLoginModal = this.showLoginModal.bind(this);\n  }\n\n  componentDidMount() {\n    ComhonConfig.initialize({\n      baseURI : 'http://localhost:8000/api/comhon/'\n    });\n\n    let token = Cookie.getCookie('token');\n    if (token !== \"\") {\n      Account.validateToken(token).then(xhr => {\n        if (xhr.status === 200) {\n          // if token is valid, we must initilize app as logged\n          Account.importToken(token, false);\n          this.initApp(true);\n        } else if (xhr.status === 401) {\n          // if token is not valid, we must initilize app as not logged\n          this.initApp(false);\n        } else {\n            alert('unknown server error when trying to initialize application');\n        }\n      }).catch(error => {\n        if (error instanceof ComhonException) {\n          alert(error.getMessage());\n        } else {\n          alert('unknown error during token validation');\n        }\n      });\n    } else {\n      // if there is no token, we must initilize app as not logged\n      this.initApp(false);\n    }\n  }\n\n  initApp(islogged) {\n    return new Promise((resolve) => {\n      ApiModelNameManager.getApiModelNames(!islogged).then(models => {\n        this.setState({\n          models: models,\n          appInitialized: true,\n          logged: islogged\n        });\n        return resolve();\n      }).catch(error => {\n        if (error instanceof ComhonException) {\n          if (error instanceof HTTPException && error.getCode === 401 && !islogged) {\n            this.setState({\n              appInitialized: true,\n              logged: islogged\n            });\n          } else {\n            alert(error.getMessage());\n          }\n        } else {\n          alert('unknown error during application initialization');\n        }\n        return resolve();\n      });\n    });\n  }\n\n  handleLogin() {\n    this.initApp(true).then(() => {\n      if (this.props.location.pathname === '/login' || this.props.location.pathname === '/login/') {\n        this.props.history.push('/home');\n      } else {\n        $(document.getElementById('loginModal')).modal('hide');\n      }\n    });\n  }\n\n  showLoginModal() {\n    $(document.getElementById('loginModal')).modal({\n      backdrop: 'static',\n      keyboard: false\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar logged={this.state.logged} appInitialized={this.state.appInitialized} models={this.state.models} />\n        <div className=\"App\">\n          {this.state.appInitialized\n            ? <Switch>\n                <Route exact path='/' component={Home} />\n                <Route exact path='/home' component={Home} />\n                <Route exact path='/login' component={() => <Login onLogin={this.handleLogin} />} />\n                <Route path='/:pathModel/:id' component={() => <PageDetails key={Date.now()} onUnauthorized={this.showLoginModal} />} />\n                <Route path='/:pathModel' component={() => <PageList key={Date.now()} onUnauthorized={this.showLoginModal} />} />\n              </Switch>\n            : <Loading />\n          }\n        </div>\n        <div id=\"loginModal\" className=\"modal\" tabIndex=\"-1\">\n          <div className=\"modal-dialog\">\n            <div className=\"modal-content\">\n              <div className=\"modal-header\">\n                <h5 className=\"modal-title\">Login</h5>\n              </div>\n              <Login onLogin={this.handleLogin} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport \"../node_modules/react-datetime/css/react-datetime.css\";\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/bootstrap/dist/js/bootstrap.min.js';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n  //  <Route path=\"/:model\" component={CarDetail} data={data}/>\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}